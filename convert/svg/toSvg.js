import { getPaths, getSurfaces, getZ0Surfaces, measureBoundingBox } from '@jsxcad/geometry-tagged';
import { makeConvex as makeConvexSurface } from '@jsxcad/geometry-surface';
import { makeConvex as makeConvexZ0Surface } from '@jsxcad/geometry-z0surface';

const X = 0;
const Y = 1;

const toColorFromTags = (tags, otherwise = 'black') => {
  if (tags !== undefined) {
    for (const tag of tags) {
      if (tag.startsWith('color/')) {
        return tag.substring(6);
      }
    }
  }
  return otherwise;
};

export const toSvg = async ({ padding = 0 }, geometry) => {
  const [min, max] = measureBoundingBox(geometry);
  const width = max[X] - min[X];
  const height = max[Y] - min[Y];

  const svg = [
    `<?xml version="1.0" encoding="UTF-8"?>`,
    `<!-- Generated by jsxcad -->`,
    `<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1 Tiny//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd">`,
    `<svg baseProfile="tiny" height="${height} mm" width="${width} mm" viewBox="${-padding} ${-padding} ${width + 2 * padding} ${height + 2 * padding}" version="1.1" stroke="black" stroke-width=".1" fill="none" xmlns="http://www.w3.org/2000/svg">`
  ];

  for (const { surface, tags } of getSurfaces(geometry)) {
    const color = toColorFromTags(tags);
    for (const polygon of makeConvexSurface({}, surface)) {
      svg.push(`<path fill="${color}" d="${polygon.map((point, index) => `${index === 0 ? 'M' : 'L'}${point[0]} ${point[1]}`).join(' ')} z"/>`);
    }
  }
  for (const { z0Surface, tags } of getZ0Surfaces(geometry)) {
    const color = toColorFromTags(tags);
    for (const polygon of makeConvexZ0Surface({}, z0Surface)) {
      svg.push(`<path fill="${color}" d="${polygon.map((point, index) => `${index === 0 ? 'M' : 'L'}${point[0]} ${point[1]}`).join(' ')} z"/>`);
    }
  }
  for (const { paths, tags } of getPaths(geometry)) {
    const color = toColorFromTags(tags);
    for (const path of paths) {
      if (path[0] === null) {
        svg.push(`<path stroke="${color}" d="${path.slice(1).map((point, index) => `${index === 0 ? 'M' : 'L'}${point[0]} ${point[1]}`).join(' ')}"/>`);
      } else {
        svg.push(`<path stroke="${color}" d="${path.map((point, index) => `${index === 0 ? 'M' : 'L'}${point[0]} ${point[1]}`).join(' ')} z"/>`);
      }
    }
  }
  svg.push('</svg>');
  return svg.join('\n');
};
