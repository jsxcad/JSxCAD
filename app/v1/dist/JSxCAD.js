var LIB =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./JSxCAD.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../algorithm/bsp/build.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/build.js ***!
  \*******************************************************************/
/*! exports provided: build */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"build\", function() { return build; });\n/* harmony import */ var _create__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create */ \"../../algorithm/bsp/create.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _splitPolygon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./splitPolygon */ \"../../algorithm/bsp/splitPolygon.js\");\n\r\n\r\n\r\n\r\n// Build a BSP tree out of `polygons`. When called on an existing tree, the\r\n// new polygons are filtered down to the bottom of the tree and become new\r\n// nodes there. Each set of polygons is partitioned using the first polygon\r\n// (no heuristic is used to pick a good split).\r\nconst build = (bsp, polygons) => {\r\n  if (polygons.length === 0) {\r\n    return;\r\n  }\r\n  if (bsp.plane === undefined) {\r\n    // Use the first polygon to partition the branches.\r\n    bsp.plane = Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(polygons[0]);\r\n  }\r\n  let front = [];\r\n  let back = [];\r\n  for (let i = 0; i < polygons.length; i++) {\r\n    Object(_splitPolygon__WEBPACK_IMPORTED_MODULE_2__[\"splitPolygon\"])(bsp.plane, bsp.polygons, bsp.polygons, front, back, polygons[i]);\r\n  }\r\n  if (front.length > 0) {\r\n    if (bsp.front === undefined) {\r\n      bsp.front = Object(_create__WEBPACK_IMPORTED_MODULE_0__[\"create\"])();\r\n    }\r\n    build(bsp.front, front);\r\n  }\r\n  if (back.length > 0) {\r\n    if (bsp.back === undefined) {\r\n      bsp.back = Object(_create__WEBPACK_IMPORTED_MODULE_0__[\"create\"])();\r\n    }\r\n    build(bsp.back, back);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/build.js?");

/***/ }),

/***/ "../../algorithm/bsp/clipPolygons.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/clipPolygons.js ***!
  \**************************************************************************/
/*! exports provided: clipPolygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clipPolygons\", function() { return clipPolygons; });\n/* harmony import */ var _splitPolygon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./splitPolygon */ \"../../algorithm/bsp/splitPolygon.js\");\n\r\n\r\nconst clipPolygons = (bsp, polygons) => {\r\n  if (polygons.length === 0) {\r\n    // PROVE: Does this happen due to degeneracy?\r\n    return [];\r\n  }\r\n  if (bsp.plane === undefined) {\r\n    // Why do we never reach this point?\r\n    throw Error('die');\r\n    // PROVE: Why this is correct, and why it is decided by bsp.plane?\r\n    //   I guess that this means that it is a new leaf in the tree, and so no clipping should happen.\r\n\r\n    // We need this slice as the bsp trees perform destructive updates.\r\n    // return polygons.slice();\r\n  }\r\n  let front = [];\r\n  let back = [];\r\n  for (let i = 0; i < polygons.length; i++) {\r\n    Object(_splitPolygon__WEBPACK_IMPORTED_MODULE_0__[\"splitPolygon\"])(bsp.plane, front, back, front, back, polygons[i]);\r\n  }\r\n  if (bsp.front !== undefined) {\r\n    front = clipPolygons(bsp.front, front);\r\n  }\r\n  if (bsp.back !== undefined) {\r\n    back = clipPolygons(bsp.back, back);\r\n  } else {\r\n    // PROVE: Explain this asymmetry.\r\n    // These polygons are behind a face, and inside the tree.\r\n    back = [];\r\n  }\r\n  return front.concat(back);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/clipPolygons.js?");

/***/ }),

/***/ "../../algorithm/bsp/clipTo.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/clipTo.js ***!
  \********************************************************************/
/*! exports provided: clipTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clipTo\", function() { return clipTo; });\n/* harmony import */ var _clipPolygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clipPolygons */ \"../../algorithm/bsp/clipPolygons.js\");\n\r\n\r\n// Destructively remove all polygons from a that are in b.\r\nconst clipTo = (a, b) => {\r\n  a.polygons = Object(_clipPolygons__WEBPACK_IMPORTED_MODULE_0__[\"clipPolygons\"])(b, a.polygons);\r\n  if (a.front !== undefined) {\r\n    clipTo(a.front, b);\r\n  }\r\n  if (a.back !== undefined) {\r\n    clipTo(a.back, b);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/clipTo.js?");

/***/ }),

/***/ "../../algorithm/bsp/create.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/create.js ***!
  \********************************************************************/
/*! exports provided: create */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\nconst create = () => ({ polygons: [] });\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/create.js?");

/***/ }),

/***/ "../../algorithm/bsp/difference.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/difference.js ***!
  \************************************************************************/
/*! exports provided: difference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return difference; });\n/* harmony import */ var _build__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build */ \"../../algorithm/bsp/build.js\");\n/* harmony import */ var _clipTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clipTo */ \"../../algorithm/bsp/clipTo.js\");\n/* harmony import */ var _fromPolygons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromPolygons */ \"../../algorithm/bsp/fromPolygons.js\");\n/* harmony import */ var _invert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./invert */ \"../../algorithm/bsp/invert.js\");\n/* harmony import */ var _toPolygons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toPolygons */ \"../../algorithm/bsp/toPolygons.js\");\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst doesNotOverlap = (a, b) => {\r\n  const [centerA, radiusA] = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_5__[\"measureBoundingSphere\"])(a);\r\n  const [centerB, radiusB] = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_5__[\"measureBoundingSphere\"])(b);\r\n  return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_6__[\"distance\"])(centerA, centerB) > radiusA + radiusB;\r\n};\r\n\r\n/**\r\n   * Given a solid and a set of solids to subtract produce the resulting solid.\r\n   * @param {Polygons} base - Polygons for the base to subtract from.\r\n   * @param {Array<Polygons>} subtractions - a list of Polygons to subtract.\r\n   * @returns {Polygons} the resulting Polygons.\r\n   * @example\r\n   * let C = difference(A, B);\r\n   * @example\r\n   * +-------+            +-------+\r\n   * |       |            |       |\r\n   * |   A   |            |       |\r\n   * |    +--+----+   =   |    +--+\r\n   * +----+--+    |       +----+\r\n   *      |   B   |\r\n   *      |       |\r\n   *      +-------+\r\n   */\r\nconst difference = (base, ...subtractions) => {\r\n  // TODO: Figure out why we do not subtract the union of the remainder of\r\n  // the geometries. This approach chains subtractions rather than producing\r\n  // a generational tree.\r\n  for (let i = 0; i < subtractions.length; i++) {\r\n    if (doesNotOverlap(base, subtractions[i])) {\r\n      // Nothing to do.\r\n      continue;\r\n    }\r\n    const baseBsp = Object(_fromPolygons__WEBPACK_IMPORTED_MODULE_2__[\"fromPolygons\"])({}, base);\r\n    const subtractBsp = Object(_fromPolygons__WEBPACK_IMPORTED_MODULE_2__[\"fromPolygons\"])({}, subtractions[i]);\r\n\r\n    Object(_invert__WEBPACK_IMPORTED_MODULE_3__[\"invert\"])(baseBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(baseBsp, subtractBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(subtractBsp, baseBsp);\r\n\r\n    Object(_invert__WEBPACK_IMPORTED_MODULE_3__[\"invert\"])(subtractBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(subtractBsp, baseBsp);\r\n    Object(_invert__WEBPACK_IMPORTED_MODULE_3__[\"invert\"])(subtractBsp);\r\n\r\n    Object(_build__WEBPACK_IMPORTED_MODULE_0__[\"build\"])(baseBsp, Object(_toPolygons__WEBPACK_IMPORTED_MODULE_4__[\"toPolygons\"])({}, subtractBsp));\r\n    Object(_invert__WEBPACK_IMPORTED_MODULE_3__[\"invert\"])(baseBsp);\r\n\r\n    // PROVE: That the round-trip to polygons and back is unnecessary for the intermediate stages.\r\n    base = Object(_toPolygons__WEBPACK_IMPORTED_MODULE_4__[\"toPolygons\"])({}, baseBsp);\r\n  }\r\n  return base;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/difference.js?");

/***/ }),

/***/ "../../algorithm/bsp/fromPolygons.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/fromPolygons.js ***!
  \**************************************************************************/
/*! exports provided: fromPolygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPolygons\", function() { return fromPolygons; });\n/* harmony import */ var _build__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build */ \"../../algorithm/bsp/build.js\");\n/* harmony import */ var _create__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./create */ \"../../algorithm/bsp/create.js\");\n\r\n\r\n\r\nconst fromPolygons = (options = {}, polygons) => {\r\n  const bsp = Object(_create__WEBPACK_IMPORTED_MODULE_1__[\"create\"])();\r\n  // Build is destructive.\r\n  Object(_build__WEBPACK_IMPORTED_MODULE_0__[\"build\"])(bsp, polygons.map(polygon => polygon.slice()));\r\n  return bsp;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/fromPolygons.js?");

/***/ }),

/***/ "../../algorithm/bsp/intersection.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/intersection.js ***!
  \**************************************************************************/
/*! exports provided: intersection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return intersection; });\n/* harmony import */ var _build__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build */ \"../../algorithm/bsp/build.js\");\n/* harmony import */ var _clipTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clipTo */ \"../../algorithm/bsp/clipTo.js\");\n/* harmony import */ var _fromPolygons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromPolygons */ \"../../algorithm/bsp/fromPolygons.js\");\n/* harmony import */ var _invert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./invert */ \"../../algorithm/bsp/invert.js\");\n/* harmony import */ var _toPolygons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toPolygons */ \"../../algorithm/bsp/toPolygons.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Return a solid representing filled volume present in all provided solids.\r\n * A pairwise generational reduction is used.\r\n * @param {Array<Polygons>} solids - list Polygons.\r\n * @returns {Polygons} the resulting solid.\r\n * @example\r\n * let C = intersection(A, B)\r\n * @example\r\n * +--------+\r\n * |        |\r\n * |   A    |\r\n * |    +---+----+       +---+\r\n * |    |   |    |   =   + C +\r\n * +----+---+    |       +---+\r\n *      |    B   |\r\n *      |        |\r\n *      +--------+\r\n */\r\nconst intersection = (...solids) => {\r\n  // Run a queue so that intersections are generally against intersections of the same generation.\r\n  while (solids.length > 1) {\r\n    const aSolid = solids.shift();\r\n    const bSolid = solids.shift();\r\n\r\n    const aBsp = Object(_fromPolygons__WEBPACK_IMPORTED_MODULE_2__[\"fromPolygons\"])({}, aSolid);\r\n    const bBsp = Object(_fromPolygons__WEBPACK_IMPORTED_MODULE_2__[\"fromPolygons\"])({}, bSolid);\r\n\r\n    Object(_invert__WEBPACK_IMPORTED_MODULE_3__[\"invert\"])(aBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(bBsp, aBsp);\r\n\r\n    Object(_invert__WEBPACK_IMPORTED_MODULE_3__[\"invert\"])(bBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(aBsp, bBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(bBsp, aBsp);\r\n    Object(_build__WEBPACK_IMPORTED_MODULE_0__[\"build\"])(aBsp, Object(_toPolygons__WEBPACK_IMPORTED_MODULE_4__[\"toPolygons\"])({}, bBsp));\r\n\r\n    Object(_invert__WEBPACK_IMPORTED_MODULE_3__[\"invert\"])(aBsp);\r\n\r\n    // Push back for the next generation.\r\n    solids.push(Object(_toPolygons__WEBPACK_IMPORTED_MODULE_4__[\"toPolygons\"])({}, aBsp));\r\n  }\r\n  return solids[0];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/intersection.js?");

/***/ }),

/***/ "../../algorithm/bsp/invert.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/invert.js ***!
  \********************************************************************/
/*! exports provided: invert */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\n\r\nconst invert = (bsp) => {\r\n  // Flip the polygons.\r\n  bsp.polygons = bsp.polygons.map(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"flip\"]);\r\n  // Recompute the plane.\r\n  if (bsp.plane !== undefined) {\r\n    // PROVE: General equivalence.\r\n    // const a = toPlane(bsp.polygons[0]);\r\n    // const b = plane.flip(bsp.plane);\r\n    // if (!plane.equals(a, b)) { throw Error(`die: ${JSON.stringify([a, b])}`); }\r\n    bsp.plane = Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__[\"flip\"])(bsp.plane);\r\n  }\r\n  // Invert the children.\r\n  if (bsp.front !== undefined) {\r\n    invert(bsp.front);\r\n  }\r\n  if (bsp.back !== undefined) {\r\n    invert(bsp.back);\r\n  }\r\n  // Swap the children.\r\n  [bsp.front, bsp.back] = [bsp.back, bsp.front];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/invert.js?");

/***/ }),

/***/ "../../algorithm/bsp/main.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/main.js ***!
  \******************************************************************/
/*! exports provided: build, clipPolygons, clipTo, create, difference, fromPolygons, intersection, invert, splitPolygon, toPolygons, union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _build__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build */ \"../../algorithm/bsp/build.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"build\", function() { return _build__WEBPACK_IMPORTED_MODULE_0__[\"build\"]; });\n\n/* harmony import */ var _clipPolygons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clipPolygons */ \"../../algorithm/bsp/clipPolygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"clipPolygons\", function() { return _clipPolygons__WEBPACK_IMPORTED_MODULE_1__[\"clipPolygons\"]; });\n\n/* harmony import */ var _clipTo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./clipTo */ \"../../algorithm/bsp/clipTo.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"clipTo\", function() { return _clipTo__WEBPACK_IMPORTED_MODULE_2__[\"clipTo\"]; });\n\n/* harmony import */ var _create__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./create */ \"../../algorithm/bsp/create.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return _create__WEBPACK_IMPORTED_MODULE_3__[\"create\"]; });\n\n/* harmony import */ var _difference__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./difference */ \"../../algorithm/bsp/difference.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return _difference__WEBPACK_IMPORTED_MODULE_4__[\"difference\"]; });\n\n/* harmony import */ var _fromPolygons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fromPolygons */ \"../../algorithm/bsp/fromPolygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPolygons\", function() { return _fromPolygons__WEBPACK_IMPORTED_MODULE_5__[\"fromPolygons\"]; });\n\n/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./intersection */ \"../../algorithm/bsp/intersection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return _intersection__WEBPACK_IMPORTED_MODULE_6__[\"intersection\"]; });\n\n/* harmony import */ var _invert__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./invert */ \"../../algorithm/bsp/invert.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return _invert__WEBPACK_IMPORTED_MODULE_7__[\"invert\"]; });\n\n/* harmony import */ var _splitPolygon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./splitPolygon */ \"../../algorithm/bsp/splitPolygon.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"splitPolygon\", function() { return _splitPolygon__WEBPACK_IMPORTED_MODULE_8__[\"splitPolygon\"]; });\n\n/* harmony import */ var _toPolygons__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./toPolygons */ \"../../algorithm/bsp/toPolygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPolygons\", function() { return _toPolygons__WEBPACK_IMPORTED_MODULE_9__[\"toPolygons\"]; });\n\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./union */ \"../../algorithm/bsp/union.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return _union__WEBPACK_IMPORTED_MODULE_10__[\"union\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/main.js?");

/***/ }),

/***/ "../../algorithm/bsp/splitPolygon.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/splitPolygon.js ***!
  \**************************************************************************/
/*! exports provided: splitPolygon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"splitPolygon\", function() { return splitPolygon; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\n\r\nconst EPSILON = 1e-5;\r\nconst EPSILON_SQUARED = Math.pow(EPSILON, 2);\r\n\r\nconst COPLANAR = 0; // Neither front nor back.\r\nconst FRONT = 1;\r\nconst BACK = 2;\r\nconst SPANNING = 3; // Both front and back.\r\n\r\nconst W = 3;\r\n\r\nconst toType = (plane, point) => {\r\n  let t = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, point) - plane[W];\r\n  if (t < -EPSILON) {\r\n    return BACK;\r\n  } else if (t > EPSILON) {\r\n    return FRONT;\r\n  } else {\r\n    return COPLANAR;\r\n  }\r\n};\r\n\r\nconst splitPolygon = (plane, coplanarFront, coplanarBack, front, back, polygon) => {\r\n  // Classify each point as well as the entire polygon into one of the above\r\n  // four classes.\r\n  let polygonType = 0;\r\n  for (const point of polygon) {\r\n    polygonType |= toType(plane, point);\r\n  }\r\n\r\n  // Put the polygon in the correct list, splitting it when necessary.\r\n  switch (polygonType) {\r\n    case COPLANAR: {\r\n      if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(polygon)) > 0) {\r\n        coplanarFront.push(polygon);\r\n      } else {\r\n        coplanarBack.push(polygon);\r\n      }\r\n      break;\r\n    }\r\n    case FRONT: {\r\n      front.push(polygon);\r\n      break;\r\n    }\r\n    case BACK: {\r\n      back.push(polygon);\r\n      break;\r\n    }\r\n    case SPANNING: {\r\n      let frontPoints = [];\r\n      let backPoints = [];\r\n      let startPoint = polygon[polygon.length - 1];\r\n      let startType = toType(plane, startPoint);\r\n      for (const endPoint of polygon) {\r\n        const endType = toType(plane, endPoint);\r\n        if (startType !== BACK) {\r\n          // The inequality is important as it includes COPLANAR points.\r\n          frontPoints.push(startPoint);\r\n        }\r\n        if (startType !== FRONT) {\r\n          // The inequality is important as it includes COPLANAR points.\r\n          backPoints.push(startPoint);\r\n        }\r\n        if ((startType | endType) === SPANNING) {\r\n          // This should exclude COPLANAR points.\r\n          // Compute the point that touches the splitting plane.\r\n          let t = (plane[W] - Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, startPoint)) / Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(endPoint, startPoint));\r\n          // Canonicalization of the point would violate coplanarity in some cases.\r\n          // We could work around this by triangulation, but that doubles the load.\r\n          // So we defer canonicalization, and deal with degenerate triangles upon later canonicalization.\r\n          const spanPoint = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"lerp\"])(t, startPoint, endPoint);\r\n          if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"squaredDistance\"])(spanPoint, startPoint) >= EPSILON_SQUARED &&\r\n              Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"squaredDistance\"])(spanPoint, endPoint) >= EPSILON_SQUARED) {\r\n            // Minimize the production of degenerate polygons.\r\n            frontPoints.push(spanPoint);\r\n            backPoints.push(spanPoint);\r\n          }\r\n        }\r\n        startPoint = endPoint;\r\n        startType = endType;\r\n      }\r\n      if (frontPoints.length >= 3) {\r\n      // Add the polygon that sticks out the front of the plane.\r\n        front.push(frontPoints);\r\n      } else {\r\n        throw Error('die');\r\n      }\r\n      if (backPoints.length >= 3) {\r\n      // Add the polygon that sticks out the back of the plane.\r\n        back.push(backPoints);\r\n      } else {\r\n        throw Error('die');\r\n      }\r\n      break;\r\n    }\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/splitPolygon.js?");

/***/ }),

/***/ "../../algorithm/bsp/toPolygons.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/toPolygons.js ***!
  \************************************************************************/
/*! exports provided: toPolygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPolygons\", function() { return toPolygons; });\nconst toPolygons = (options = {}, bsp) => {\r\n  // PROVE: That we need this slice.\r\n  var polygons = bsp.polygons.slice();\r\n  if (bsp.front !== undefined) {\r\n    polygons = polygons.concat(toPolygons(options, bsp.front));\r\n  }\r\n  if (bsp.back !== undefined) {\r\n    polygons = polygons.concat(toPolygons(options, bsp.back));\r\n  }\r\n  return polygons;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/toPolygons.js?");

/***/ }),

/***/ "../../algorithm/bsp/union.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/union.js ***!
  \*******************************************************************/
/*! exports provided: union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return union; });\n/* harmony import */ var _build__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build */ \"../../algorithm/bsp/build.js\");\n/* harmony import */ var _clipTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clipTo */ \"../../algorithm/bsp/clipTo.js\");\n/* harmony import */ var _fromPolygons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromPolygons */ \"../../algorithm/bsp/fromPolygons.js\");\n/* harmony import */ var _invert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./invert */ \"../../algorithm/bsp/invert.js\");\n/* harmony import */ var _toPolygons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toPolygons */ \"../../algorithm/bsp/toPolygons.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst union = (...solids) => {\r\n  while (solids.length > 1) {\r\n    const aSolid = solids.shift();\r\n    const bSolid = solids.shift();\r\n\r\n    const aBsp = Object(_fromPolygons__WEBPACK_IMPORTED_MODULE_2__[\"fromPolygons\"])({}, aSolid);\r\n    const bBsp = Object(_fromPolygons__WEBPACK_IMPORTED_MODULE_2__[\"fromPolygons\"])({}, bSolid);\r\n\r\n    // Remove the bits of a that are in b.\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(aBsp, bBsp);\r\n\r\n    // Remove the bits of b that are in a.\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(bBsp, aBsp);\r\n\r\n    // Turn b inside out and remove the bits that are in a.\r\n    // PROVE: I assume this is to simplify the internal structure of b.\r\n    Object(_invert__WEBPACK_IMPORTED_MODULE_3__[\"invert\"])(bBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(bBsp, aBsp);\r\n    Object(_invert__WEBPACK_IMPORTED_MODULE_3__[\"invert\"])(bBsp);\r\n\r\n    // Now merge the two together.\r\n    Object(_build__WEBPACK_IMPORTED_MODULE_0__[\"build\"])(aBsp, Object(_toPolygons__WEBPACK_IMPORTED_MODULE_4__[\"toPolygons\"])({}, bBsp));\r\n\r\n    // And build a geometry from the result.\r\n    solids.push(Object(_toPolygons__WEBPACK_IMPORTED_MODULE_4__[\"toPolygons\"])({}, aBsp));\r\n  }\r\n  return solids[0];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp/union.js?");

/***/ }),

/***/ "../../algorithm/color/hslToRgb.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/color/hslToRgb.js ***!
  \************************************************************************/
/*! exports provided: hslToRgb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hslToRgb\", function() { return hslToRgb; });\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 1].\r\n *\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  l       The lightness\r\n * @return  Array           The RGB representation\r\n */\r\nconst hslToRgb = ([hue, saturation, lightness]) => {\r\n  if (saturation === 0) {\r\n    // Achromatic\r\n    return [lightness, lightness, lightness];\r\n  } else {\r\n    // Chromatic\r\n    let q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;\r\n    let p = 2 * lightness - q;\r\n    return [hue2rgb(p, q, hue + 1 / 3),\r\n            hue2rgb(p, q, hue),\r\n            hue2rgb(p, q, hue - 1 / 3)];\r\n  }\r\n};\r\n\r\n// FIX: Make readable.\r\nfunction hue2rgb (p, q, t) {\r\n  if (t < 0) t += 1;\r\n  if (t > 1) t -= 1;\r\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n  if (t < 1 / 2) return q;\r\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n  return p;\r\n}\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/color/hslToRgb.js?");

/***/ }),

/***/ "../../algorithm/color/main.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/color/main.js ***!
  \********************************************************************/
/*! exports provided: hslToRgb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _hslToRgb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hslToRgb */ \"../../algorithm/color/hslToRgb.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"hslToRgb\", function() { return _hslToRgb__WEBPACK_IMPORTED_MODULE_0__[\"hslToRgb\"]; });\n\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/color/main.js?");

/***/ }),

/***/ "../../algorithm/path/canonicalize.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/canonicalize.js ***!
  \***************************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\nconst canonicalizePoint = (point, index) => {\r\n  if (point === null) {\r\n    if (index !== 0) throw Error('Path has null not at head');\r\n    return point;\r\n  } else {\r\n    return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(point);\r\n  }\r\n};\r\n\r\nconst canonicalize = (path) => path.map(canonicalizePoint);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/canonicalize.js?");

/***/ }),

/***/ "../../algorithm/path/close.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/close.js ***!
  \********************************************************************/
/*! exports provided: close */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"close\", function() { return close; });\n/* harmony import */ var _isClosed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isClosed */ \"../../algorithm/path/isClosed.js\");\n\r\n\r\nconst close = (path) => Object(_isClosed__WEBPACK_IMPORTED_MODULE_0__[\"isClosed\"])(path) ? path : path.slice(1);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/close.js?");

/***/ }),

/***/ "../../algorithm/path/concatenate.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/concatenate.js ***!
  \**************************************************************************/
/*! exports provided: concatenate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"concatenate\", function() { return concatenate; });\n/* harmony import */ var _isClosed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isClosed */ \"../../algorithm/path/isClosed.js\");\n\r\n\r\nconst concatenate = (...paths) => {\r\n  if (!paths.every(path => !Object(_isClosed__WEBPACK_IMPORTED_MODULE_0__[\"isClosed\"])(path))) {\r\n    throw Error('Cannot concatenate closed paths.');\r\n  }\r\n  return [null, ...[].concat(...paths.map(path => path.slice(1)))];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/concatenate.js?");

/***/ }),

/***/ "../../algorithm/path/flip.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/flip.js ***!
  \*******************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\nconst flip = (path) => {\r\n  if (path[0] === null) {\r\n    return [null, ...path.slice(1).reverse()];\r\n  } else {\r\n    return path.slice().reverse();\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/flip.js?");

/***/ }),

/***/ "../../algorithm/path/isClosed.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/isClosed.js ***!
  \***********************************************************************/
/*! exports provided: isClosed */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isClosed\", function() { return isClosed; });\nconst isClosed = (path) => (path.length === 0) || (path[0] !== null);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/isClosed.js?");

/***/ }),

/***/ "../../algorithm/path/main.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/main.js ***!
  \*******************************************************************/
/*! exports provided: canonicalize, close, concatenate, flip, isClosed, measureArea, toGeneric, toPolygon, toZ0Polygon, transform, translate, scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canonicalize */ \"../../algorithm/path/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]; });\n\n/* harmony import */ var _close__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./close */ \"../../algorithm/path/close.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"close\", function() { return _close__WEBPACK_IMPORTED_MODULE_1__[\"close\"]; });\n\n/* harmony import */ var _concatenate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./concatenate */ \"../../algorithm/path/concatenate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"concatenate\", function() { return _concatenate__WEBPACK_IMPORTED_MODULE_2__[\"concatenate\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./flip */ \"../../algorithm/path/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_3__[\"flip\"]; });\n\n/* harmony import */ var _isClosed__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isClosed */ \"../../algorithm/path/isClosed.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isClosed\", function() { return _isClosed__WEBPACK_IMPORTED_MODULE_4__[\"isClosed\"]; });\n\n/* harmony import */ var _measureArea__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./measureArea */ \"../../algorithm/path/measureArea.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureArea\", function() { return _measureArea__WEBPACK_IMPORTED_MODULE_5__[\"measureArea\"]; });\n\n/* harmony import */ var _toGeneric__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./toGeneric */ \"../../algorithm/path/toGeneric.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return _toGeneric__WEBPACK_IMPORTED_MODULE_6__[\"toGeneric\"]; });\n\n/* harmony import */ var _toPolygon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./toPolygon */ \"../../algorithm/path/toPolygon.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPolygon\", function() { return _toPolygon__WEBPACK_IMPORTED_MODULE_7__[\"toPolygon\"]; });\n\n/* harmony import */ var _toZ0Polygon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./toZ0Polygon */ \"../../algorithm/path/toZ0Polygon.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toZ0Polygon\", function() { return _toZ0Polygon__WEBPACK_IMPORTED_MODULE_8__[\"toZ0Polygon\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transform */ \"../../algorithm/path/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_9__[\"transform\"]; });\n\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst translate = (vector, path) => Object(_transform__WEBPACK_IMPORTED_MODULE_9__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_10__[\"fromTranslation\"])(vector), path);\r\nconst scale = (vector, path) => Object(_transform__WEBPACK_IMPORTED_MODULE_9__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_10__[\"fromScaling\"])(vector), path);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/main.js?");

/***/ }),

/***/ "../../algorithm/path/measureArea.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/measureArea.js ***!
  \**************************************************************************/
/*! exports provided: measureArea */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureArea\", function() { return measureArea; });\nconst X = 0;\r\nconst Y = 1;\r\n\r\n/**\r\n * Measure the area of a path as though it were a polygon.\r\n * A negative area indicates a clockwise path, and a positive area indicates a counter-clock-wise path.\r\n * See: http://mathworld.wolfram.com/PolygonArea.html\r\n * @returns {Number} The area the path would have if it were a polygon.\r\n */\r\nconst measureArea = (path) => {\r\n  let last = path.length - 1;\r\n  let current = (path[0] === null) ? 1 : 0;\r\n  let twiceArea = 0;\r\n  for (; current < path.length; last = current++) {\r\n    twiceArea += path[last][X] * path[current][Y] - path[last][Y] * path[current][X];\r\n  }\r\n  return twiceArea / 2;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/measureArea.js?");

/***/ }),

/***/ "../../algorithm/path/toGeneric.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toGeneric.js ***!
  \************************************************************************/
/*! exports provided: toGeneric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return toGeneric; });\nconst toGeneric = (path) => [...path];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toGeneric.js?");

/***/ }),

/***/ "../../algorithm/path/toPolygon.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toPolygon.js ***!
  \************************************************************************/
/*! exports provided: toPolygon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPolygon\", function() { return toPolygon; });\nconst toPolygon = (path) => {\r\n  if (path.isPolygon !== true) {\r\n    if (path.length < 3) throw Error('Path would form degenerate polygon.');\r\n    if (path[0] === null) throw Error('Only closed paths can be polygons.');\r\n    // FIX: Check for coplanarity.\r\n    path.isPolygon = true;\r\n  }\r\n  return path;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toPolygon.js?");

/***/ }),

/***/ "../../algorithm/path/toZ0Polygon.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toZ0Polygon.js ***!
  \**************************************************************************/
/*! exports provided: toZ0Polygon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toZ0Polygon\", function() { return toZ0Polygon; });\nconst isZ0Point = ([x = 0, y = 0, z = 0]) => (z === 0);\r\n\r\nconst toZ0Polygon = (path) => {\r\n  if (path.isZ0Polygon !== true) {\r\n    if (path.length < 3) throw Error('Path would form degenerate polygon.');\r\n    if (path[0] === null) throw Error('Only closed paths can be polygons.');\r\n    if (!path.every(isZ0Point)) throw Error(`z != 0: ${JSON.stringify(path.filter(path => !isZ0Point(path)))}`);\r\n    path.isZ0Polygon = true;\r\n  }\r\n  return path;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toZ0Polygon.js?");

/***/ }),

/***/ "../../algorithm/path/transform.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/transform.js ***!
  \************************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\nconst transform = (matrix, path) =>\r\n  path.map((point, index) => (point === null) ? null : Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, point));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/transform.js?");

/***/ }),

/***/ "../../algorithm/paths/butLast.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/butLast.js ***!
  \***********************************************************************/
/*! exports provided: butLast */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"butLast\", function() { return butLast; });\nconst butLast = (paths) => paths.slice(0, paths.length - 1);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/butLast.js?");

/***/ }),

/***/ "../../algorithm/paths/canonicalize.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/canonicalize.js ***!
  \****************************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\nconst canonicalize = (paths) => {\r\n  let canonicalized = paths.map(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]);\r\n  if (paths.properties !== undefined) {\r\n    // Transfer properties.\r\n    canonicalized.properties = paths.properties;\r\n  }\r\n  return canonicalized;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/canonicalize.js?");

/***/ }),

/***/ "../../algorithm/paths/difference.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/difference.js ***!
  \**************************************************************************/
/*! exports provided: difference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return difference; });\nconst difference = (pathset, ...pathsets) => { throw Error('Not implemented'); };\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/difference.js?");

/***/ }),

/***/ "../../algorithm/paths/eachPoint.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/eachPoint.js ***!
  \*************************************************************************/
/*! exports provided: eachPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return eachPoint; });\nconst eachPoint = (options = {}, thunk, paths) => {\r\n  for (const path of paths) {\r\n    for (const point of path) {\r\n      if (point !== null) {\r\n        thunk(point);\r\n      }\r\n    }\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/eachPoint.js?");

/***/ }),

/***/ "../../algorithm/paths/flip.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/flip.js ***!
  \********************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\nconst flip = (paths) => paths.map(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"flip\"]);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/flip.js?");

/***/ }),

/***/ "../../algorithm/paths/intersection.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/intersection.js ***!
  \****************************************************************************/
/*! exports provided: intersection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return intersection; });\nconst intersection = (...pathsets) => { throw Error('Not implemented'); };\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/intersection.js?");

/***/ }),

/***/ "../../algorithm/paths/last.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/last.js ***!
  \********************************************************************/
/*! exports provided: last */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"last\", function() { return last; });\nconst last = (paths) => paths.length >= 1 ? paths[paths.length - 1] : [null];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/last.js?");

/***/ }),

/***/ "../../algorithm/paths/main.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/main.js ***!
  \********************************************************************/
/*! exports provided: butLast, canonicalize, difference, eachPoint, flip, intersection, last, measureBoundingBox, toGeneric, toPoints, toPolygons, toZ0Polygons, transform, union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _butLast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./butLast */ \"../../algorithm/paths/butLast.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"butLast\", function() { return _butLast__WEBPACK_IMPORTED_MODULE_0__[\"butLast\"]; });\n\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canonicalize */ \"../../algorithm/paths/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_1__[\"canonicalize\"]; });\n\n/* harmony import */ var _difference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./difference */ \"../../algorithm/paths/difference.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return _difference__WEBPACK_IMPORTED_MODULE_2__[\"difference\"]; });\n\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/paths/eachPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return _eachPoint__WEBPACK_IMPORTED_MODULE_3__[\"eachPoint\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flip */ \"../../algorithm/paths/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_4__[\"flip\"]; });\n\n/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./intersection */ \"../../algorithm/paths/intersection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return _intersection__WEBPACK_IMPORTED_MODULE_5__[\"intersection\"]; });\n\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../algorithm/paths/measureBoundingBox.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return _measureBoundingBox__WEBPACK_IMPORTED_MODULE_6__[\"measureBoundingBox\"]; });\n\n/* harmony import */ var _last__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./last */ \"../../algorithm/paths/last.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"last\", function() { return _last__WEBPACK_IMPORTED_MODULE_7__[\"last\"]; });\n\n/* harmony import */ var _toGeneric__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./toGeneric */ \"../../algorithm/paths/toGeneric.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return _toGeneric__WEBPACK_IMPORTED_MODULE_8__[\"toGeneric\"]; });\n\n/* harmony import */ var _toPoints__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./toPoints */ \"../../algorithm/paths/toPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return _toPoints__WEBPACK_IMPORTED_MODULE_9__[\"toPoints\"]; });\n\n/* harmony import */ var _toPolygons__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./toPolygons */ \"../../algorithm/paths/toPolygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPolygons\", function() { return _toPolygons__WEBPACK_IMPORTED_MODULE_10__[\"toPolygons\"]; });\n\n/* harmony import */ var _toZ0Polygons__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toZ0Polygons */ \"../../algorithm/paths/toZ0Polygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toZ0Polygons\", function() { return _toZ0Polygons__WEBPACK_IMPORTED_MODULE_11__[\"toZ0Polygons\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./transform */ \"../../algorithm/paths/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_12__[\"transform\"]; });\n\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./union */ \"../../algorithm/paths/union.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return _union__WEBPACK_IMPORTED_MODULE_13__[\"union\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/main.js?");

/***/ }),

/***/ "../../algorithm/paths/map.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/map.js ***!
  \*******************************************************************/
/*! exports provided: map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map; });\n/**\r\n * Transforms each path of Paths.\r\n *\r\n * @param {Paths} original - the Paths to transform.\r\n * @param {Function} [transform=identity] - function used to transform the paths.\r\n * @returns {Paths} the transformed paths.\r\n */\r\nconst map = (original, transform) => {\r\n  if (original === undefined) {\r\n    original = [];\r\n  }\r\n  if (transform === undefined) {\r\n    transform = _ => _;\r\n  }\r\n  // FIX: Consider optimizing this to return the original if all transforms are identity transforms.\r\n  return original.map(path => transform(path));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/map.js?");

/***/ }),

/***/ "../../algorithm/paths/measureBoundingBox.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/measureBoundingBox.js ***!
  \**********************************************************************************/
/*! exports provided: measureBoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return measureBoundingBox; });\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/paths/eachPoint.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n// returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)\r\nconst measureBoundingBox = (paths) => {\r\n  let minPoint;\r\n  let maxPoint;\r\n  Object(_eachPoint__WEBPACK_IMPORTED_MODULE_0__[\"eachPoint\"])({},\r\n            point => {\r\n              minPoint = (minPoint === undefined) ? Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"fromPoint\"])(point) : Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"min\"])(minPoint, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"fromPoint\"])(point));\r\n              maxPoint = (maxPoint === undefined) ? Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"fromPoint\"])(point) : Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"max\"])(maxPoint, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"fromPoint\"])(point));\r\n            },\r\n            paths);\r\n  return [minPoint, maxPoint];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/measureBoundingBox.js?");

/***/ }),

/***/ "../../algorithm/paths/toGeneric.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toGeneric.js ***!
  \*************************************************************************/
/*! exports provided: toGeneric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return toGeneric; });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ \"../../algorithm/paths/map.js\");\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\n\r\nconst toGeneric = (paths) => Object(_map__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(paths, _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__[\"toGeneric\"]);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toGeneric.js?");

/***/ }),

/***/ "../../algorithm/paths/toPoints.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toPoints.js ***!
  \************************************************************************/
/*! exports provided: toPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return toPoints; });\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/paths/eachPoint.js\");\n\r\n\r\nconst toPoints = (options = {}, paths) => {\r\n  const points = [];\r\n  Object(_eachPoint__WEBPACK_IMPORTED_MODULE_0__[\"eachPoint\"])(options, point => points.push(point), paths);\r\n  return points;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toPoints.js?");

/***/ }),

/***/ "../../algorithm/paths/toPolygons.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toPolygons.js ***!
  \**************************************************************************/
/*! exports provided: toPolygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPolygons\", function() { return toPolygons; });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ \"../../algorithm/paths/map.js\");\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\n\r\nconst toPolygons = (paths) => {\r\n  if (paths.isPolygons !== true) {\r\n    paths = Object(_map__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(paths, _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__[\"toPolygon\"]);\r\n    paths.isPolygons = true;\r\n  }\r\n  return paths;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toPolygons.js?");

/***/ }),

/***/ "../../algorithm/paths/toZ0Polygons.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toZ0Polygons.js ***!
  \****************************************************************************/
/*! exports provided: toZ0Polygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toZ0Polygons\", function() { return toZ0Polygons; });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ \"../../algorithm/paths/map.js\");\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\n\r\nconst toZ0Polygons = (paths) => {\r\n  if (paths.isZ0Polygons !== true) {\r\n    paths = Object(_map__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(paths, _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__[\"toZ0Polygon\"]);\r\n    paths.isZ0Polygons = true;\r\n  }\r\n  return paths;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toZ0Polygons.js?");

/***/ }),

/***/ "../../algorithm/paths/transform.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/transform.js ***!
  \*************************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\nconst transform = (matrix, paths) => paths.map(path => Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, path));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/transform.js?");

/***/ }),

/***/ "../../algorithm/paths/union.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/union.js ***!
  \*********************************************************************/
/*! exports provided: union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return union; });\n// FIX: Deduplication.\r\n\r\nconst union = (...pathsets) => [].concat(...pathsets);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/union.js?");

/***/ }),

/***/ "../../algorithm/pdf/main.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/pdf/main.js ***!
  \******************************************************************/
/*! exports provided: pathsToPdf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pathsToPdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pathsToPdf */ \"../../algorithm/pdf/pathsToPdf.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"pathsToPdf\", function() { return _pathsToPdf__WEBPACK_IMPORTED_MODULE_0__[\"pathsToPdf\"]; });\n\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/pdf/main.js?");

/***/ }),

/***/ "../../algorithm/pdf/pathsToPdf.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/pdf/pathsToPdf.js ***!
  \************************************************************************/
/*! exports provided: pathsToPdf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pathsToPdf\", function() { return pathsToPdf; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n\r\n\r\n\r\nconst X = 0;\r\nconst Y = 1;\r\n\r\n// Not entirely sure how conformant this is, but it seems to work for simple\r\n// cases.\r\n\r\n// Width are height are in post-script points.\r\nconst header = ({ width = 595, height = 841, lineWidth = 0.096 }) =>\r\n  [`%PDF-1.5`,\r\n   `1 0 obj << /Pages 2 0 R /Type /Catalog >> endobj`,\r\n   `2 0 obj << /Count 1 /Kids [ 3 0 R ] /Type /Pages >> endobj`,\r\n   `3 0 obj <<`,\r\n   `  /Contents 4 0 R`,\r\n   `  /MediaBox [ 0 0 ${width.toFixed(9)} ${height.toFixed(9)} ]`,\r\n   `  /Parent 2 0 R`,\r\n   `  /Type /Page`,\r\n   `>>`,\r\n   `endobj`,\r\n   `4 0 obj << >>`,\r\n   `stream`,\r\n   `${lineWidth.toFixed(9)} w`];\r\n\r\nconst footer =\r\n   [`endstream`,\r\n    `endobj`,\r\n    `trailer << /Root 1 0 R /Size 4 >>`,\r\n    `%%EOF`];\r\n\r\nconst pathsToPdf = ({ orientation = 'portrait', unit = 'mm', lineWidth = 0.096, size = [210, 297] }, paths) => {\r\n  // This is the size of a post-script point in mm.\r\n  const pointSize = 0.352777778;\r\n  const scale = 1 / pointSize;\r\n  const [width, height] = size;\r\n  const lines = [];\r\n  const [min, max] = Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"measureBoundingBox\"])(paths);\r\n  // Currently the origin is at the bottom left.\r\n  // Subtract the x min, and the y max, then add the page height to bring\r\n  // it up to the top left. This positions the origin nicely for laser\r\n  // cutting and printing.\r\n  const offset = [-min[X] * scale, (height - max[Y]) * scale, 0];\r\n  const matrix = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromTranslation\"])(offset),\r\n                          Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromScaling\"])([scale, scale, scale]));\r\n  for (const path of Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"transform\"])(matrix, paths)) {\r\n    let nth = (path[0] === null) ? 1 : 0;\r\n    const [x1, y1] = path[nth];\r\n    lines.push(`${x1.toFixed(9)} ${y1.toFixed(9)} m`); // move-to.\r\n    for (nth++; nth < path.length; nth++) {\r\n      const [x2, y2] = path[nth];\r\n      lines.push(`${x2.toFixed(9)} ${y2.toFixed(9)} l`); // line-to.\r\n    }\r\n    if (path[0] !== null) {\r\n      // A leading null indicates an open path.\r\n      lines.push(`h`); // close path.\r\n    }\r\n    lines.push(`S`); // stroke.\r\n  }\r\n\r\n  return [].concat(header({ width: width * scale, height: height * scale, lineWidth: lineWidth }),\r\n                   lines,\r\n                   footer).join('\\n');\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/pdf/pathsToPdf.js?");

/***/ }),

/***/ "../../algorithm/polygons/blessAsConvex.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/blessAsConvex.js ***!
  \********************************************************************************/
/*! exports provided: blessAsConvex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"blessAsConvex\", function() { return blessAsConvex; });\nconst blessAsConvex = (paths) => { paths.isConvex = true; return paths; };\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/blessAsConvex.js?");

/***/ }),

/***/ "../../algorithm/polygons/blessAsTriangles.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/blessAsTriangles.js ***!
  \***********************************************************************************/
/*! exports provided: blessAsTriangles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"blessAsTriangles\", function() { return blessAsTriangles; });\nconst blessAsTriangles = (paths) => { paths.isTriangles = true; return paths; };\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/blessAsTriangles.js?");

/***/ }),

/***/ "../../algorithm/polygons/canonicalize.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/canonicalize.js ***!
  \*******************************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\nconst isDegenerate = (polygon) => {\r\n  for (let nth = 0; nth < polygon.length; nth++) {\r\n    if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"equals\"])(polygon[nth], polygon[(nth + 1) % polygon.length])) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst canonicalize = (polygons) => {\r\n  const canonicalized = [];\r\n  for (let polygon of polygons) {\r\n    polygon = Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(polygon);\r\n    if (!isDegenerate(polygon)) {\r\n      canonicalized.push(polygon);\r\n    }\r\n  }\r\n  return canonicalized;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/canonicalize.js?");

/***/ }),

/***/ "../../algorithm/polygons/cutTrianglesByPlane.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/cutTrianglesByPlane.js ***!
  \**************************************************************************************/
/*! exports provided: cutTrianglesByPlane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cutTrianglesByPlane\", function() { return cutTrianglesByPlane; });\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canonicalize */ \"../../algorithm/polygons/canonicalize.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _edgesToPolygons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./edgesToPolygons */ \"../../algorithm/polygons/edgesToPolygons.js\");\n\r\n\r\n\r\n\r\nconst EPSILON = 1e-5;\r\n\r\nconst COPLANAR = 0; // Neither front nor back.\r\nconst FRONT = 1;\r\nconst BACK = 2;\r\nconst SPANNING = 3; // Both front and back.\r\n\r\nconst W = 3;\r\nconst toType = (plane, point) => {\r\n  let t = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"dot\"])(plane, point) - plane[W];\r\n  if (t < -EPSILON) {\r\n    return BACK;\r\n  } else if (t > EPSILON) {\r\n    return FRONT;\r\n  } else {\r\n    return COPLANAR;\r\n  }\r\n};\r\n\r\nconst cutTrianglesByPlane = (plane, triangles) => {\r\n  const edges = [];\r\n  for (const triangle of triangles) {\r\n    // Classify each point as well as the entire triangle into one of the above\r\n    // four classes.\r\n    let triangleType = 0;\r\n    for (const point of triangle) {\r\n      triangleType |= toType(plane, point);\r\n    }\r\n\r\n    switch (triangleType) {\r\n      case COPLANAR: {\r\n        // We could optimize this, but let's handle the general edge graph first.\r\n        edges.push([triangle[0], triangle[1]],\r\n                   [triangle[1], triangle[2]],\r\n                   [triangle[2], triangle[0]]);\r\n        break;\r\n      }\r\n      case FRONT: {\r\n        break;\r\n      }\r\n      case BACK: {\r\n        break;\r\n      }\r\n      case SPANNING: {\r\n        let startPoint = triangle[triangle.length - 1];\r\n        let startType = toType(plane, startPoint);\r\n        let spanStart = null;\r\n        for (const endPoint of triangle) {\r\n          const endType = toType(plane, endPoint);\r\n          if (startType === COPLANAR && endType === COPLANAR) {\r\n            edges.push([startPoint, endPoint]);\r\n          } else if ((startType | endType) === SPANNING) {\r\n            let t = (plane[W] - Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"dot\"])(plane, startPoint)) / Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"dot\"])(plane, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(endPoint, startPoint));\r\n            if (spanStart !== null) {\r\n              const spanPoint = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"lerp\"])(t, startPoint, endPoint);\r\n              if (endType === BACK) {\r\n                // The span started on the other side, reverse the edge.\r\n                edges.push([spanPoint, spanStart]);\r\n              } else {\r\n                edges.push([spanStart, spanPoint]);\r\n              }\r\n              spanStart = null;\r\n            } else {\r\n              spanStart = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"lerp\"])(t, startPoint, endPoint);\r\n            }\r\n          }\r\n          startPoint = endPoint;\r\n          startType = endType;\r\n        }\r\n        if (spanStart !== null) {\r\n          throw Error('die');\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return Object(_edgesToPolygons__WEBPACK_IMPORTED_MODULE_2__[\"edgesToPolygons\"])({}, Object(_canonicalize__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(edges));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/cutTrianglesByPlane.js?");

/***/ }),

/***/ "../../algorithm/polygons/eachPoint.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/eachPoint.js ***!
  \****************************************************************************/
/*! exports provided: eachPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return eachPoint; });\nconst eachPoint = (options = {}, thunk, polygons) => {\r\n  const points = [];\r\n  for (const polygon of polygons) {\r\n    for (const point of polygon) {\r\n      thunk(point);\r\n    }\r\n  }\r\n  return points;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/eachPoint.js?");

/***/ }),

/***/ "../../algorithm/polygons/edgesToPolygons.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/edgesToPolygons.js ***!
  \**********************************************************************************/
/*! exports provided: edgesToPolygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"edgesToPolygons\", function() { return edgesToPolygons; });\nconst toKey = JSON.stringify;\r\n\r\nconst edgesToPolygons = (options = {}, edges) => {\r\n  // Build an map of start to ends.\r\n  let edgeMap = new Map();\r\n  for (const [startPoint, endPoint] of edges) {\r\n    // There's probably a better way to intern the vertices.\r\n    let startKey = toKey(startPoint);\r\n    let vertex = edgeMap.get(startKey);\r\n    if (vertex === undefined) {\r\n      edgeMap.set(startKey, [startPoint, [toKey(endPoint)]]);\r\n    } else {\r\n      const endPoints = vertex[1];\r\n      endPoints.push(toKey(endPoint));\r\n    }\r\n  }\r\n\r\n  // Collect the polygons we produce.\r\n  const polygons = [];\r\n\r\n  // Traverse the graph.\r\n  for (let startKey of edgeMap.keys()) {\r\n    let key = startKey;\r\n    const polygon = [];\r\n    while (true) {\r\n      const value = edgeMap.get(key);\r\n      const [point, next] = value;\r\n      if (next.length === 0) {\r\n        if (polygon.length > 0) {\r\n          // This would form an open path.\r\n          polygons.push([null, ...polygon]);\r\n          // But it should be impossible for now.\r\n          throw Error('die');\r\n        }\r\n        break;\r\n      }\r\n      polygon.push(point);\r\n      key = next.pop();\r\n      if (key === startKey) {\r\n        polygons.push(polygon);\r\n        break;\r\n      }\r\n    }\r\n    if (polygon.length > 0) {\r\n      polygons.push(polygon);\r\n    }\r\n  }\r\n\r\n  // All done.\r\n  return polygons;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/edgesToPolygons.js?");

/***/ }),

/***/ "../../algorithm/polygons/flip.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/flip.js ***!
  \***********************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ \"../../algorithm/polygons/map.js\");\n\r\n\r\n\r\nconst flip = (polygons) => Object(_map__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(polygons, _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"flip\"]);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/flip.js?");

/***/ }),

/***/ "../../algorithm/polygons/fromPointsAndPaths.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/fromPointsAndPaths.js ***!
  \*************************************************************************************/
/*! exports provided: fromPointsAndPaths */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPointsAndPaths\", function() { return fromPointsAndPaths; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\nconst fromPointsAndPaths = ({ points = [], paths = [] }) => {\r\n  const polygons = [];\r\n  for (const path of paths) {\r\n    polygons.push(Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"fromPoints\"])(path.map(nth => points[nth])));\r\n  }\r\n  return polygons;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/fromPointsAndPaths.js?");

/***/ }),

/***/ "../../algorithm/polygons/isTriangle.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/isTriangle.js ***!
  \*****************************************************************************/
/*! exports provided: isTriangle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isTriangle\", function() { return isTriangle; });\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\nconst isTriangle = (path) => Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"isClosed\"])(path) && path.length === 3;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/isTriangle.js?");

/***/ }),

/***/ "../../algorithm/polygons/main.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/main.js ***!
  \***********************************************************************/
/*! exports provided: canonicalize, cutTrianglesByPlane, eachPoint, flip, fromPointsAndPaths, isTriangle, makeConvex, map, measureBoundingBox, measureBoundingSphere, toGeneric, toPoints, toTriangles, rotateX, rotateY, rotateZ, scale, transform, translate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canonicalize */ \"../../algorithm/polygons/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]; });\n\n/* harmony import */ var _cutTrianglesByPlane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cutTrianglesByPlane */ \"../../algorithm/polygons/cutTrianglesByPlane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cutTrianglesByPlane\", function() { return _cutTrianglesByPlane__WEBPACK_IMPORTED_MODULE_1__[\"cutTrianglesByPlane\"]; });\n\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/polygons/eachPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return _eachPoint__WEBPACK_IMPORTED_MODULE_2__[\"eachPoint\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./flip */ \"../../algorithm/polygons/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_3__[\"flip\"]; });\n\n/* harmony import */ var _fromPointsAndPaths__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromPointsAndPaths */ \"../../algorithm/polygons/fromPointsAndPaths.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPointsAndPaths\", function() { return _fromPointsAndPaths__WEBPACK_IMPORTED_MODULE_4__[\"fromPointsAndPaths\"]; });\n\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _isTriangle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isTriangle */ \"../../algorithm/polygons/isTriangle.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isTriangle\", function() { return _isTriangle__WEBPACK_IMPORTED_MODULE_6__[\"isTriangle\"]; });\n\n/* harmony import */ var _makeConvex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./makeConvex */ \"../../algorithm/polygons/makeConvex.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"makeConvex\", function() { return _makeConvex__WEBPACK_IMPORTED_MODULE_7__[\"makeConvex\"]; });\n\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./map */ \"../../algorithm/polygons/map.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return _map__WEBPACK_IMPORTED_MODULE_8__[\"map\"]; });\n\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../algorithm/polygons/measureBoundingBox.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return _measureBoundingBox__WEBPACK_IMPORTED_MODULE_9__[\"measureBoundingBox\"]; });\n\n/* harmony import */ var _measureBoundingSphere__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./measureBoundingSphere */ \"../../algorithm/polygons/measureBoundingSphere.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingSphere\", function() { return _measureBoundingSphere__WEBPACK_IMPORTED_MODULE_10__[\"measureBoundingSphere\"]; });\n\n/* harmony import */ var _toGeneric__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toGeneric */ \"../../algorithm/polygons/toGeneric.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return _toGeneric__WEBPACK_IMPORTED_MODULE_11__[\"toGeneric\"]; });\n\n/* harmony import */ var _toPoints__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./toPoints */ \"../../algorithm/polygons/toPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return _toPoints__WEBPACK_IMPORTED_MODULE_12__[\"toPoints\"]; });\n\n/* harmony import */ var _toTriangles__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./toTriangles */ \"../../algorithm/polygons/toTriangles.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toTriangles\", function() { return _toTriangles__WEBPACK_IMPORTED_MODULE_13__[\"toTriangles\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./transform */ \"../../algorithm/polygons/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst rotateX = (angle, polygons) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_5__[\"fromXRotation\"])(angle), polygons);\r\nconst rotateY = (angle, polygons) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_5__[\"fromYRotation\"])(angle), polygons);\r\nconst rotateZ = (angle, polygons) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_5__[\"fromZRotation\"])(angle), polygons);\r\nconst scale = (vector, polygons) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_5__[\"fromScaling\"])(vector), polygons);\r\nconst translate = (vector, polygons) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_5__[\"fromTranslation\"])(vector), polygons);\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/main.js?");

/***/ }),

/***/ "../../algorithm/polygons/makeConvex.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/makeConvex.js ***!
  \*****************************************************************************/
/*! exports provided: makeConvex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeConvex\", function() { return makeConvex; });\n/* harmony import */ var tess2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tess2 */ \"../../node_modules/tess2/index.js\");\n/* harmony import */ var tess2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tess2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _blessAsConvex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blessAsConvex */ \"../../algorithm/polygons/blessAsConvex.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\n\r\n\r\nconst toContour = (polygon) => {\r\n  const points = [];\r\n  for (const [x = 0, y = 0, z = 0] of polygon) {\r\n    points.push(x, y, z);\r\n  }\r\n  return points;\r\n};\r\n\r\nconst fromTessellation = (tessellation) => {\r\n  const tessPolygons = tessellation.elements;\r\n  const vertices = tessellation.vertices;\r\n  const polygons = [];\r\n\r\n  const toPoint = (offset) => {\r\n    const vertex = tessPolygons[offset];\r\n    return [vertices[vertex * 3 + 0], vertices[vertex * 3 + 1], vertices[vertex * 3 + 2]];\r\n  };\r\n\r\n  for (let nth = 0; nth < tessPolygons.length; nth += 3) {\r\n    polygons.push([toPoint(nth + 0), toPoint(nth + 1), toPoint(nth + 2)]);\r\n  }\r\n\r\n  return polygons;\r\n};\r\n\r\n// This currently does triangulation.\r\n// Higher arities are possible, but end up being null padded.\r\n// Let's see if they're useful.\r\n\r\n// TODO: Call this toConvexPolygons\r\nconst makeConvex = (options = {}, polygons) => {\r\n  if (polygons.isConvex) {\r\n    return polygons;\r\n  }\r\n  if (polygons.every(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_2__[\"isConvex\"])) {\r\n    return Object(_blessAsConvex__WEBPACK_IMPORTED_MODULE_1__[\"blessAsConvex\"])(polygons);\r\n  }\r\n  const contours = polygons.map(toContour);\r\n  const convex = fromTessellation(\r\n    tess2__WEBPACK_IMPORTED_MODULE_0___default.a.tesselate({ contours: contours,\r\n                      windingRule: tess2__WEBPACK_IMPORTED_MODULE_0___default.a.WINDING_ODD,\r\n                      elementType: tess2__WEBPACK_IMPORTED_MODULE_0___default.a.POLYGONS,\r\n                      polySize: 3,\r\n                      vertexSize: 3\r\n    }));\r\n  return Object(_blessAsConvex__WEBPACK_IMPORTED_MODULE_1__[\"blessAsConvex\"])(convex);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/makeConvex.js?");

/***/ }),

/***/ "../../algorithm/polygons/map.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/map.js ***!
  \**********************************************************************/
/*! exports provided: map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map; });\n/**\r\n * Transforms each polygon of Polygons.\r\n *\r\n * @param {Polygons} original - the Polygons to transform.\r\n * @param {Function} [transform=identity] - function used to transform the polygons.\r\n * @returns {Polygons} a copy with transformed polygons.\r\n */\r\nconst map = (original, transform) => {\r\n  if (original === undefined) {\r\n    original = [];\r\n  }\r\n  if (transform === undefined) {\r\n    transform = _ => _;\r\n  }\r\n  return original.map(polygon => transform(polygon));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/map.js?");

/***/ }),

/***/ "../../algorithm/polygons/measureBoundingBox.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/measureBoundingBox.js ***!
  \*************************************************************************************/
/*! exports provided: measureBoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return measureBoundingBox; });\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/polygons/eachPoint.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n// returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)\r\nconst measureBoundingBox = (polygons) => {\r\n  let max = polygons[0][0];\r\n  let min = polygons[0][0];\r\n  Object(_eachPoint__WEBPACK_IMPORTED_MODULE_0__[\"eachPoint\"])({},\r\n            point => {\r\n              max = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"max\"])(max, point);\r\n              min = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"min\"])(min, point);\r\n            },\r\n            polygons);\r\n  return [min, max];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/measureBoundingBox.js?");

/***/ }),

/***/ "../../algorithm/polygons/measureBoundingSphere.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/measureBoundingSphere.js ***!
  \****************************************************************************************/
/*! exports provided: measureBoundingSphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingSphere\", function() { return measureBoundingSphere; });\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../algorithm/polygons/measureBoundingBox.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n/** Measure the bounding sphere of the given poly3\r\n * @param {poly3} the poly3 to measure\r\n * @returns computed bounding sphere; center (vec3) and radius\r\n */\r\nconst measureBoundingSphere = (polygons) => {\r\n  if (polygons.boundingSphere === undefined) {\r\n    const [min, max] = Object(_measureBoundingBox__WEBPACK_IMPORTED_MODULE_0__[\"measureBoundingBox\"])(polygons);\r\n    const center = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"scale\"])(0.5, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"add\"])(min, max));\r\n    const radius = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"distance\"])(center, max);\r\n    polygons.boundingSphere = [center, radius];\r\n  }\r\n  return polygons.boundingSphere;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/measureBoundingSphere.js?");

/***/ }),

/***/ "../../algorithm/polygons/toGeneric.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toGeneric.js ***!
  \****************************************************************************/
/*! exports provided: toGeneric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return toGeneric; });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ \"../../algorithm/polygons/map.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\n\r\nconst toGeneric = (polygons) => Object(_map__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(polygons, _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"map\"]);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toGeneric.js?");

/***/ }),

/***/ "../../algorithm/polygons/toPoints.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toPoints.js ***!
  \***************************************************************************/
/*! exports provided: toPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return toPoints; });\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/polygons/eachPoint.js\");\n\r\n\r\nconst toPoints = (options = {}, polygons) => {\r\n  const points = [];\r\n  Object(_eachPoint__WEBPACK_IMPORTED_MODULE_0__[\"eachPoint\"])(options, point => points.push(point), polygons);\r\n  return points;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toPoints.js?");

/***/ }),

/***/ "../../algorithm/polygons/toTriangles.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toTriangles.js ***!
  \******************************************************************************/
/*! exports provided: toTriangles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toTriangles\", function() { return toTriangles; });\n/* harmony import */ var _blessAsTriangles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blessAsTriangles */ \"../../algorithm/polygons/blessAsTriangles.js\");\n/* harmony import */ var _isTriangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isTriangle */ \"../../algorithm/polygons/isTriangle.js\");\n\r\n\r\n\r\nconst toTriangles = (options = {}, paths) => {\r\n  if (paths.isTriangles) {\r\n    return paths;\r\n  }\r\n  if (paths.every(_isTriangle__WEBPACK_IMPORTED_MODULE_1__[\"isTriangle\"])) {\r\n    return Object(_blessAsTriangles__WEBPACK_IMPORTED_MODULE_0__[\"blessAsTriangles\"])(paths);\r\n  }\r\n  const triangles = [];\r\n  for (const path of paths) {\r\n    for (let nth = 2; nth < path.length; nth++) {\r\n      triangles.push([path[0], path[nth - 1], path[nth]]);\r\n    }\r\n  }\r\n  return Object(_blessAsTriangles__WEBPACK_IMPORTED_MODULE_0__[\"blessAsTriangles\"])(triangles);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toTriangles.js?");

/***/ }),

/***/ "../../algorithm/polygons/transform.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/transform.js ***!
  \****************************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\nconst transform = (matrix, polygons) => polygons.map(polygon => Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, polygon));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/transform.js?");

/***/ }),

/***/ "../../algorithm/shape/buildConvexHull.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildConvexHull.js ***!
  \*******************************************************************************/
/*! exports provided: buildConvexHull */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildConvexHull\", function() { return buildConvexHull; });\n/* harmony import */ var quickhull3d_dist_QuickHull__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! quickhull3d/dist/QuickHull */ \"../../node_modules/quickhull3d/dist/QuickHull.js\");\n/* harmony import */ var quickhull3d_dist_QuickHull__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(quickhull3d_dist_QuickHull__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nconst buildConvexHull = (options = {}, points) => {\r\n  const hull = new quickhull3d_dist_QuickHull__WEBPACK_IMPORTED_MODULE_0___default.a(points, { skipTriangulation: true });\r\n  hull.build();\r\n  return hull.collectFaces().map(polygon => polygon.map(nthPoint => points[nthPoint]));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildConvexHull.js?");

/***/ }),

/***/ "../../algorithm/shape/buildCubicBezierCurve.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildCubicBezierCurve.js ***!
  \*************************************************************************************/
/*! exports provided: buildCubicBezierCurve */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildCubicBezierCurve\", function() { return buildCubicBezierCurve; });\n/* harmony import */ var bezier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bezier */ \"../../node_modules/bezier/index.js\");\n/* harmony import */ var bezier__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bezier__WEBPACK_IMPORTED_MODULE_0__);\n\r\nconst interpolateCubicBezier = bezier__WEBPACK_IMPORTED_MODULE_0___default.a.prepare(4);\r\n\r\n// TODO: Change from segments to point-distance metric.\r\n\r\nconst buildCubicBezierCurve = ({ segments = 8 }, points) => {\r\n  const xPoints = points.map(point => point[0]);\r\n  const yPoints = points.map(point => point[1]);\r\n  const path = [];\r\n  for (let t = 0; t <= 1; t += 1 / segments) {\r\n    path.push([interpolateCubicBezier(xPoints, t),\r\n               interpolateCubicBezier(yPoints, t)]);\r\n  }\r\n  return path;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildCubicBezierCurve.js?");

/***/ }),

/***/ "../../algorithm/shape/buildGeodesicSphere.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildGeodesicSphere.js ***!
  \***********************************************************************************/
/*! exports provided: buildGeodesicSphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildGeodesicSphere\", function() { return buildGeodesicSphere; });\n/* harmony import */ var _buildRegularIcosahedron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buildRegularIcosahedron */ \"../../algorithm/shape/buildRegularIcosahedron.js\");\n/* harmony import */ var _subdivideTriangularMesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subdivideTriangularMesh */ \"../../algorithm/shape/subdivideTriangularMesh.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n\r\n/**\r\n *\r\n * Builds a sphere with at least the number of faces requested, and less than\r\n *   four times the number of faces requested.\r\n */\r\nconst buildGeodesicSphere = ({ faces = 20 }) => {\r\n  let mesh = Object(_buildRegularIcosahedron__WEBPACK_IMPORTED_MODULE_0__[\"buildRegularIcosahedron\"])({});\r\n  while (mesh.length < faces) {\r\n    mesh = Object(_subdivideTriangularMesh__WEBPACK_IMPORTED_MODULE_1__[\"subdivideTriangularMesh\"])(mesh);\r\n  }\r\n  return mesh.map(triangle => triangle.map(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"unit\"]));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildGeodesicSphere.js?");

/***/ }),

/***/ "../../algorithm/shape/buildRegularIcosahedron.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularIcosahedron.js ***!
  \***************************************************************************************/
/*! exports provided: buildRegularIcosahedron */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildRegularIcosahedron\", function() { return buildRegularIcosahedron; });\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n\r\n\r\n// Unit icosahedron vertices.\r\nconst points = [[0.850651, 0.000000, -0.525731],\r\n                [0.850651, -0.000000, 0.525731],\r\n                [-0.850651, -0.000000, 0.525731],\r\n                [-0.850651, 0.000000, -0.525731],\r\n                [0.000000, -0.525731, 0.850651],\r\n                [0.000000, 0.525731, 0.850651],\r\n                [0.000000, 0.525731, -0.850651],\r\n                [0.000000, -0.525731, -0.850651],\r\n                [-0.525731, -0.850651, -0.000000],\r\n                [0.525731, -0.850651, -0.000000],\r\n                [0.525731, 0.850651, 0.000000],\r\n                [-0.525731, 0.850651, 0.000000]];\r\n\r\n// Triangular decomposition structure.\r\nconst paths = [[1, 9, 0], [0, 10, 1], [0, 7, 6], [0, 6, 10],\r\n               [0, 9, 7], [4, 1, 5], [9, 1, 4], [1, 10, 5],\r\n               [3, 8, 2], [2, 11, 3], [4, 5, 2], [2, 8, 4],\r\n               [5, 11, 2], [6, 7, 3], [3, 11, 6], [3, 7, 8],\r\n               [4, 8, 9], [5, 10, 11], [6, 11, 10], [7, 9, 8]];\r\n\r\n// FIX: Why aren't we computing the convex hull?\r\nconst buildRegularIcosahedron = (options = {}) => {\r\n  return Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"fromPointsAndPaths\"])({ points: points, paths: paths });\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularIcosahedron.js?");

/***/ }),

/***/ "../../algorithm/shape/buildRegularPolygon.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularPolygon.js ***!
  \***********************************************************************************/
/*! exports provided: buildRegularPolygon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildRegularPolygon\", function() { return buildRegularPolygon; });\n/* harmony import */ var _jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec2 */ \"../../math/vec2/main.js\");\n\r\n\r\n/**\r\n * Construct a regular unit polygon of a given edge count.\r\n * Note: radius and length must not conflict.\r\n *\r\n * @param {Object} [options] - options for construction\r\n * @param {Integer} [options.edges=32] - how many edges the polygon has.\r\n * @returns {PointArray} Array of points along the path of the circle in CCW winding.\r\n *\r\n * @example\r\n * const circlePoints = regularPolygon({ edges: 32 })\r\n *\r\n * @example\r\n * const squarePoints = regularPolygon({ edges: 4 })\r\n * })\r\n */\r\nconst buildRegularPolygon = ({ edges = 32 }) => {\r\n  let points = [];\r\n  for (let i = 0; i < edges; i++) {\r\n    let radians = 2 * Math.PI * i / edges;\r\n    let point = Object(_jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_0__[\"fromAngleRadians\"])(radians);\r\n    points.push(point);\r\n  }\r\n  return points;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularPolygon.js?");

/***/ }),

/***/ "../../algorithm/shape/buildRegularPrism.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularPrism.js ***!
  \*********************************************************************************/
/*! exports provided: buildRegularPrism */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildRegularPrism\", function() { return buildRegularPrism; });\n/* harmony import */ var _buildRegularPolygon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buildRegularPolygon */ \"../../algorithm/shape/buildRegularPolygon.js\");\n/* harmony import */ var _extrudeLinear__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extrudeLinear */ \"../../algorithm/shape/extrudeLinear.js\");\n\r\n\r\n\r\n/**\r\n * Construct a regular unit prism of a given edge count.\r\n * Note: radius and length must not conflict.\r\n *\r\n * @param {Object} [options] - options for construction\r\n * @param {Integer} [options.edges=32] - how many edges the polygon has.\r\n * @returns {PointArray} Array of points along the path of the circle in CCW winding.\r\n *\r\n * @example\r\n * const circlePoints = regularPolygon({ edges: 32 })\r\n */\r\n\r\nconst buildRegularPrism = ({ edges = 32 }) =>\r\n  Object(_extrudeLinear__WEBPACK_IMPORTED_MODULE_1__[\"extrudeLinear\"])({ height: 1 }, [Object(_buildRegularPolygon__WEBPACK_IMPORTED_MODULE_0__[\"buildRegularPolygon\"])({ edges: edges })]);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularPrism.js?");

/***/ }),

/***/ "../../algorithm/shape/buildRegularTetrahedron.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularTetrahedron.js ***!
  \***************************************************************************************/
/*! exports provided: buildRegularTetrahedron */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildRegularTetrahedron\", function() { return buildRegularTetrahedron; });\n/* harmony import */ var _buildConvexHull__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buildConvexHull */ \"../../algorithm/shape/buildConvexHull.js\");\n\r\n\r\n// Unit tetrahedron vertices.\r\nconst points = [[1, 1, 1], [-1, 1, -1], [1, -1, -1],\r\n                [-1, 1, -1], [-1, -1, 1], [1, -1, -1],\r\n                [1, 1, 1], [1, -1, -1], [-1, -1, 1],\r\n                [1, 1, 1], [-1, -1, 1], [-1, 1, -1]];\r\n\r\nconst buildRegularTetrahedron = (options = {}) => Object(_buildConvexHull__WEBPACK_IMPORTED_MODULE_0__[\"buildConvexHull\"])({}, points);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularTetrahedron.js?");

/***/ }),

/***/ "../../algorithm/shape/buildRingSphere.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRingSphere.js ***!
  \*******************************************************************************/
/*! exports provided: buildRingSphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildRingSphere\", function() { return buildRingSphere; });\n/* harmony import */ var _buildRegularPolygon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buildRegularPolygon */ \"../../algorithm/shape/buildRegularPolygon.js\");\n/* harmony import */ var _buildConvexHull__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buildConvexHull */ \"../../algorithm/shape/buildConvexHull.js\");\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst buildRingSphere = ({ resolution = 20 }) => {\r\n  const paths = [];\r\n  // Trace out latitudinal rings.\r\n  for (let slice = 0; slice <= resolution; slice++) {\r\n    let angle = Math.PI * 2.0 * slice / resolution;\r\n    let height = Math.sin(angle);\r\n    let radius = Math.cos(angle);\r\n    paths.push(Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_2__[\"translate\"])([0, 0, height], Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_2__[\"scale\"])([radius, radius, radius], Object(_buildRegularPolygon__WEBPACK_IMPORTED_MODULE_0__[\"buildRegularPolygon\"])({ edges: resolution }))));\r\n  }\r\n  // Hull the rings to form a sphere.\r\n  return Object(_buildConvexHull__WEBPACK_IMPORTED_MODULE_1__[\"buildConvexHull\"])({}, Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_3__[\"toPoints\"])({}, paths));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRingSphere.js?");

/***/ }),

/***/ "../../algorithm/shape/buildRoundedConvexHull.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRoundedConvexHull.js ***!
  \**************************************************************************************/
/*! exports provided: buildRoundedConvexHull */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildRoundedConvexHull\", function() { return buildRoundedConvexHull; });\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _buildConvexHull__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./buildConvexHull */ \"../../algorithm/shape/buildConvexHull.js\");\n/* harmony import */ var _buildRingSphere__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./buildRingSphere */ \"../../algorithm/shape/buildRingSphere.js\");\n\r\n\r\n\r\n\r\n\r\nconst scale = (vec, polygons) => Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromScaling\"])(vec), polygons);\r\nconst translate = (vec, polygons) => Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromTranslation\"])(vec), polygons);\r\n\r\nconst buildRoundedConvexHull = ({ roundingRadius = 0.1, roundingFaces = 8 }, points) => {\r\n  const sphere = scale([roundingRadius, roundingRadius, roundingRadius], Object(_buildRingSphere__WEBPACK_IMPORTED_MODULE_3__[\"buildRingSphere\"])({ resolution: roundingFaces }));\r\n  const hullPoints = [];\r\n  points.forEach(point => Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"eachPoint\"])({}, point => hullPoints.push(point), translate(point, sphere)));\r\n  return Object(_buildConvexHull__WEBPACK_IMPORTED_MODULE_2__[\"buildConvexHull\"])({}, hullPoints);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRoundedConvexHull.js?");

/***/ }),

/***/ "../../algorithm/shape/extrudeLinear.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/extrudeLinear.js ***!
  \*****************************************************************************/
/*! exports provided: extrudeLinear */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extrudeLinear\", function() { return extrudeLinear; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n\r\n\r\n\r\nconst extrudeLinear = ({ height = 1 }, polygons) => {\r\n  const extruded = [];\r\n  const up = [0, 0, height];\r\n\r\n  // Build the walls.\r\n  for (const polygon of polygons) {\r\n    // Build floor outline. This need not be a convex polygon.\r\n    const floor = polygon.map(point => [point[0], point[1], height / -2]).reverse();\r\n    // Walk around the floor to build the walls.\r\n    for (let i = 0; i < floor.length; i++) {\r\n      const start = floor[i];\r\n      const end = floor[(i + 1) % floor.length];\r\n      // Remember that we are walking CCW.\r\n      extruded.push([start, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(start, up), end]);\r\n      extruded.push([end, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(start, up), Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(end, up)]);\r\n    }\r\n  }\r\n\r\n  // Build the roof and floor from convex polygons.\r\n  for (const polygon of Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_1__[\"makeConvex\"])({}, polygons)) {\r\n    const floor = polygon.map(point => [point[0], point[1], height / -2]).reverse();\r\n    const roof = floor.map(vertex => Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(vertex, up)).reverse();\r\n    extruded.push(roof, floor);\r\n  }\r\n\r\n  return extruded;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/extrudeLinear.js?");

/***/ }),

/***/ "../../algorithm/shape/main.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/main.js ***!
  \********************************************************************/
/*! exports provided: buildConvexHull, buildCubicBezierCurve, buildGeodesicSphere, buildRegularIcosahedron, buildRegularPolygon, buildRegularPrism, buildRegularTetrahedron, buildRoundedConvexHull, buildRingSphere, extrudeLinear, regularPolygonEdgeLengthToRadius, subdivideTriangle, subdivideTriangularMesh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _buildConvexHull__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buildConvexHull */ \"../../algorithm/shape/buildConvexHull.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildConvexHull\", function() { return _buildConvexHull__WEBPACK_IMPORTED_MODULE_0__[\"buildConvexHull\"]; });\n\n/* harmony import */ var _buildCubicBezierCurve__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buildCubicBezierCurve */ \"../../algorithm/shape/buildCubicBezierCurve.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildCubicBezierCurve\", function() { return _buildCubicBezierCurve__WEBPACK_IMPORTED_MODULE_1__[\"buildCubicBezierCurve\"]; });\n\n/* harmony import */ var _buildGeodesicSphere__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./buildGeodesicSphere */ \"../../algorithm/shape/buildGeodesicSphere.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildGeodesicSphere\", function() { return _buildGeodesicSphere__WEBPACK_IMPORTED_MODULE_2__[\"buildGeodesicSphere\"]; });\n\n/* harmony import */ var _buildRingSphere__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./buildRingSphere */ \"../../algorithm/shape/buildRingSphere.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildRingSphere\", function() { return _buildRingSphere__WEBPACK_IMPORTED_MODULE_3__[\"buildRingSphere\"]; });\n\n/* harmony import */ var _buildRegularIcosahedron__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./buildRegularIcosahedron */ \"../../algorithm/shape/buildRegularIcosahedron.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildRegularIcosahedron\", function() { return _buildRegularIcosahedron__WEBPACK_IMPORTED_MODULE_4__[\"buildRegularIcosahedron\"]; });\n\n/* harmony import */ var _buildRegularPolygon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./buildRegularPolygon */ \"../../algorithm/shape/buildRegularPolygon.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildRegularPolygon\", function() { return _buildRegularPolygon__WEBPACK_IMPORTED_MODULE_5__[\"buildRegularPolygon\"]; });\n\n/* harmony import */ var _buildRegularPrism__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./buildRegularPrism */ \"../../algorithm/shape/buildRegularPrism.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildRegularPrism\", function() { return _buildRegularPrism__WEBPACK_IMPORTED_MODULE_6__[\"buildRegularPrism\"]; });\n\n/* harmony import */ var _buildRegularTetrahedron__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./buildRegularTetrahedron */ \"../../algorithm/shape/buildRegularTetrahedron.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildRegularTetrahedron\", function() { return _buildRegularTetrahedron__WEBPACK_IMPORTED_MODULE_7__[\"buildRegularTetrahedron\"]; });\n\n/* harmony import */ var _buildRoundedConvexHull__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./buildRoundedConvexHull */ \"../../algorithm/shape/buildRoundedConvexHull.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildRoundedConvexHull\", function() { return _buildRoundedConvexHull__WEBPACK_IMPORTED_MODULE_8__[\"buildRoundedConvexHull\"]; });\n\n/* harmony import */ var _extrudeLinear__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extrudeLinear */ \"../../algorithm/shape/extrudeLinear.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"extrudeLinear\", function() { return _extrudeLinear__WEBPACK_IMPORTED_MODULE_9__[\"extrudeLinear\"]; });\n\n/* harmony import */ var _regularPolygonEdgeLengthToRadius__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./regularPolygonEdgeLengthToRadius */ \"../../algorithm/shape/regularPolygonEdgeLengthToRadius.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"regularPolygonEdgeLengthToRadius\", function() { return _regularPolygonEdgeLengthToRadius__WEBPACK_IMPORTED_MODULE_10__[\"regularPolygonEdgeLengthToRadius\"]; });\n\n/* harmony import */ var _subdivideTriangle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./subdivideTriangle */ \"../../algorithm/shape/subdivideTriangle.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"subdivideTriangle\", function() { return _subdivideTriangle__WEBPACK_IMPORTED_MODULE_11__[\"subdivideTriangle\"]; });\n\n/* harmony import */ var _subdivideTriangularMesh__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./subdivideTriangularMesh */ \"../../algorithm/shape/subdivideTriangularMesh.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"subdivideTriangularMesh\", function() { return _subdivideTriangularMesh__WEBPACK_IMPORTED_MODULE_12__[\"subdivideTriangularMesh\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/main.js?");

/***/ }),

/***/ "../../algorithm/shape/regularPolygonEdgeLengthToRadius.js":
/*!************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/regularPolygonEdgeLengthToRadius.js ***!
  \************************************************************************************************/
/*! exports provided: regularPolygonEdgeLengthToRadius */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"regularPolygonEdgeLengthToRadius\", function() { return regularPolygonEdgeLengthToRadius; });\nconst sin = (a) => Math.sin(a / 360 * Math.PI * 2);\r\n\r\nconst regularPolygonEdgeLengthToRadius = (length, edges) => length / (2 * sin(180 / edges));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/regularPolygonEdgeLengthToRadius.js?");

/***/ }),

/***/ "../../algorithm/shape/subdivideTriangle.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/subdivideTriangle.js ***!
  \*********************************************************************************/
/*! exports provided: subdivideTriangle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subdivideTriangle\", function() { return subdivideTriangle; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n//      0\r\n//     /\\\r\n//  10/__\\20\r\n//   /\\  /\\\r\n// 1/__\\/__\\2\r\n//     21\r\nconst subdivideTriangle = (triangle) => {\r\n  const t0 = triangle[0];\r\n  const t1 = triangle[1];\r\n  const t2 = triangle[2];\r\n  const t10 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(1 / 2, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(t1, t0));\r\n  const t20 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(1 / 2, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(t2, t0));\r\n  const t21 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(1 / 2, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(t2, t1));\r\n  // Turning CCW.\r\n  return [[t0, t10, t20],\r\n          [t10, t1, t21],\r\n          [t20, t21, t2],\r\n          [t10, t21, t20]];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/subdivideTriangle.js?");

/***/ }),

/***/ "../../algorithm/shape/subdivideTriangularMesh.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/subdivideTriangularMesh.js ***!
  \***************************************************************************************/
/*! exports provided: subdivideTriangularMesh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subdivideTriangularMesh\", function() { return subdivideTriangularMesh; });\n/* harmony import */ var _subdivideTriangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subdivideTriangle */ \"../../algorithm/shape/subdivideTriangle.js\");\n\r\n\r\nconst subdivideTriangularMesh = (mesh) => {\r\n  const subdividedMesh = [];\r\n  for (const triangle of mesh) {\r\n    for (const subTriangle of Object(_subdivideTriangle__WEBPACK_IMPORTED_MODULE_0__[\"subdivideTriangle\"])(triangle)) {\r\n      subdividedMesh.push(subTriangle);\r\n    }\r\n  }\r\n  return subdividedMesh;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/subdivideTriangularMesh.js?");

/***/ }),

/***/ "../../algorithm/stl/main.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/stl/main.js ***!
  \******************************************************************/
/*! exports provided: polygonsToStla */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _polygonsToStla__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polygonsToStla */ \"../../algorithm/stl/polygonsToStla.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"polygonsToStla\", function() { return _polygonsToStla__WEBPACK_IMPORTED_MODULE_0__[\"polygonsToStla\"]; });\n\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/stl/main.js?");

/***/ }),

/***/ "../../algorithm/stl/polygonsToStla.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/stl/polygonsToStla.js ***!
  \****************************************************************************/
/*! exports provided: polygonsToStla */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"polygonsToStla\", function() { return polygonsToStla; });\n/* harmony import */ var _jsxcad_algorithm_watertight__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-watertight */ \"../../algorithm/watertight/main.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\n\r\n/**\r\n * Translates a polygon array [[[x, y, z], [x, y, z], ...]] to ascii STL.\r\n * The exterior side of a polygon is determined by a CCW point ordering.\r\n *\r\n * @param {Object} options.\r\n * @param {Polygon Array} polygons - An array of arrays of points.\r\n * @returns {String} - the ascii STL output.\r\n */\r\n\r\nconst polygonsToStla = (options = {}, polygons) => {\r\n  if (!Object(_jsxcad_algorithm_watertight__WEBPACK_IMPORTED_MODULE_0__[\"isWatertightPolygons\"])(polygons)) {\r\n    console.log(`polygonsToStla: Polygon is not watertight`);\r\n    if (options.doMakeWatertight) {\r\n      polygons = Object(_jsxcad_algorithm_watertight__WEBPACK_IMPORTED_MODULE_0__[\"makeWatertight\"])(polygons);\r\n    }\r\n  }\r\n  return `solid JSxCAD\\n${convertToFacets(options, polygons)}\\nendsolid JSxCAD\\n`;\r\n};\r\n\r\nconst convertToFacets = (options, polygons) =>\r\n  polygons.map(convertToFacet).join('\\n');\r\n\r\nconst toStlVector = vector =>\r\n  `${vector[0]} ${vector[1]} ${vector[2]}`;\r\n\r\nconst toStlVertex = vertex =>\r\n  `vertex ${toStlVector(vertex)}`;\r\n\r\nconst convertToFacet = polygon => {\r\n  let result = [];\r\n  if (polygon.length >= 3) {\r\n    // Build a poly3 for convenience in computing the normal.\r\n    let normal = toStlVector(Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(polygon));\r\n    // STL requires triangular polygons. If our polygon has more vertices, create multiple triangles:\r\n    for (let i = 0; i < polygon.length - 2; i++) {\r\n      result.push(\r\n        [\r\n          `facet normal ${normal}`,\r\n          `outer loop`,\r\n          `${toStlVertex(polygon[0])}`,\r\n          `${toStlVertex(polygon[i + 1])}`,\r\n          `${toStlVertex(polygon[i + 2])}`,\r\n          `endloop`,\r\n          `endfacet`\r\n        ].join('\\n'));\r\n    }\r\n  }\r\n  return result.join('\\n');\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/stl/polygonsToStla.js?");

/***/ }),

/***/ "../../algorithm/svg/canonicalize.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/svg/canonicalize.js ***!
  \**************************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n\r\n\r\nconst canonicalizeSegment = ([directive, ...args]) => [directive, ...args.map(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])];\r\n\r\nconst canonicalize = (svgPath) => svgPath.map(canonicalizeSegment);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/svg/canonicalize.js?");

/***/ }),

/***/ "../../algorithm/svg/main.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/svg/main.js ***!
  \******************************************************************/
/*! exports provided: canonicalize, polygonsToSvg, svgPathToPaths */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canonicalize */ \"../../algorithm/svg/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]; });\n\n/* harmony import */ var _polygonsToSvg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./polygonsToSvg */ \"../../algorithm/svg/polygonsToSvg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"polygonsToSvg\", function() { return _polygonsToSvg__WEBPACK_IMPORTED_MODULE_1__[\"polygonsToSvg\"]; });\n\n/* harmony import */ var _svgPathToPaths__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./svgPathToPaths */ \"../../algorithm/svg/svgPathToPaths.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"svgPathToPaths\", function() { return _svgPathToPaths__WEBPACK_IMPORTED_MODULE_2__[\"svgPathToPaths\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/svg/main.js?");

/***/ }),

/***/ "../../algorithm/svg/polygonsToSvg.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/svg/polygonsToSvg.js ***!
  \***************************************************************************/
/*! exports provided: polygonsToSvg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"polygonsToSvg\", function() { return polygonsToSvg; });\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n/** Serialize the give objects to SVG format.\r\n * @param {Object} [options] - options for serialization\r\n * @param {Object|Array} objects - objects to serialize as SVG\r\n * @returns {Array} serialized contents, SVG format\r\n */\r\nconst polygonsToSvg = (options = {}, rawPolygons) => {\r\n  const polygons = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(rawPolygons);\r\n  const min = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"measureBoundingBox\"])(polygons)[0];\r\n  // TODO: Add transform and translate support to polygons.\r\n  const shiftedPolygons = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"translate\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"negate\"])(min), polygons));\r\n  const [width, height] = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"measureBoundingBox\"])(polygons)[1];\r\n\r\n  return [\r\n    `<?xml version=\"1.0\" encoding=\"UTF-8\"?>`,\r\n    `<!-- Generated by jsxcad -->`,\r\n    `<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1 Tiny//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd\">`,\r\n    `<svg baseProfile=\"tiny\" height=\"${height} mm\" width=\"${width} mm\" viewBox=\"0 0 ${width} ${height}\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">`,\r\n    ...shiftedPolygons.map(polygon => `<path d=\"${polygon.map((point, index) => `${index === 0 ? 'M' : 'L'}${point[0]} ${point[1]}`).join(' ')}\"/>`),\r\n    `</svg>`\r\n  ].join('\\n');\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/svg/polygonsToSvg.js?");

/***/ }),

/***/ "../../algorithm/svg/svgPathToPaths.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/svg/svgPathToPaths.js ***!
  \****************************************************************************/
/*! exports provided: svgPathToPaths */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"svgPathToPaths\", function() { return svgPathToPaths; });\n/* harmony import */ var abs_svg_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! abs-svg-path */ \"../../node_modules/abs-svg-path/index.js\");\n/* harmony import */ var abs_svg_path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(abs_svg_path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var curvify_svg_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! curvify-svg-path */ \"../../node_modules/curvify-svg-path/index.js\");\n/* harmony import */ var curvify_svg_path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(curvify_svg_path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var parse_svg_path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! parse-svg-path */ \"../../node_modules/parse-svg-path/index.js\");\n/* harmony import */ var parse_svg_path__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(parse_svg_path__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jsxcad/math-vec2 */ \"../../math/vec2/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// FIX: Check scaling.\r\n\r\nconst toPaths = ({ curveSegments }, svgPath) => {\r\n  const paths = [];\r\n  let path = [null];\r\n\r\n  const newPath = () => {\r\n    if (path[0] === null) {\r\n      maybeClosePath();\r\n    }\r\n    if (path.length < 2) {\r\n      // An empty path.\r\n      return;\r\n    }\r\n    paths.push(path);\r\n    path = [null];\r\n  };\r\n\r\n  const maybeClosePath = () => {\r\n    if (path.length > 3) {\r\n      if (Object(_jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_6__[\"equals\"])(path[1], path[path.length - 1])) {\r\n        // The path is closed, remove the leading null.\r\n        path = path.slice(1);\r\n        newPath();\r\n      }\r\n    }\r\n  };\r\n\r\n  for (const segment of svgPath) {\r\n    const [directive, ...args] = segment;\r\n    switch (directive) {\r\n      case 'M': {\r\n        maybeClosePath();\r\n        newPath();\r\n        const [x, y] = args;\r\n        path.push([x, y]);\r\n        break;\r\n      }\r\n      case 'C': {\r\n        const [x1, y1, x2, y2, x, y] = args;\r\n        const start = path[path.length - 1];\r\n        const [xStart, yStart] = (start === null) ? [0, 0] : start;\r\n        path = path.concat(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"buildCubicBezierCurve\"])({ segments: curveSegments }, [[xStart, yStart], [x1, y1], [x2, y2], [x, y]]));\r\n        break;\r\n      }\r\n      default: {\r\n        throw Error(`Unexpected segment: ${JSON.stringify(segment)}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  maybeClosePath();\r\n  newPath();\r\n  return Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_5__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_3__[\"fromScaling\"])([1, -1, 0]), paths);\r\n};\r\n\r\nconst svgPathToPaths = (options = {}, svgPath) =>\r\n  toPaths(options, curvify_svg_path__WEBPACK_IMPORTED_MODULE_1___default()(abs_svg_path__WEBPACK_IMPORTED_MODULE_0___default()(parse_svg_path__WEBPACK_IMPORTED_MODULE_4___default()(svgPath))));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/svg/svgPathToPaths.js?");

/***/ }),

/***/ "../../algorithm/text/main.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/text/main.js ***!
  \*******************************************************************/
/*! exports provided: pathnameToFont, textToSurfaces */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pathnameToFont\", function() { return pathnameToFont; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"textToSurfaces\", function() { return textToSurfaces; });\n/* harmony import */ var opentype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! opentype.js */ \"../../node_modules/opentype.js/src/opentype.js\");\n/* harmony import */ var _jsxcad_algorithm_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-svg */ \"../../algorithm/svg/main.js\");\n\r\n\r\n\r\nconst pathnameToFont = (pathname) => Object(opentype_js__WEBPACK_IMPORTED_MODULE_0__[\"loadSync\"])(pathname);\r\n\r\nconst textToSurfaces = ({ curveSegments, font, size, kerning = true, features = undefined, hinting = false },\r\n                               text) => {\r\n  const options = { kerning: kerning, features: features, hinting: hinting };\r\n  const svgPaths = [];\r\n  font.forEachGlyph(text, 0, 0, size, options,\r\n                    (glyph, x, y, fontSize) => {\r\n                      svgPaths.push(glyph.getPath(x, y, fontSize, options, undefined).toPathData());\r\n                    });\r\n  return svgPaths.map(svgPath => Object(_jsxcad_algorithm_svg__WEBPACK_IMPORTED_MODULE_1__[\"svgPathToPaths\"])({ curveSegments: curveSegments }, svgPath));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/text/main.js?");

/***/ }),

/***/ "../../algorithm/threejs/buildThreejsScreen.js":
/*!************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/threejs/buildThreejsScreen.js ***!
  \************************************************************************************/
/*! exports provided: buildThreejsScreen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildThreejsScreen\", function() { return buildThreejsScreen; });\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n\r\n\r\nclass threejsDisplay {\r\n  constructor (targetID) {\r\n    //\r\n    let gui;\r\n    \r\n    this.camera = new THREE.PerspectiveCamera( 27, window.innerWidth / window.innerHeight, 1, 3500 );\r\n    [this.camera.position.x, this.camera.position.y, this.camera.position.z] = [0,0,16];\r\n    //\r\n    this.controls = new THREE.TrackballControls(this.camera);\r\n    this.controls.rotateSpeed = 4.0;\r\n    this.controls.zoomSpeed = 4.0;\r\n    this.controls.panSpeed = 2.0;\r\n    this.controls.noZoom = false;\r\n    this.controls.noPan = false;\r\n    this.controls.staticMoving = true;\r\n    this.controls.dynamicDampingFactor = 0.1;\r\n    this.controls.keys = [65, 83, 68];\r\n    this.controls.addEventListener('change', () => {this.render()});\r\n    //\r\n    this.scene = new THREE.Scene();\r\n    this.scene.background = new THREE.Color( 0x050505 );\r\n    this.scene.add(this.camera);\r\n    //\r\n    var ambientLight = new THREE.AmbientLight( 0x222222 );\r\n    this.scene.add( ambientLight );\r\n    // var light1 = new THREE.PointLight(0xffffff, 0, 1);\r\n    // camera.add(light1);\r\n    var light2 = new THREE.DirectionalLight( 0xffffff, 1 );\r\n    light2.position.set( 1, 1, 1 );\r\n    this.camera.add(light2);\r\n    // scene.add( light2 );\r\n    \r\n    //\r\n    this.renderer = new THREE.WebGLRenderer( { antialias: true } );\r\n    this.renderer.setPixelRatio( window.devicePixelRatio );\r\n    this.renderer.setSize( window.innerWidth * 0.5, window.innerHeight * 0.5);\r\n    document.getElementById(targetID).appendChild(this.renderer.domElement);\r\n    //\r\n    // stats = new Stats();\r\n    // document.getElementById('viewer').appendChild(stats.dom);\r\n    //\r\n    gui = new dat.GUI({ autoPlace: false });\r\n    document.getElementById(targetID).appendChild(gui.domElement);\r\n    document.getElementById(targetID).threeScreen = this;\r\n    // gui.add( material, 'wireframe' );\r\n    //\r\n    window.addEventListener( 'resize', () => {this.onWindowResize()}, false );\r\n    \r\n    this.animate();\r\n  }\r\n  \r\n  writeScreen(options = {}, ...shapes){\r\n    \r\n    //Function to convert to polygons if needed\r\n    const toPolygons = (shape) => (shape instanceof Array) ? shape : shape.toPolygons({});\r\n    \r\n    const makeMaterial = (material) => {\r\n      switch (material) {\r\n        case 'metal':\r\n        return new THREE.MeshStandardMaterial({\r\n          color: 0x779aac,\r\n          emissive: 0x7090a0,\r\n          roughness: 0.65,\r\n          metalness: 0.99,\r\n        });\r\n        default:\r\n        return new THREE.MeshNormalMaterial();\r\n      }\r\n    }\r\n    \r\n    //Convert polygon to triangles\r\n    const solids = shapes.map(toPolygons).map(polygons =>  Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"toTriangles\"])({}, polygons));\r\n    \r\n    //Convert triangles to threejs dataset\r\n    const datasets = trianglesToThreejsDatasets({}, ...solids);\r\n    \r\n    for (const dataset of datasets) {\r\n      var geometry = new THREE.BufferGeometry();\r\n      let { properties = {}, indices, positions, normals } = dataset;\r\n      let { material, tags = [] } = properties;\r\n      geometry.setIndex( indices );\r\n      geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\r\n      geometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\r\n      var threeMaterial = makeMaterial(material);\r\n      var mesh = new THREE.Mesh( geometry, threeMaterial );\r\n      mesh.name = options.id;\r\n      this.scene.add( mesh );\r\n    }\r\n  }\r\n  \r\n  clearScreenById(id){\r\n    var selectedObject = this.scene.getObjectByName(id);\r\n    this.scene.remove( selectedObject );\r\n    this.animate();\r\n  }\r\n  \r\n  clearScreenAll(){\r\n    while(this.scene.children.length > 0){ \r\n      this.scene.remove(this.scene.children[0]); \r\n    }\r\n  }\r\n  \r\n  onWindowResize() {\r\n    //FIXME: This should be responsive to the size of the div it is placed in, not the window\r\n    this.camera.aspect = window.innerWidth / window.innerHeight;\r\n    this.camera.updateProjectionMatrix();\r\n    this.controls.handleResize();\r\n    this.renderer.setSize( window.innerWidth * 0.5, window.innerHeight * 0.5);\r\n  }\r\n  \r\n  animate() {\r\n    requestAnimationFrame( () => {this.animate()} );\r\n    this.render();\r\n    this.controls.update();\r\n    // stats.update();\r\n  }\r\n    \r\n  render() {\r\n    this.renderer.render( this.scene, this.camera );\r\n  }\r\n}\r\n\r\nconst buildThreejsScreen = (targetDiv) => {\r\n  new threejsDisplay(targetDiv);\r\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/threejs/buildThreejsScreen.js?");

/***/ }),

/***/ "../../algorithm/threejs/main.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/threejs/main.js ***!
  \**********************************************************************/
/*! exports provided: buildThreejsScreen, trianglesToThreejsDatasets, trianglesToThreejsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _buildThreejsScreen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buildThreejsScreen */ \"../../algorithm/threejs/buildThreejsScreen.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildThreejsScreen\", function() { return _buildThreejsScreen__WEBPACK_IMPORTED_MODULE_0__[\"buildThreejsScreen\"]; });\n\n/* harmony import */ var _trianglesToThreejsDatasets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./trianglesToThreejsDatasets */ \"../../algorithm/threejs/trianglesToThreejsDatasets.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"trianglesToThreejsDatasets\", function() { return _trianglesToThreejsDatasets__WEBPACK_IMPORTED_MODULE_1__[\"trianglesToThreejsDatasets\"]; });\n\n/* harmony import */ var _trianglesToThreejsPage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./trianglesToThreejsPage */ \"../../algorithm/threejs/trianglesToThreejsPage.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"trianglesToThreejsPage\", function() { return _trianglesToThreejsPage__WEBPACK_IMPORTED_MODULE_2__[\"trianglesToThreejsPage\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/threejs/main.js?");

/***/ }),

/***/ "../../algorithm/threejs/trianglesToThreejsDatasets.js":
/*!********************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/threejs/trianglesToThreejsDatasets.js ***!
  \********************************************************************************************/
/*! exports provided: trianglesToThreejsDatasets */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"trianglesToThreejsDatasets\", function() { return trianglesToThreejsDatasets; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\nconst intern = (map, point, next, update) => {\r\n  const key = JSON.stringify(point);\r\n  let index = map[key];\r\n  if (index !== undefined) {\r\n    return index;\r\n  }\r\n  map[key] = next;\r\n  update(point);\r\n  return next;\r\n};\r\n\r\nconst trianglesToThreejsDatasets = (options = {}, ...triangularGeometries) => {\r\n  // Translate the paths to threejs geometry data.\r\n  const datasets = [];\r\n  for (const triangles of triangularGeometries) {\r\n    const indices = [];\r\n    const vertexMap = {};\r\n    const positions = [];\r\n    const normals = [];\r\n\r\n    for (const triangle of triangles) {\r\n      const [x, y, z] = Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"toPlane\"])(triangle);\r\n      const normal = [x, y, z];\r\n      for (const point of triangle) {\r\n        indices.push(intern(vertexMap,\r\n                            [point, normal],\r\n                            Math.floor(positions.length / 3),\r\n                            ([point, normal]) => {\r\n                              positions.push(...point);\r\n                              normals.push(...normal);\r\n                            }));\r\n      }\r\n    }\r\n    datasets.push({\r\n      properties: triangles.properties,\r\n      indices,\r\n      positions,\r\n      normals\r\n    });\r\n  }\r\n  return datasets;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/threejs/trianglesToThreejsDatasets.js?");

/***/ }),

/***/ "../../algorithm/threejs/trianglesToThreejsPage.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/threejs/trianglesToThreejsPage.js ***!
  \****************************************************************************************/
/*! exports provided: trianglesToThreejsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"trianglesToThreejsPage\", function() { return trianglesToThreejsPage; });\n/* harmony import */ var _trianglesToThreejsDatasets__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trianglesToThreejsDatasets */ \"../../algorithm/threejs/trianglesToThreejsDatasets.js\");\n\r\n\r\nconst renderMaterial = (nth) => {\r\n  // Just cycle through materials for now.\r\n  const materials = [\r\n    'THREE.MeshNormalMaterial()',\r\n    'THREE.MeshLambertMaterial({ color: 0xffffff, ambient: 0xaaaaaa, shading: THREE.FlatShading })'\r\n  ];\r\n  return materials[nth % materials.length];\r\n};\r\n\r\nconst renderDataset = ({ indices, positions, normals }, nth) => `\r\n        {\r\n          var geometry = new THREE.BufferGeometry();\r\n          var indices = ${JSON.stringify(indices)};\r\n          var positions = ${JSON.stringify(positions)};\r\n          var normals = ${JSON.stringify(normals)};\r\n          geometry.setIndex( indices );\r\n          geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\r\n          geometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\r\n          var material = new ${renderMaterial(nth)};\r\n          mesh = new THREE.Mesh( geometry, material );\r\n          scene.add( mesh );\r\n        }\r\n`;\r\n\r\nconst page = ({ cameraPosition, datasets }) => `\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>JSxCAD Viewer</title>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\r\n    <style>\r\n      body {\r\n        color: #cccccc;\r\n        font-family:Monospace;\r\n        font-size:13px;\r\n        text-align:center;\r\n        background-color: #050505;\r\n        margin: 0px;\r\n        overflow: hidden;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <div id=\"container\"></div>\r\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/87/three.min.js\"></script>\r\n    <script type=\"text/javascript\" src=\"https://cdn.rawgit.com/mrdoob/stats.js/master/build/stats.min.js\"></script>\r\n    <script type=\"text/javascript\" src=\"https://cdn.rawgit.com/mrdoob/three.js/master/examples/js/controls/TrackballControls.js\"></script>\r\n    <script type=\"text/javascript\" src=\"https://cdn.rawgit.com/dataarts/dat.gui/master/build/dat.gui.min.js\"></script>\r\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/ami.js//0.0.20/ami.min.js\"></script>\r\n    <script>\r\n      var camera, controls, scene, renderer, stats;\r\n      var mesh;\r\n      init();\r\n      animate();\r\n      function init() {\r\n        //\r\n        camera = new THREE.PerspectiveCamera( 27, window.innerWidth / window.innerHeight, 1, 3500 );\r\n        [camera.position.x, camera.position.y, camera.position.z] = ${JSON.stringify(cameraPosition)};\r\n        //\r\n        controls = new THREE.TrackballControls(camera);\r\n        controls.rotateSpeed = 4.0;\r\n        controls.zoomSpeed = 4.0;\r\n        controls.panSpeed = 2.0;\r\n        controls.noZoom = false;\r\n        controls.noPan = false;\r\n        controls.staticMoving = true;\r\n        controls.dynamicDampingFactor = 0.1;\r\n        controls.keys = [65, 83, 68];\r\n        controls.addEventListener('change', render);\r\n        //\r\n        scene = new THREE.Scene();\r\n        scene.background = new THREE.Color( 0x050505 );\r\n        //\r\n        var ambientLight = new THREE.AmbientLight( 0x222222 );\r\n        scene.add( ambientLight );\r\n        var light1 = new THREE.DirectionalLight( 0xffffff, 0.5 );\r\n        light1.position.set( 1, 1, 1 );\r\n        scene.add( light1 );\r\n        var light2 = new THREE.DirectionalLight( 0xffffff, 1 );\r\n        light2.position.set( 0, - 1, 0 );\r\n        scene.add( light2 );\r\n        ${datasets.map(renderDataset).join('')}\r\n        //\r\n        renderer = new THREE.WebGLRenderer( { antialias: true } );\r\n        renderer.setPixelRatio( window.devicePixelRatio );\r\n        renderer.setSize( window.innerWidth, window.innerHeight );\r\n        document.body.appendChild( renderer.domElement );\r\n        //\r\n        stats = new Stats();\r\n        document.body.appendChild( stats.dom );\r\n        //\r\n        var gui = new dat.GUI();\r\n        gui.add( material, 'wireframe' );\r\n        //\r\n        window.addEventListener( 'resize', onWindowResize, false );\r\n      }\r\n      function onWindowResize() {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        controls.handleResize();\r\n        renderer.setSize( window.innerWidth, window.innerHeight );\r\n      }\r\n      function animate() {\r\n        requestAnimationFrame( animate );\r\n        render();\r\n        controls.update();\r\n        stats.update();\r\n      }\r\n      function render() {\r\n        renderer.render( scene, camera );\r\n      }\r\n    </script>\r\n  </body>\r\n</html>\r\n`;\r\n\r\nconst trianglesToThreejsPage = (options, ...triangularGeometries) => {\r\n  const { cameraPosition = [0, 0, 16] } = options;\r\n  const datasets = Object(_trianglesToThreejsDatasets__WEBPACK_IMPORTED_MODULE_0__[\"trianglesToThreejsDatasets\"])(options, ...triangularGeometries);\r\n  return page({ cameraPosition, datasets });\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/threejs/trianglesToThreejsPage.js?");

/***/ }),

/***/ "../../algorithm/watertight/ensureMapElement.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/ensureMapElement.js ***!
  \*************************************************************************************/
/*! exports provided: ensureMapElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ensureMapElement\", function() { return ensureMapElement; });\nconst ensureMapElement = (map, key, ensurer = (_ => [])) => {\r\n  if (!map.has(key)) {\r\n    map.set(key, ensurer());\r\n  }\r\n  return map.get(key);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/ensureMapElement.js?");

/***/ }),

/***/ "../../algorithm/watertight/findPolygonsViolations.js":
/*!*******************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/findPolygonsViolations.js ***!
  \*******************************************************************************************/
/*! exports provided: findPolygonsViolations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findPolygonsViolations\", function() { return findPolygonsViolations; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _ensureMapElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ensureMapElement */ \"../../algorithm/watertight/ensureMapElement.js\");\n/* harmony import */ var _findVertexViolations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./findVertexViolations */ \"../../algorithm/watertight/findVertexViolations.js\");\n\r\n\r\n\r\n\r\nconst toIdentity = JSON.stringify;\r\n\r\nconst findPolygonsViolations = polygons => {\r\n  // A map from vertex value to connected edges represented as an array in\r\n  // the form [start, ...end].\r\n  const edges = new Map();\r\n  const addEdge = (start, end) => Object(_ensureMapElement__WEBPACK_IMPORTED_MODULE_1__[\"ensureMapElement\"])(edges, toIdentity(start), () => [start]).push(end);\r\n  const addEdges = (start, end) => { addEdge(start, end); addEdge(end, start); };\r\n  polygons.forEach(polygon => Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"eachEdge\"])({}, addEdges, polygon));\r\n\r\n  // Edges are assembled, check for matches\r\n  let violations = [];\r\n  edges.forEach(vertex => {\r\n    violations = [].concat(violations, Object(_findVertexViolations__WEBPACK_IMPORTED_MODULE_2__[\"findVertexViolations\"])(...vertex));\r\n  });\r\n\r\n  return violations;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/findPolygonsViolations.js?");

/***/ }),

/***/ "../../algorithm/watertight/findVertexViolations.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/findVertexViolations.js ***!
  \*****************************************************************************************/
/*! exports provided: findVertexViolations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findVertexViolations\", function() { return findVertexViolations; });\n/* harmony import */ var _ensureMapElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ensureMapElement */ \"../../algorithm/watertight/ensureMapElement.js\");\n/* harmony import */ var _jsxcad_math_ray3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-ray3 */ \"../../math/ray3/main.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n// Consider replacing the math library.\r\n\r\n\r\n\r\n\r\n\r\nconst toIdentity = JSON.stringify;\r\n\r\n/**\r\n * findVertexViolations determines that the vertex's edges are closed.\r\n *\r\n * For a watertight vertex, it will consist of unique lines with an even count.\r\n *\r\n * @params {start} start - the vertex.\r\n * @params {Array<point>} ends - the sorted other end of each edge.\r\n * @returns {Array} violations.\r\n *\r\n * Note that checking for pairs of edges isn't sufficient.\r\n *\r\n *    A-----B\r\n *    |     |\r\n *    |     E--F\r\n *    |     |  |\r\n *    C-----D--G\r\n *\r\n * A situation with B~D, D~B, E~D, D~E would lead such an algorithm to believe\r\n * the vertex was watertight when it is only partially watertight.\r\n *\r\n * So, we need to detect any distinct colinear edges.\r\n */\r\nconst findVertexViolations = (start, ...ends) => {\r\n  const lines = new Map();\r\n  ends.forEach(end => {\r\n    // These are not actually lines, but they all start at the same position, so we can pretend.\r\n    const ray = Object(_jsxcad_math_ray3__WEBPACK_IMPORTED_MODULE_1__[\"fromPoints\"])(start, end);\r\n    Object(_ensureMapElement__WEBPACK_IMPORTED_MODULE_0__[\"ensureMapElement\"])(lines, toIdentity(ray)).push(end);\r\n  });\r\n\r\n  const distance = (end) => Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"length\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"subtract\"])(end, start));\r\n\r\n  let violations = [];\r\n  lines.forEach(ends => {\r\n    ends.sort((a, b) => distance(a) - distance(b));\r\n    for (let nth = 1; nth < ends.length; nth++) {\r\n      if (!Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"equals\"])(ends[nth], ends[nth - 1])) {\r\n        violations.push(['unequal', [start, ...ends]]);\r\n        violations.push(['unequal', [start, ...ends].reverse()]);\r\n        break;\r\n      }\r\n    }\r\n    if (ends.length % 2 !== 0) {\r\n      // Lines aren't paired\r\n      // notWatertight = true\r\n      // violations.push(['unpaired', [start, ...ends]])\r\n      // return\r\n      // break\r\n    }\r\n  });\r\n\r\n  // If no violations, it is Watertight.\r\n  return violations;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/findVertexViolations.js?");

/***/ }),

/***/ "../../algorithm/watertight/fixTJunctions.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/fixTJunctions.js ***!
  \**********************************************************************************/
/*! exports provided: fixTJunctions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fixTJunctions\", function() { return fixTJunctions; });\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n\r\nconst EPS = 1e-5;\r\nconst W = 3;\r\n\r\nconst tag = vertex => JSON.stringify([...vertex]);\r\n\r\nfunction addSide (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) {\r\n  let starttag = tag(vertex0);\r\n  let endtag = tag(vertex1);\r\n  if (starttag === endtag) throw new Error('Assertion failed');\r\n  let newsidetag = starttag + '/' + endtag;\r\n  let reversesidetag = endtag + '/' + starttag;\r\n  if (reversesidetag in sidemap) {\r\n    // we have a matching reverse oriented side.\r\n    // Instead of adding the new side, cancel out the reverse side:\r\n    // console.log(\"addSide(\"+newsidetag+\") has reverse side:\");\r\n    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, vertex1, vertex0, null);\r\n    return null;\r\n  }\r\n  //  console.log(\"addSide(\"+newsidetag+\")\");\r\n  let newsideobj = {\r\n    vertex0: vertex0,\r\n    vertex1: vertex1,\r\n    polygonindex: polygonindex\r\n  };\r\n  if (!(newsidetag in sidemap)) {\r\n    sidemap[newsidetag] = [newsideobj];\r\n  } else {\r\n    sidemap[newsidetag].push(newsideobj);\r\n  }\r\n  if (starttag in vertextag2sidestart) {\r\n    vertextag2sidestart[starttag].push(newsidetag);\r\n  } else {\r\n    vertextag2sidestart[starttag] = [newsidetag];\r\n  }\r\n  if (endtag in vertextag2sideend) {\r\n    vertextag2sideend[endtag].push(newsidetag);\r\n  } else {\r\n    vertextag2sideend[endtag] = [newsidetag];\r\n  }\r\n  return newsidetag;\r\n}\r\n\r\nfunction deleteSide (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) {\r\n  let starttag = tag(vertex0);\r\n  let endtag = tag(vertex1);\r\n  let sidetag = starttag + '/' + endtag;\r\n  // console.log(\"deleteSide(\"+sidetag+\")\");\r\n  if (!(sidetag in sidemap)) throw new Error('Assertion failed');\r\n  let idx = -1;\r\n  let sideobjs = sidemap[sidetag];\r\n  for (let i = 0; i < sideobjs.length; i++) {\r\n    let sideobj = sideobjs[i];\r\n    if (!Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"equals\"])(sideobj.vertex0, vertex0)) continue;\r\n    if (!Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"equals\"])(sideobj.vertex1, vertex1)) continue;\r\n    if (polygonindex !== null) {\r\n      if (sideobj.polygonindex !== polygonindex) continue;\r\n    }\r\n    idx = i;\r\n    break;\r\n  }\r\n  if (idx < 0) throw new Error('Assertion failed');\r\n  sideobjs.splice(idx, 1);\r\n  if (sideobjs.length === 0) {\r\n    delete sidemap[sidetag];\r\n  }\r\n  idx = vertextag2sidestart[starttag].indexOf(sidetag);\r\n  if (idx < 0) throw new Error('Assertion failed');\r\n  vertextag2sidestart[starttag].splice(idx, 1);\r\n  if (vertextag2sidestart[starttag].length === 0) {\r\n    delete vertextag2sidestart[starttag];\r\n  }\r\n\r\n  idx = vertextag2sideend[endtag].indexOf(sidetag);\r\n  if (idx < 0) throw new Error('Assertion failed');\r\n  vertextag2sideend[endtag].splice(idx, 1);\r\n  if (vertextag2sideend[endtag].length === 0) {\r\n    delete vertextag2sideend[endtag];\r\n  }\r\n}\r\n\r\n/*\r\n     fixTJunctions:\r\n\r\n     Suppose we have two polygons ACDB and EDGF:\r\n\r\n      A-----B\r\n      |     |\r\n      |     E--F\r\n      |     |  |\r\n      C-----D--G\r\n\r\n     Note that vertex E forms a T-junction on the side BD. In this case some STL slicers will complain\r\n     that the solid is not watertight. This is because the watertightness check is done by checking if\r\n     each side DE is matched by another side ED.\r\n\r\n     This function will return a new solid with ACDB replaced by ACDEB\r\n\r\n     Note that this can create polygons that are slightly non-convex (due to rounding errors). Therefore the result\r\n     should not be used for further Geom3 operations!\r\n*/\r\nconst fixTJunctions = function (polygons) {\r\n  let sidemap = {};\r\n\r\n  // STEP 1\r\n  for (let polygonindex = 0; polygonindex < polygons.length; polygonindex++) {\r\n    let polygon = polygons[polygonindex];\r\n    let numvertices = polygon.length;\r\n    // should be true\r\n    if (numvertices >= 3) {\r\n      let vertex = polygon[0];\r\n      let vertextag = tag(vertex);\r\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\r\n        let nextvertexindex = vertexindex + 1;\r\n        if (nextvertexindex === numvertices) nextvertexindex = 0;\r\n        let nextvertex = polygon[nextvertexindex];\r\n        let nextvertextag = tag(nextvertex);\r\n        let sidetag = vertextag + '/' + nextvertextag;\r\n        let reversesidetag = nextvertextag + '/' + vertextag;\r\n        if (reversesidetag in sidemap) {\r\n          // this side matches the same side in another polygon. Remove from sidemap:\r\n          let ar = sidemap[reversesidetag];\r\n          ar.splice(-1, 1);\r\n          if (ar.length === 0) {\r\n            delete sidemap[reversesidetag];\r\n          }\r\n        } else {\r\n          let sideobj = {\r\n            vertex0: vertex,\r\n            vertex1: nextvertex,\r\n            polygonindex: polygonindex\r\n          };\r\n          if (!(sidetag in sidemap)) {\r\n            sidemap[sidetag] = [sideobj];\r\n          } else {\r\n            sidemap[sidetag].push(sideobj);\r\n          }\r\n        }\r\n        vertex = nextvertex;\r\n        vertextag = nextvertextag;\r\n      }\r\n    }\r\n  }\r\n  // STEP 2\r\n  // now sidemap contains 'unmatched' sides\r\n  // i.e. side AB in one polygon does not have a matching side BA in another polygon\r\n  let vertextag2sidestart = {};\r\n  let vertextag2sideend = {};\r\n  let sidestocheck = {};\r\n  let sidemapisempty = true;\r\n  for (let sidetag in sidemap) {\r\n    sidemapisempty = false;\r\n    sidestocheck[sidetag] = true;\r\n    sidemap[sidetag].map(function (sideobj) {\r\n      let starttag = tag(sideobj.vertex0);\r\n      let endtag = tag(sideobj.vertex1);\r\n      if (starttag in vertextag2sidestart) {\r\n        vertextag2sidestart[starttag].push(sidetag);\r\n      } else {\r\n        vertextag2sidestart[starttag] = [sidetag];\r\n      }\r\n      if (endtag in vertextag2sideend) {\r\n        vertextag2sideend[endtag].push(sidetag);\r\n      } else {\r\n        vertextag2sideend[endtag] = [sidetag];\r\n      }\r\n    });\r\n  }\r\n\r\n  // STEP 3 : if sidemap is not empty\r\n  if (!sidemapisempty) {\r\n    // make a copy of the polygons array, since we are going to modify it:\r\n    polygons = polygons.slice(0);\r\n    while (true) {\r\n      let sidemapisempty = true;\r\n      for (let sidetag in sidemap) {\r\n        sidemapisempty = false;\r\n        sidestocheck[sidetag] = true;\r\n      }\r\n      if (sidemapisempty) break;\r\n      let donesomething = false;\r\n      while (true) {\r\n        let sidetagtocheck = null;\r\n        for (let sidetag in sidestocheck) {\r\n          sidetagtocheck = sidetag;\r\n          break; // FIXME  : say what now ?\r\n        }\r\n        if (sidetagtocheck === null) break; // sidestocheck is empty, we're done!\r\n        let donewithside = true;\r\n        if (sidetagtocheck in sidemap) {\r\n          let sideobjs = sidemap[sidetagtocheck];\r\n          if (sideobjs.length === 0) throw new Error('Assertion failed');\r\n          let sideobj = sideobjs[0];\r\n          for (let directionindex = 0; directionindex < 2; directionindex++) {\r\n            let startvertex = (directionindex === 0) ? sideobj.vertex0 : sideobj.vertex1;\r\n            let endvertex = (directionindex === 0) ? sideobj.vertex1 : sideobj.vertex0;\r\n            let startvertextag = tag(startvertex);\r\n            let endvertextag = tag(endvertex);\r\n            let matchingsides = [];\r\n            if (directionindex === 0) {\r\n              if (startvertextag in vertextag2sideend) {\r\n                matchingsides = vertextag2sideend[startvertextag];\r\n              }\r\n            } else {\r\n              if (startvertextag in vertextag2sidestart) {\r\n                matchingsides = vertextag2sidestart[startvertextag];\r\n              }\r\n            }\r\n            for (let matchingsideindex = 0; matchingsideindex < matchingsides.length; matchingsideindex++) {\r\n              let matchingsidetag = matchingsides[matchingsideindex];\r\n              let matchingside = sidemap[matchingsidetag][0];\r\n              let matchingsidestartvertex = (directionindex === 0) ? matchingside.vertex0 : matchingside.vertex1;\r\n              let matchingsideendvertex = (directionindex === 0) ? matchingside.vertex1 : matchingside.vertex0;\r\n              let matchingsidestartvertextag = tag(matchingsidestartvertex);\r\n              let matchingsideendvertextag = tag(matchingsideendvertex);\r\n              if (matchingsideendvertextag !== startvertextag) throw new Error('Assertion failed');\r\n              if (matchingsidestartvertextag === endvertextag) {\r\n                // matchingside cancels sidetagtocheck\r\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, startvertex, endvertex, null);\r\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, startvertex, null);\r\n                donewithside = false;\r\n                directionindex = 2; // skip reverse direction check\r\n                donesomething = true;\r\n                break;\r\n              } else {\r\n                let startpos = startvertex;\r\n                let endpos = endvertex;\r\n                let checkpos = matchingsidestartvertex;\r\n                // let direction = checkpos.minus(startpos)\r\n                let direction = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"subtract\"])(checkpos, startpos);\r\n                // Now we need to check if endpos is on the line startpos-checkpos:\r\n                // let t = endpos.minus(startpos).dot(direction) / direction.dot(direction)\r\n                let t = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"dot\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"subtract\"])(endpos, startpos), direction) / Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"dot\"])(direction, direction);\r\n                if ((t > 0) && (t < 1)) {\r\n                  let closestpoint = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"add\"])(startpos, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"multiply\"])(direction, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"fromScalar\"])(t)));\r\n                  let distancesquared = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"squaredDistance\"])(closestpoint, endpos);\r\n                  if (distancesquared < (EPS * EPS)) {\r\n                    // Yes it's a t-junction! We need to split matchingside in two:\r\n                    let polygonindex = matchingside.polygonindex;\r\n                    let polygon = polygons[polygonindex];\r\n                    // find the index of startvertextag in polygon:\r\n                    let insertionvertextag = tag(matchingside.vertex1);\r\n                    let insertionvertextagindex = -1;\r\n                    for (let i = 0; i < polygon.length; i++) {\r\n                      if (tag(polygon[i]) === insertionvertextag) {\r\n                        insertionvertextagindex = i;\r\n                        break;\r\n                      }\r\n                    }\r\n                    if (insertionvertextagindex < 0) throw new Error('Assertion failed');\r\n                    // split the side by inserting the vertex:\r\n                    let newvertices = polygon.slice(0);\r\n                    newvertices.splice(insertionvertextagindex, 0, endvertex);\r\n                    let newpolygon = Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"fromPoints\"])(newvertices);\r\n\r\n                    // calculate plane with differents point\r\n                    if (isNaN(Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(newpolygon)[W])) {\r\n                      let found = false;\r\n                      let loop = function (callback) {\r\n                        newpolygon.forEach(function (item) {\r\n                          if (found) return;\r\n                          callback(item);\r\n                        });\r\n                      };\r\n\r\n                      loop(function (a) {\r\n                        loop(function (b) {\r\n                          loop(function (c) {\r\n                            newpolygon.plane = Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__[\"fromPoints\"])(a, b, c);\r\n                            if (!isNaN(Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(newpolygon)[W])) {\r\n                              found = true;\r\n                            }\r\n                          });\r\n                        });\r\n                      });\r\n                    }\r\n                    polygons[polygonindex] = newpolygon;\r\n                    // remove the original sides from our maps\r\n                    // deleteSide(sideobj.vertex0, sideobj.vertex1, null)\r\n                    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend,\r\n                               matchingside.vertex0, matchingside.vertex1, polygonindex);\r\n                    let newsidetag1 = addSide(sidemap, vertextag2sidestart, vertextag2sideend,\r\n                                              matchingside.vertex0, endvertex, polygonindex);\r\n                    let newsidetag2 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex,\r\n                                              matchingside.vertex1, polygonindex);\r\n                    if (newsidetag1 !== null) sidestocheck[newsidetag1] = true;\r\n                    if (newsidetag2 !== null) sidestocheck[newsidetag2] = true;\r\n                    donewithside = false;\r\n                    directionindex = 2; // skip reverse direction check\r\n                    donesomething = true;\r\n                    break;\r\n                  } // if(distancesquared < 1e-10)\r\n                } // if( (t > 0) && (t < 1) )\r\n              } // if(endingstidestartvertextag === endvertextag)\r\n            } // for matchingsideindex\r\n          } // for directionindex\r\n        } // if(sidetagtocheck in sidemap)\r\n        if (donewithside) {\r\n          delete sidestocheck[sidetagtocheck];\r\n        }\r\n      }\r\n      if (!donesomething) break;\r\n    }\r\n  }\r\n\r\n  return polygons;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/fixTJunctions.js?");

/***/ }),

/***/ "../../algorithm/watertight/isWatertightPolygons.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/isWatertightPolygons.js ***!
  \*****************************************************************************************/
/*! exports provided: isWatertightPolygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isWatertightPolygons\", function() { return isWatertightPolygons; });\n/* harmony import */ var _findPolygonsViolations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./findPolygonsViolations */ \"../../algorithm/watertight/findPolygonsViolations.js\");\n\r\n\r\nconst isWatertightPolygons = polygons => Object(_findPolygonsViolations__WEBPACK_IMPORTED_MODULE_0__[\"findPolygonsViolations\"])(polygons).length === 0;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/isWatertightPolygons.js?");

/***/ }),

/***/ "../../algorithm/watertight/main.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/main.js ***!
  \*************************************************************************/
/*! exports provided: isWatertightPolygons, makeWatertight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _isWatertightPolygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isWatertightPolygons */ \"../../algorithm/watertight/isWatertightPolygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isWatertightPolygons\", function() { return _isWatertightPolygons__WEBPACK_IMPORTED_MODULE_0__[\"isWatertightPolygons\"]; });\n\n/* harmony import */ var _makeWatertight__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./makeWatertight */ \"../../algorithm/watertight/makeWatertight.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"makeWatertight\", function() { return _makeWatertight__WEBPACK_IMPORTED_MODULE_1__[\"makeWatertight\"]; });\n\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/main.js?");

/***/ }),

/***/ "../../algorithm/watertight/makeWatertight.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/makeWatertight.js ***!
  \***********************************************************************************/
/*! exports provided: makeWatertight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeWatertight\", function() { return makeWatertight; });\n/* harmony import */ var _fixTJunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fixTJunctions */ \"../../algorithm/watertight/fixTJunctions.js\");\n\r\n\r\nconst makeWatertight = polygons => Object(_fixTJunctions__WEBPACK_IMPORTED_MODULE_0__[\"fixTJunctions\"])(polygons);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/makeWatertight.js?");

/***/ }),

/***/ "../../algorithm/z0polygons/clippingToPolygons.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0polygons/clippingToPolygons.js ***!
  \***************************************************************************************/
/*! exports provided: clippingToPolygons, z0SurfaceToClipping */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clippingToPolygons\", function() { return clippingToPolygons; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"z0SurfaceToClipping\", function() { return z0SurfaceToClipping; });\n// Internal function to massage data for passing to polygon-clipping.\r\nconst clippingToPolygons = (clipping) => {\r\n  const polygonArray = [];\r\n  for (const polygons of clipping) {\r\n    for (const polygon of polygons) {\r\n      polygon.pop();\r\n      polygonArray.push(polygon);\r\n    }\r\n  }\r\n  return polygonArray;\r\n};\r\n\r\nconst z0SurfaceToClipping = (z0Surface) => {\r\n  return [z0Surface.map(z0Polygon => z0Polygon.map(([x = 0, y = 0]) => [x, y]))];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0polygons/clippingToPolygons.js?");

/***/ }),

/***/ "../../algorithm/z0polygons/difference.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0polygons/difference.js ***!
  \*******************************************************************************/
/*! exports provided: difference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return difference; });\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _clippingToPolygons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clippingToPolygons */ \"../../algorithm/z0polygons/clippingToPolygons.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! polygon-clipping */ \"../../node_modules/polygon-clipping/dist/polygon-clipping.umd.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(polygon_clipping__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\n\r\n/**\r\n * Return a surface representing the difference between the first surface\r\n *   and the rest of the surfaces.\r\n * The difference of no surfaces is the empty surface.\r\n * The difference of one surface is that surface.\r\n * @param {Array<surface>} surfaces - the surfaces.\r\n * @returns {surface} - the resulting surface\r\n * @example\r\n * let C = difference(A, B)\r\n * @example\r\n * +-------+            +-------+\r\n * |       |            |   C   |\r\n * |   A   |            |       |\r\n * |    +--+----+   =   |    +--+\r\n * +----+--+    |       +----+\r\n *      |   B   |\r\n *      |       |\r\n *      +-------+\r\n */\r\nconst difference = (baseSurface, ...surfaces) => {\r\n  if (surfaces.length === 0) {\r\n    return baseSurface;\r\n  }\r\n  const surfaceClipping = Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_1__[\"z0SurfaceToClipping\"])(Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(baseSurface));\r\n  const subtractionClipping = surfaces.map(surface => Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_1__[\"z0SurfaceToClipping\"])(Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(surface)));\r\n  const outputClipping = Object(polygon_clipping__WEBPACK_IMPORTED_MODULE_2__[\"difference\"])(surfaceClipping, ...subtractionClipping);\r\n  const outputPaths = Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_1__[\"clippingToPolygons\"])(outputClipping);\r\n  return outputPaths;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0polygons/difference.js?");

/***/ }),

/***/ "../../algorithm/z0polygons/intersection.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0polygons/intersection.js ***!
  \*********************************************************************************/
/*! exports provided: intersection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return intersection; });\n/* harmony import */ var _clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clippingToPolygons */ \"../../algorithm/z0polygons/clippingToPolygons.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! polygon-clipping */ \"../../node_modules/polygon-clipping/dist/polygon-clipping.umd.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(polygon_clipping__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\r\n\r\n/**\r\n * Produce a surface that is the intersection of all provided surfaces.\r\n * The intersection of no surfaces is the empty surface.\r\n * The intersection of one surface is that surface.\r\n * @param {Array<surface>} surfaces - the surfaces to intersect.\r\n * @returns {surface} the intersection of surfaces.\r\n * @example\r\n * let C = difference(A, B)\r\n * @example\r\n * +-------+            +-------+\r\n * |       |            |   C   |\r\n * |   A   |            |       |\r\n * |    +--+----+   =   |    +--+\r\n * +----+--+    |       +----+\r\n *      |   B   |\r\n *      |       |\r\n *      +-------+\r\n */\r\nconst intersection = (...z0Surfaces) => {\r\n  if (z0Surfaces.length === 0) {\r\n    return [];\r\n  }\r\n  return Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__[\"clippingToPolygons\"])(Object(polygon_clipping__WEBPACK_IMPORTED_MODULE_1__[\"intersection\"])(...z0Surfaces.map(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__[\"z0SurfaceToClipping\"])));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0polygons/intersection.js?");

/***/ }),

/***/ "../../algorithm/z0polygons/main.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0polygons/main.js ***!
  \*************************************************************************/
/*! exports provided: difference, intersection, union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _difference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./difference */ \"../../algorithm/z0polygons/difference.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return _difference__WEBPACK_IMPORTED_MODULE_0__[\"difference\"]; });\n\n/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intersection */ \"../../algorithm/z0polygons/intersection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return _intersection__WEBPACK_IMPORTED_MODULE_1__[\"intersection\"]; });\n\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./union */ \"../../algorithm/z0polygons/union.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return _union__WEBPACK_IMPORTED_MODULE_2__[\"union\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0polygons/main.js?");

/***/ }),

/***/ "../../algorithm/z0polygons/union.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0polygons/union.js ***!
  \**************************************************************************/
/*! exports provided: union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return union; });\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _clippingToPolygons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clippingToPolygons */ \"../../algorithm/z0polygons/clippingToPolygons.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! polygon-clipping */ \"../../node_modules/polygon-clipping/dist/polygon-clipping.umd.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(polygon_clipping__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\n\r\n/**\r\n * Produces a surface that is the union of all provided surfaces.\r\n * The union of no surfaces is the empty surface.\r\n * The union of one surface is that surface.\r\n * @param {Array<Z0Surface>} surfaces - the z0 surfaces to union.\r\n * @returns {Z0Surface} the resulting z0 surface.\r\n */\r\nconst union = (...surfaces) => {\r\n  if (surfaces.length === 0) {\r\n    return [];\r\n  }\r\n  const clipping = surfaces.map(surface => Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_1__[\"z0SurfaceToClipping\"])(Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(surface)));\r\n  const result = Object(polygon_clipping__WEBPACK_IMPORTED_MODULE_2__[\"union\"])(...clipping);\r\n  return Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_1__[\"clippingToPolygons\"])(result);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0polygons/union.js?");

/***/ }),

/***/ "../../api/v1/Assembly.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/Assembly.js ***!
  \***************************************************************/
/*! exports provided: Assembly, unionLazily */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Assembly\", function() { return Assembly; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unionLazily\", function() { return unionLazily; });\n/* harmony import */ var _jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/geometry-assembly */ \"../../geometry/assembly/main.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n\r\n\r\n\r\nclass Assembly {\r\n  as (tag) {\r\n    const tags = this.geometry.getProperty('tags', []);\r\n    return Assembly.fromGeometry(this.geometry.withProperty('tags', [tag, ...tags]));\r\n  }\r\n\r\n  constructor (geometry) {\r\n    this.geometry = geometry || Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_0__[\"fromGeometries\"])({}, []);\r\n  }\r\n\r\n  difference (...shapes) {\r\n    return Assembly.fromGeometry(this.geometry.difference(...shapes.map(toAssembly)));\r\n  }\r\n\r\n  intersection (...shapes) {\r\n    return Assembly.fromGeometry(this.geometry.intersection(...shapes.map(toAssembly)));\r\n  }\r\n\r\n  material (material) {\r\n    return Assembly.fromGeometry(this.geometry.withProperty('material', material));\r\n  }\r\n\r\n  toGeometry () {\r\n    return this.geometry;\r\n  }\r\n\r\n  toPaths (options = {}) {\r\n    return Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"canonicalize\"])(this.geometry.toPaths(options));\r\n  }\r\n\r\n  toPoints (options = {}) {\r\n    return Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"toPoints\"])(options, this.toPaths(options));\r\n  }\r\n\r\n  toPolygons (options = {}) {\r\n    return this.toPaths(options);\r\n  }\r\n\r\n  transform (matrix) {\r\n    return Assembly.fromGeometry(this.geometry.transform(matrix));\r\n  }\r\n\r\n  union (...shapes) {\r\n    return Assembly.fromGeometry(this.geometry.union(...shapes.map(toAssembly)));\r\n  }\r\n}\r\n\r\nconst toAssembly = (shape) => (shape instanceof Assembly) ? shape : Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_0__[\"fromGeometries\"])({}, [shape]);\r\n\r\nconst unionLazily = (shape, ...shapes) => {\r\n  return Assembly.fromGeometry(Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_0__[\"fromGeometries\"])({}, [shape.toGeometry()]).union(...shapes.map(shape => shape.toGeometry())));\r\n};\r\n\r\n// FIX: This needs clear documentation.\r\nAssembly.fromGeometry = (geometry) => new Assembly(geometry);\r\nAssembly.fromGeometries = (geometries) => Assembly.fromGeometry(Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_0__[\"fromGeometries\"])({}, geometries));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/Assembly.js?");

/***/ }),

/***/ "../../api/v1/CAG.js":
/*!**********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/CAG.js ***!
  \**********************************************************/
/*! exports provided: CAG */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CAG\", function() { return CAG; });\n/* harmony import */ var _Assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assembly */ \"../../api/v1/Assembly.js\");\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n/* harmony import */ var _jsxcad_geometry_surf2pc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/geometry-surf2pc */ \"../../geometry/surf2pc/main.js\");\n/* harmony import */ var _writePdf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./writePdf */ \"../../api/v1/writePdf.js\");\n// FIX: Add interface to change default surface geometry.\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass CAG {\r\n  as (tag) {\r\n    return _Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].fromGeometries([this.geometry]).as(tag);\r\n  }\r\n\r\n  constructor (geometry) {\r\n    this.geometry = geometry || Object(_jsxcad_geometry_surf2pc__WEBPACK_IMPORTED_MODULE_2__[\"fromPaths\"])({}, []);\r\n  }\r\n\r\n  material (material) {\r\n    return _Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].fromGeometries([this.geometry]).material(material);\r\n  }\r\n\r\n  transform (matrix) {\r\n    return CAG.fromGeometry(this.geometry.transform(matrix));\r\n  }\r\n\r\n  toPaths (options = {}) {\r\n    return this.toPolygons(options);\r\n  }\r\n\r\n  toGeometry () {\r\n    return this.geometry;\r\n  }\r\n\r\n  toPolygons (options) {\r\n    return this.geometry.toPaths(options);\r\n  }\r\n\r\n  writePdf (options = {}) {\r\n    Object(_writePdf__WEBPACK_IMPORTED_MODULE_3__[\"writePdf\"])(options, this);\r\n    return this;\r\n  }\r\n}\r\n\r\nCAG.fromGeometry = (geometry) => new CAG(geometry);\r\nCAG.fromPaths = (paths) => CAG.fromGeometry(Object(_jsxcad_geometry_surf2pc__WEBPACK_IMPORTED_MODULE_2__[\"fromPaths\"])({}, Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_1__[\"canonicalize\"])(paths)));\r\n\r\n// BREAKING: Direction was not significant for CAG.fromPoints, but now is.\r\nCAG.fromPoints = (points) => CAG.fromPaths([points]);\r\nCAG.fromPolygons = (polygons) => CAG.fromPaths(polygons);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/CAG.js?");

/***/ }),

/***/ "../../api/v1/CSG.js":
/*!**********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/CSG.js ***!
  \**********************************************************/
/*! exports provided: CSG */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CSG\", function() { return CSG; });\n/* harmony import */ var _jsxcad_geometry_solid3bsp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/geometry-solid3bsp */ \"../../geometry/solid3bsp/main.js\");\n/* harmony import */ var _Assembly__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Assembly */ \"../../api/v1/Assembly.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _toGeometry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./toGeometry */ \"../../api/v1/toGeometry.js\");\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n// FIX: Get a better way to swap these.\r\n\r\n// import { fromPaths } from '@jsxcad/geometry-solid3evan';\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass CSG {\r\n  as (tag) {\r\n    return _Assembly__WEBPACK_IMPORTED_MODULE_1__[\"Assembly\"].fromGeometries([this.geometry]).as(tag);\r\n  }\r\n\r\n  constructor (geometry) {\r\n    this.geometry = geometry || Object(_jsxcad_geometry_solid3bsp__WEBPACK_IMPORTED_MODULE_0__[\"fromPaths\"])({}, []);\r\n  }\r\n\r\n  difference (...shapes) {\r\n    return CSG.fromGeometry(this.geometry.difference(...shapes.map(_toGeometry__WEBPACK_IMPORTED_MODULE_3__[\"toGeometry\"])));\r\n  }\r\n\r\n  intersection (...shapes) {\r\n    return CSG.fromGeometry(this.geometry.intersection(...shapes.map(_toGeometry__WEBPACK_IMPORTED_MODULE_3__[\"toGeometry\"])));\r\n  }\r\n\r\n  material (material) {\r\n    return _Assembly__WEBPACK_IMPORTED_MODULE_1__[\"Assembly\"].fromGeometries([this.geometry]).material(material);\r\n  }\r\n\r\n  transform (matrix) {\r\n    return CSG.fromGeometry(this.geometry.transform(matrix));\r\n  }\r\n\r\n  toGeometry () {\r\n    return this.geometry;\r\n  }\r\n\r\n  toPaths (options) {\r\n    const paths = this.geometry.toPaths(options);\r\n    // if (!isWatertightPolygons(paths)) throw Error('not watertight');\r\n    return paths;\r\n  }\r\n\r\n  toPoints (options) {\r\n    return Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_2__[\"toPoints\"])(options, this.toPaths(options));\r\n  }\r\n\r\n  toPolygons (options) {\r\n    return this.toPaths(options);\r\n  }\r\n\r\n  union (...shapes) {\r\n    return CSG.fromGeometry(this.geometry.union(...shapes.map(_toGeometry__WEBPACK_IMPORTED_MODULE_3__[\"toGeometry\"])));\r\n  }\r\n}\r\n\r\nCSG.fromGeometry = (geometry) => new CSG(geometry);\r\nCSG.fromPaths = (paths) => {\r\n  const triangles = Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_2__[\"canonicalize\"])(Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_4__[\"toTriangles\"])({}, paths));\r\n  return CSG.fromGeometry(Object(_jsxcad_geometry_solid3bsp__WEBPACK_IMPORTED_MODULE_0__[\"fromPaths\"])({}, triangles));\r\n};\r\nCSG.fromPolygons = CSG.fromPaths;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/CSG.js?");

/***/ }),

/***/ "../../api/v1/Path2D.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/Path2D.js ***!
  \*************************************************************/
/*! exports provided: Path2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Path2D\", function() { return Path2D; });\n/* harmony import */ var _Assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assembly */ \"../../api/v1/Assembly.js\");\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_geometry_paths__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/geometry-paths */ \"../../geometry/paths/main.js\");\n// import { buildCircleArc } from '@jsxcad/algorithm-curve';\r\n\r\n\r\n\r\n\r\n\r\n// FIX: Incorrectly named.\r\nclass Path2D {\r\n  as (tag) {\r\n    return _Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].fromGeometries([this.geometry]).as(tag);\r\n  }\r\n\r\n  constructor (points = [], closed = false, geometry) {\r\n    if (geometry !== undefined) {\r\n      this.geometry = geometry;\r\n    } else {\r\n      if (closed) {\r\n        this.geometry = Object(_jsxcad_geometry_paths__WEBPACK_IMPORTED_MODULE_3__[\"fromPaths\"])({}, [[points]]);\r\n      } else {\r\n        this.geometry = Object(_jsxcad_geometry_paths__WEBPACK_IMPORTED_MODULE_3__[\"fromPaths\"])({}, [[null, ...points]]);\r\n      }\r\n    }\r\n  }\r\n\r\n  concat (otherpath) {\r\n    if (this.isClosed() || otherpath.isClosed()) {\r\n      throw new Error('Paths must not be closed');\r\n    }\r\n    // Rewrite the last of the paths.\r\n    return Path2D.fromPaths([...Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_2__[\"butLast\"])(this.toPaths()),\r\n                             Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__[\"concatenate\"])(this.toPath(), otherpath.toPath())]);\r\n  }\r\n\r\n  /**\r\n   * Get the points that make up the path.\r\n   * note that this is current internal list of points, not an immutable copy.\r\n   * @returns {Vector2[]} array of points the make up the path\r\n   */\r\n  getPoints () {\r\n    const points = [];\r\n    this.toPath().forEach((point, index) => {\r\n      if (point !== null || index !== 0) {\r\n        points.push([point[0], point[1]]);\r\n      }\r\n    });\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Append an point to the end of the path.\r\n   * @param {Vector2D} point - point to append\r\n   * @returns {Path2D} new Path2D object (not closed)\r\n   */\r\n  appendPoint (point) {\r\n    return this.concat(new Path2D([point]));\r\n  }\r\n\r\n  /**\r\n   * Append a list of points to the end of the path.\r\n   * @param {Vector2D[]} points - points to append\r\n   * @returns {Path2D} new Path2D object (not closed)\r\n   */\r\n  appendPoints (points) {\r\n    return this.concat(new Path2D(points));\r\n  }\r\n\r\n  close () {\r\n    return Path2D.fromPaths([...Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_2__[\"butLast\"])(this.toPaths()), this.getPoints()]);\r\n  }\r\n\r\n  /**\r\n   * Determine if the path is a closed or not.\r\n   * @returns {Boolean} true when the path is closed, otherwise false\r\n   */\r\n  isClosed () {\r\n    return Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__[\"isClosed\"])(Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_2__[\"last\"])(this.toPaths()));\r\n  }\r\n\r\n  /**\r\n   * Determine the overall clockwise or anti-clockwise turn of a path.\r\n   * See: http://mathworld.wolfram.com/PolygonArea.html\r\n   * @returns {String} One of ['clockwise', 'counter-clockwise', 'straight'].\r\n   */\r\n  getTurn () {\r\n    const area = Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__[\"measureArea\"])(this.toPath());\r\n    if (area > 0) {\r\n      return 'clockwise';\r\n    } else if (area < 0) {\r\n      return 'counter-clockwise';\r\n    } else {\r\n      return 'straight';\r\n    }\r\n  }\r\n\r\n  // Extrude the path by following it with a rectangle (upright, perpendicular to the path direction)\r\n  // Returns a CSG solid\r\n  //   width: width of the extrusion, in the z=0 plane\r\n  //   height: height of the extrusion in the z direction\r\n  //   resolution: number of segments per 360 degrees for the curve in a corner\r\n  rectangularExtrude (width, height, resolution) {\r\n    return Error('Not yet implemented');\r\n  }\r\n\r\n  // Expand the path to a CAG\r\n  // This traces the path with a circle with radius pathradius\r\n  expandToCAG (pathradius, resolution) {\r\n    return Error('Not yet implemented');\r\n  }\r\n\r\n  innerToCAG () {\r\n    return Error('Not yet implemented');\r\n  }\r\n\r\n  material (material) {\r\n    return _Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].fromGeometries([this.geometry]).material(material);\r\n  }\r\n\r\n  toSurface () {\r\n    return Error('Not yet implemented');\r\n  }\r\n\r\n  toGeometry () {\r\n    return this.geometry;\r\n  }\r\n\r\n  toPath () {\r\n    return Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_2__[\"last\"])(this.toPaths());\r\n  }\r\n\r\n  toPaths () {\r\n    return this.geometry.toPaths({});\r\n  }\r\n\r\n  transform (matrix4x4) {\r\n    return Path2D.fromGeometry(this.geometry.transform(matrix4x4));\r\n  }\r\n}\r\n\r\n// Path2D.arc = (...params) => new Path2D(buildCircleArc(...params));\r\nPath2D.fromGeometry = (geometry) => new Path2D(undefined, undefined, geometry);\r\nPath2D.fromPaths = (paths) => new Path2D(undefined, undefined, Object(_jsxcad_geometry_paths__WEBPACK_IMPORTED_MODULE_3__[\"fromPaths\"])({}, Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_2__[\"canonicalize\"])(paths)));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/Path2D.js?");

/***/ }),

/***/ "../../api/v1/acos.js":
/*!***********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/acos.js ***!
  \***********************************************************/
/*! exports provided: acos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"acos\", function() { return acos; });\nconst acos = (a) => Math.acos(a) / (Math.PI * 2) * 360;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/acos.js?");

/***/ }),

/***/ "../../api/v1/assert.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/assert.js ***!
  \*************************************************************/
/*! exports provided: assertBoolean, assertEmpty, assertSingle, assertNumber, assertNumberTriple */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assertBoolean\", function() { return assertBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assertEmpty\", function() { return assertEmpty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assertSingle\", function() { return assertSingle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assertNumber\", function() { return assertNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assertNumberTriple\", function() { return assertNumberTriple; });\nconst assertBoolean = (value) => {\r\n  if (typeof value !== 'boolean') {\r\n    throw Error(`Not a boolean: ${value}`);\r\n  }\r\n};\r\n\r\nconst assertEmpty = (value) => {\r\n  if (value.length === undefined) {\r\n    throw Error(`Has no length: ${value}`);\r\n  }\r\n\r\n  if (value.length !== 0) {\r\n    throw Error(`Is not empty: ${value}`);\r\n  }\r\n};\r\n\r\nconst assertSingle = (value) => {\r\n  if (value.length === undefined) {\r\n    throw Error(`Has no length: ${value}`);\r\n  }\r\n\r\n  if (value.length !== 1) {\r\n    throw Error(`Is not single: ${value}`);\r\n  }\r\n};\r\n\r\nconst assertNumber = (value) => {\r\n  if (typeof value !== 'number') {\r\n    throw Error(`Not a number: ${value}`);\r\n  }\r\n};\r\n\r\nconst assertNumberTriple = (value) => {\r\n  if (value.length === undefined) {\r\n    throw Error(`Has no length: ${value}`);\r\n  }\r\n\r\n  if (value.length !== 3) {\r\n    throw Error(`Is not a triple: ${value}`);\r\n  }\r\n  for (const v of value) {\r\n    assertNumber(v);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/assert.js?");

/***/ }),

/***/ "../../api/v1/circle.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/circle.js ***!
  \*************************************************************/
/*! exports provided: circle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"circle\", function() { return circle; });\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n\r\n\r\n\r\n\r\nconst buildCircle = ({ r = 1, fn = 32, center = false }) =>\r\n  _CAG__WEBPACK_IMPORTED_MODULE_0__[\"CAG\"].fromPoints(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__[\"buildRegularPolygon\"])({ edges: fn })).scale(r);\r\n\r\n/**\r\n *\r\n * circle();                        // openscad like\r\n * circle(1);\r\n * circle({r: 2, fn:5});            // fn = number of segments to approximate the circle\r\n * circle({r: 3, center: true});    // center: false (default)\r\n *\r\n */\r\nconst circle = (...params) => {\r\n  // circle({ r: 3, center: true, fn: 5 });\r\n  try {\r\n    const { r, center = false, fn = 32 } = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertNumber\"])(r);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertNumber\"])(fn);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertBoolean\"])(center);\r\n    return buildCircle({ r: r, fn: fn, center: center });\r\n  } catch (e) {}\r\n\r\n  // circle(1);\r\n  try {\r\n    const [r] = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertNumber\"])(r);\r\n    return buildCircle({ r: r });\r\n  } catch (e) {}\r\n\r\n  // circle(1);\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertEmpty\"])(params);\r\n    return buildCircle({});\r\n  } catch (e) {}\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/circle.js?");

/***/ }),

/***/ "../../api/v1/clearScreen.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/clearScreen.js ***!
  \******************************************************************/
/*! exports provided: clearScreen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearScreen\", function() { return clearScreen; });\nconst clearScreen = ({ path }) => {\r\n    //Parse the path\r\n    var [target , targetDiv, shapeID ]  = path.split('/');\r\n    \r\n    //Clear screen if it exists at path\r\n    var threeInstance = document.getElementById(targetDiv).threeScreen;\r\n    \r\n    //Add a viewer to the path if there isn't one already\r\n    if(typeof threeInstance != 'undefined'){\r\n        if(shapeID == '*'){\r\n            threeInstance.clearScreenAll();\r\n        }\r\n        else{\r\n            threeInstance.clearScreenById(shapeID);\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/clearScreen.js?");

/***/ }),

/***/ "../../api/v1/cos.js":
/*!**********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cos.js ***!
  \**********************************************************/
/*! exports provided: cos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cos\", function() { return cos; });\nconst cos = (a) => Math.cos(a / 360 * Math.PI * 2);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cos.js?");

/***/ }),

/***/ "../../api/v1/crossSection.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/crossSection.js ***!
  \*******************************************************************/
/*! exports provided: crossSection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"crossSection\", function() { return crossSection; });\n/* harmony import */ var _Assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assembly */ \"../../api/v1/Assembly.js\");\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n!(function webpackMissingModule() { var e = new Error(\"Cannot find module '@jsxcad/math-plane'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n!(function webpackMissingModule() { var e = new Error(\"Cannot find module '@jsxcad/algorithm-z0polygons'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst crossSection = ({ z = 0 } = {}, solid) => {\r\n  const triangles = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_3__[\"toTriangles\"])({}, solid.toPaths());\r\n  const paths = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_3__[\"cutTrianglesByPlane\"])(!(function webpackMissingModule() { var e = new Error(\"Cannot find module '@jsxcad/math-plane'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())([0, 0, z], [1, 0, z], [0, 1, z]), triangles);\r\n  const polygons = !(function webpackMissingModule() { var e = new Error(\"Cannot find module '@jsxcad/algorithm-z0polygons'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(...paths.map(path => [path]));\r\n  return _CAG__WEBPACK_IMPORTED_MODULE_1__[\"CAG\"].fromPolygons(polygons);\r\n};\r\n\r\nconst method = function (options) { return crossSection(options, this); };\r\n\r\n_Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].prototype.crossSection = method;\r\n_CSG__WEBPACK_IMPORTED_MODULE_2__[\"CSG\"].prototype.crossSection = method;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/crossSection.js?");

/***/ }),

/***/ "../../api/v1/cube.js":
/*!***********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cube.js ***!
  \***********************************************************/
/*! exports provided: cube */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cube\", function() { return cube; });\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n\r\n\r\n\r\n\r\nconst edgeScale = Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"regularPolygonEdgeLengthToRadius\"])(1, 4);\r\n\r\nconst buildCube = ({ center = false, centerPosition, length = 1, width = 1, height = 1,\r\n                     round = false, roundingRadius, roundingFaces }) => {\r\n  let cube = _CSG__WEBPACK_IMPORTED_MODULE_0__[\"CSG\"].fromPolygons(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"buildRegularPrism\"])({ edges: 4 }))\r\n      .rotateZ(45)\r\n      .scale([edgeScale, edgeScale, 1]);\r\n  if (center === false && centerPosition === undefined) {\r\n    cube = cube.translate([0.5, 0.5, 0.5]);\r\n  }\r\n  if (round) {\r\n    cube = cube.scale([length - roundingRadius * 2, width - roundingRadius * 2, height - roundingRadius * 2]);\r\n    cube = _CSG__WEBPACK_IMPORTED_MODULE_0__[\"CSG\"].fromPolygons(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"buildRoundedConvexHull\"])({ roundingRadius: roundingRadius, roundingFaces: roundingFaces },\r\n                                                   cube.toPoints({})));\r\n  } else {\r\n    cube = cube.scale([length, width, height]);\r\n  }\r\n  if (centerPosition) {\r\n    cube = cube.translate(centerPosition);\r\n  }\r\n  return cube;\r\n};\r\n\r\nconst decode = (params) => {\r\n  // cube(10)\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertSingle\"])(params);\r\n    const [ size ] = params;\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(size);\r\n    return { center: false, length: size, width: size, height: size };\r\n  } catch (e) {}\r\n\r\n  // cube()\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertEmpty\"])(params);\r\n    return { center: false };\r\n  } catch (e) {}\r\n\r\n  const { roundRadius = undefined, resolution = 8 } = params[0];\r\n  const roundParams = { round: false };\r\n  if (typeof roundRadius === 'number' && typeof resolution === 'number') {\r\n    Object.assign(roundParams, { round: true, roundingRadius: roundRadius, roundingFaces: resolution });\r\n  }\r\n\r\n  const decodeVariants = () => {\r\n    // cube({ center: [0, 0, 0], radius: 1 })\r\n    try {\r\n      const { center, radius } = params[0];\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumberTriple\"])(center);\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(radius);\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertSingle\"])(params);\r\n      return { centerPosition: center,\r\n               length: radius,\r\n               width: radius,\r\n               height: radius };\r\n    } catch (e) {}\r\n\r\n    // cube({ radius: 1 })\r\n    try {\r\n      const { radius } = params[0];\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(radius);\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertSingle\"])(params);\r\n      return { length: radius,\r\n               width: radius,\r\n               height: radius };\r\n    } catch (e) {}\r\n\r\n    // cube({ corner1: [4, 4, 4], corner2: [5, 4, 2] });\r\n    try {\r\n      const { corner1, corner2 } = params[0];\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumberTriple\"])(corner1);\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumberTriple\"])(corner2);\r\n      const [c1x, c1y, c1z] = corner1;\r\n      const [c2x, c2y, c2z] = corner2;\r\n      return {\r\n        length: c2x - c1x,\r\n        width: c2y - c1y,\r\n        height: c2z - c1z,\r\n        centerPosition: [ (c1x + c2x) / 2, (c1y + c2y) / 2, (c1z + c2z) / 2 ]\r\n      };\r\n    } catch (e) {}\r\n\r\n    // cube({size: [1,2,3], center: false });\r\n    try {\r\n      const { size, center = false } = params[0];\r\n      const [length, width, height] = size;\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(length);\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(width);\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(height);\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertSingle\"])(params);\r\n      return { center: center, length: length, width: width, height: height };\r\n    } catch (e) {}\r\n\r\n    // cube({ size: 1, center: false });\r\n    try {\r\n      const { size, center = false } = params[0];\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(size);\r\n      Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertSingle\"])(params);\r\n      return { center: center, length: size, width: size, height: size };\r\n    } catch (e) {}\r\n\r\n    return undefined;\r\n  };\r\n\r\n  const decoded = decodeVariants();\r\n  if (!decoded) {\r\n    if (roundParams.round) {\r\n      return roundParams;\r\n    }\r\n    throw Error(`Unsupported interface for cube: ${JSON.stringify(params)}`);\r\n  }\r\n  return Object.assign(decoded, roundParams);\r\n};\r\n\r\n/**\r\n *\r\n * cube(); // openscad like\r\n * cube(1);\r\n * cube({size: 1});\r\n * cube({size: [1,2,3]});\r\n * cube({size: 1, center: true}); // default center:false\r\n * cube({size: 1, center: [false,false,false]}); // individual axis center true or false\r\n * cube({size: [1,2,3] });\r\n * cube({ center: [0, 0, 0], radius: [1, 1, 1] });\r\n * cube({ corner1: [4, 4, 4], corner2: [5, 4, 2] });\r\n */\r\nconst cube = (...params) => buildCube(decode(params));\r\n\r\n// Install support for CSG.cube and CSG.roundedCube.\r\n_CSG__WEBPACK_IMPORTED_MODULE_0__[\"CSG\"].cube = cube;\r\n_CSG__WEBPACK_IMPORTED_MODULE_0__[\"CSG\"].roundedCube = cube;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cube.js?");

/***/ }),

/***/ "../../api/v1/cylinder.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cylinder.js ***!
  \***************************************************************/
/*! exports provided: cylinder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cylinder\", function() { return cylinder; });\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n\r\n\r\n\r\n\r\nconst buildCylinder = ({ r1 = 1, r2 = 1, h = 1, edges = 32 }) => {\r\n  return _CSG__WEBPACK_IMPORTED_MODULE_0__[\"CSG\"].fromPolygons(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"buildRegularPrism\"])({ edges: edges })).scale([r1, r1, h]);\r\n};\r\n\r\n/**\r\n *\r\n * cylinder();              // unit cylinder\r\n * cylinder({r: 1, h: 10});                 // openscad like\r\n * cylinder({d: 1, h: 10});\r\n * cylinder({r: 1, h: 10, center: true});   // default: center:false\r\n * cylinder({r: 1, h: 10, center: [true, true, false]});  // individual x,y,z center flags\r\n * cylinder({r: 1, h: 10, round: true});\r\n * cylinder({r1: 3, r2: 0, h: 10});\r\n * cylinder({d1: 1, d2: 0.5, h: 10});\r\n * cylinder({start: [0,0,0], end: [0,0,10], r1: 1, r2: 2, fn: 50});\r\n *\r\n */\r\nconst cylinder = (...params) => {\r\n  // cylinder()\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertEmpty\"])(params);\r\n    return buildCylinder({});\r\n  } catch (e) {}\r\n\r\n  // cylinder({r: 1, h: 10, center: true});\r\n  try {\r\n    const { h, r, fn = 32 } = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(h);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(r);\r\n    return buildCylinder({ r1: r, r2: r, h: h, edges: fn });\r\n  } catch (e) {}\r\n\r\n  // cylinder({ r1: 1, r2: 2, h: 10, center: true});\r\n  try {\r\n    const { h, r1, r2, fn = 32 } = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(h);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(r1);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(r2);\r\n    return buildCylinder({ r1: r1, r2: r2, h: h, edges: fn });\r\n  } catch (e) {}\r\n\r\n  throw Error(`Unsupported interface for cylinder: ${JSON.stringify(params)}`);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cylinder.js?");

/***/ }),

/***/ "../../api/v1/difference.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/difference.js ***!
  \*****************************************************************/
/*! exports provided: difference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return difference; });\n/* harmony import */ var _flatten__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flatten */ \"../../api/v1/flatten.js\");\n\r\n\r\nconst difference = (...params) => {\r\n  const [shape, ...shapes] = Object(_flatten__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"])(params);\r\n  return shape.difference(...shapes);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/difference.js?");

/***/ }),

/***/ "../../api/v1/extrude.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/extrude.js ***!
  \**************************************************************/
/*! exports provided: extrude */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extrude\", function() { return extrude; });\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n\r\n\r\n\r\n\r\nconst extrude = ({ height }, paths) => {\r\n  return Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"extrudeLinear\"])({ height: height }, paths);\r\n};\r\n\r\n_CAG__WEBPACK_IMPORTED_MODULE_0__[\"CAG\"].prototype.extrude = function (options = {}) {\r\n  return _CSG__WEBPACK_IMPORTED_MODULE_1__[\"CSG\"].fromPolygons(extrude(options, this.toPaths()));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/extrude.js?");

/***/ }),

/***/ "../../api/v1/flatten.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/flatten.js ***!
  \**************************************************************/
/*! exports provided: flatten */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flatten\", function() { return flatten; });\nconst walk = (array, emit) => array.forEach(item => (item instanceof Array) ? walk(item, emit) : emit(item));\r\n\r\nconst flatten = (array) => {\r\n  const flattened = [];\r\n  walk(array, item => flattened.push(item));\r\n  return flattened;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/flatten.js?");

/***/ }),

/***/ "../../api/v1/hsl2rgb.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/hsl2rgb.js ***!
  \**************************************************************/
/*! exports provided: hsl2rgb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hsl2rgb\", function() { return hsl2rgb; });\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n/* harmony import */ var _jsxcad_algorithm_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-color */ \"../../algorithm/color/main.js\");\n\r\n\r\n\r\nconst hsl2rgb = (...params) => {\r\n  try {\r\n    const [hue, saturation, brightness] = params;\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(hue);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(saturation);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(brightness);\r\n    return Object(_jsxcad_algorithm_color__WEBPACK_IMPORTED_MODULE_1__[\"hslToRgb\"])([hue, saturation, brightness]);\r\n  } catch (e) {}\r\n\r\n  try {\r\n    const [hue, saturation, brightness] = params[0];\r\n    return Object(_jsxcad_algorithm_color__WEBPACK_IMPORTED_MODULE_1__[\"hslToRgb\"])([hue, saturation, brightness]);\r\n  } catch (e) {}\r\n\r\n  throw Error(`Unsupported interface for hsl2rgb: ${JSON.stringify(params)}`);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/hsl2rgb.js?");

/***/ }),

/***/ "../../api/v1/intersection.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/intersection.js ***!
  \*******************************************************************/
/*! exports provided: intersection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return intersection; });\n/* harmony import */ var _flatten__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flatten */ \"../../api/v1/flatten.js\");\n\r\n\r\nconst intersection = (...params) => {\r\n  const [shape, ...shapes] = Object(_flatten__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"])(params);\r\n  return shape.intersection(...shapes);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/intersection.js?");

/***/ }),

/***/ "../../api/v1/main.js":
/*!***********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/main.js ***!
  \***********************************************************/
/*! exports provided: CSG, Path2D, acos, circle, clearScreen, crossSection, cos, cube, cylinder, difference, extrude, hsl2rgb, intersection, loadFont, max, polyhedron, rotate, rotateX, rotateY, rotateZ, scale, sin, sphere, sqrt, square, text, translate, union, writePaths, writePdf, writeScreen, writeShape, writeStl, writeThreejsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CSG\", function() { return _CSG__WEBPACK_IMPORTED_MODULE_0__[\"CSG\"]; });\n\n/* harmony import */ var _Path2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Path2D */ \"../../api/v1/Path2D.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Path2D\", function() { return _Path2D__WEBPACK_IMPORTED_MODULE_1__[\"Path2D\"]; });\n\n/* harmony import */ var _acos__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./acos */ \"../../api/v1/acos.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"acos\", function() { return _acos__WEBPACK_IMPORTED_MODULE_2__[\"acos\"]; });\n\n/* harmony import */ var _circle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./circle */ \"../../api/v1/circle.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"circle\", function() { return _circle__WEBPACK_IMPORTED_MODULE_3__[\"circle\"]; });\n\n/* harmony import */ var _clearScreen__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./clearScreen */ \"../../api/v1/clearScreen.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"clearScreen\", function() { return _clearScreen__WEBPACK_IMPORTED_MODULE_4__[\"clearScreen\"]; });\n\n/* harmony import */ var _cos__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cos */ \"../../api/v1/cos.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cos\", function() { return _cos__WEBPACK_IMPORTED_MODULE_5__[\"cos\"]; });\n\n/* harmony import */ var _cube__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cube */ \"../../api/v1/cube.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cube\", function() { return _cube__WEBPACK_IMPORTED_MODULE_6__[\"cube\"]; });\n\n/* harmony import */ var _crossSection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./crossSection */ \"../../api/v1/crossSection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"crossSection\", function() { return _crossSection__WEBPACK_IMPORTED_MODULE_7__[\"crossSection\"]; });\n\n/* harmony import */ var _cylinder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cylinder */ \"../../api/v1/cylinder.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cylinder\", function() { return _cylinder__WEBPACK_IMPORTED_MODULE_8__[\"cylinder\"]; });\n\n/* harmony import */ var _difference__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./difference */ \"../../api/v1/difference.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return _difference__WEBPACK_IMPORTED_MODULE_9__[\"difference\"]; });\n\n/* harmony import */ var _extrude__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extrude */ \"../../api/v1/extrude.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"extrude\", function() { return _extrude__WEBPACK_IMPORTED_MODULE_10__[\"extrude\"]; });\n\n/* harmony import */ var _hsl2rgb__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hsl2rgb */ \"../../api/v1/hsl2rgb.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"hsl2rgb\", function() { return _hsl2rgb__WEBPACK_IMPORTED_MODULE_11__[\"hsl2rgb\"]; });\n\n/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./intersection */ \"../../api/v1/intersection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return _intersection__WEBPACK_IMPORTED_MODULE_12__[\"intersection\"]; });\n\n/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./text */ \"../../api/v1/text.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"loadFont\", function() { return _text__WEBPACK_IMPORTED_MODULE_13__[\"loadFont\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"text\", function() { return _text__WEBPACK_IMPORTED_MODULE_13__[\"text\"]; });\n\n/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./max */ \"../../api/v1/max.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return _max__WEBPACK_IMPORTED_MODULE_14__[\"max\"]; });\n\n/* harmony import */ var _polyhedron__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./polyhedron */ \"../../api/v1/polyhedron.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"polyhedron\", function() { return _polyhedron__WEBPACK_IMPORTED_MODULE_15__[\"polyhedron\"]; });\n\n/* harmony import */ var _rotate__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./rotate */ \"../../api/v1/rotate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return _rotate__WEBPACK_IMPORTED_MODULE_16__[\"rotate\"]; });\n\n/* harmony import */ var _rotateX__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./rotateX */ \"../../api/v1/rotateX.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return _rotateX__WEBPACK_IMPORTED_MODULE_17__[\"rotateX\"]; });\n\n/* harmony import */ var _rotateY__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./rotateY */ \"../../api/v1/rotateY.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return _rotateY__WEBPACK_IMPORTED_MODULE_18__[\"rotateY\"]; });\n\n/* harmony import */ var _rotateZ__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./rotateZ */ \"../../api/v1/rotateZ.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return _rotateZ__WEBPACK_IMPORTED_MODULE_19__[\"rotateZ\"]; });\n\n/* harmony import */ var _scale__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./scale */ \"../../api/v1/scale.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return _scale__WEBPACK_IMPORTED_MODULE_20__[\"scale\"]; });\n\n/* harmony import */ var _sin__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./sin */ \"../../api/v1/sin.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sin\", function() { return _sin__WEBPACK_IMPORTED_MODULE_21__[\"sin\"]; });\n\n/* harmony import */ var _sphere__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./sphere */ \"../../api/v1/sphere.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sphere\", function() { return _sphere__WEBPACK_IMPORTED_MODULE_22__[\"sphere\"]; });\n\n/* harmony import */ var _sqrt__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./sqrt */ \"../../api/v1/sqrt.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sqrt\", function() { return _sqrt__WEBPACK_IMPORTED_MODULE_23__[\"sqrt\"]; });\n\n/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./square */ \"../../api/v1/square.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"square\", function() { return _square__WEBPACK_IMPORTED_MODULE_24__[\"square\"]; });\n\n/* harmony import */ var _translate__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./translate */ \"../../api/v1/translate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return _translate__WEBPACK_IMPORTED_MODULE_25__[\"translate\"]; });\n\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./union */ \"../../api/v1/union.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return _union__WEBPACK_IMPORTED_MODULE_26__[\"union\"]; });\n\n/* harmony import */ var _writePaths__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./writePaths */ \"../../api/v1/writePaths.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writePaths\", function() { return _writePaths__WEBPACK_IMPORTED_MODULE_27__[\"writePaths\"]; });\n\n/* harmony import */ var _writePdf__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./writePdf */ \"../../api/v1/writePdf.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writePdf\", function() { return _writePdf__WEBPACK_IMPORTED_MODULE_28__[\"writePdf\"]; });\n\n/* harmony import */ var _writeScreen__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./writeScreen */ \"../../api/v1/writeScreen.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writeScreen\", function() { return _writeScreen__WEBPACK_IMPORTED_MODULE_29__[\"writeScreen\"]; });\n\n/* harmony import */ var _writeShape__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./writeShape */ \"../../api/v1/writeShape.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writeShape\", function() { return _writeShape__WEBPACK_IMPORTED_MODULE_30__[\"writeShape\"]; });\n\n/* harmony import */ var _writeStl__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./writeStl */ \"../../api/v1/writeStl.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writeStl\", function() { return _writeStl__WEBPACK_IMPORTED_MODULE_31__[\"writeStl\"]; });\n\n/* harmony import */ var _writeThreejs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./writeThreejs */ \"../../api/v1/writeThreejs.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writeThreejsPage\", function() { return _writeThreejs__WEBPACK_IMPORTED_MODULE_32__[\"writeThreejsPage\"]; });\n\n/**\r\n *\r\n * Defines the interface used by the api to access the rest of the system on\r\n * behalf of a user. e.g., algorithms and geometries.\r\n *\r\n * A user can destructively update this mapping in their code to change what\r\n * the api uses.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/main.js?");

/***/ }),

/***/ "../../api/v1/max.js":
/*!**********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/max.js ***!
  \**********************************************************/
/*! exports provided: max */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\nconst max = Math.max;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/max.js?");

/***/ }),

/***/ "../../api/v1/polyhedron.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/polyhedron.js ***!
  \*****************************************************************/
/*! exports provided: polyhedron */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"polyhedron\", function() { return polyhedron; });\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n\r\n\r\n/**\r\n * polyhedron({      // openscad-like (e.g. pyramid)\r\n *   points: [ [10,10,0],[10,-10,0],[-10,-10,0],[-10,10,0], // the four points at base\r\n *             [0,0,10] ],                                  // the apex point\r\n *   triangles: [ [0,1,4],[1,2,4],[2,3,4],[3,0,4],          // each triangle side\r\n *                [1,0,3],[2,1,3] ]                         // two triangles for square base\r\n * });\r\n *\r\n */\r\n\r\nconst polyhedron = ({ points = [], triangles = [] }) => {\r\n  const polygons = [];\r\n\r\n  for (const triangle of triangles) {\r\n    polygons.push(triangle.map(point => points[point]));\r\n  }\r\n\r\n  return _CSG__WEBPACK_IMPORTED_MODULE_0__[\"CSG\"].fromPolygons(polygons);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/polyhedron.js?");

/***/ }),

/***/ "../../api/v1/rotate.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotate.js ***!
  \*************************************************************/
/*! exports provided: rotate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony import */ var _Assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assembly */ \"../../api/v1/Assembly.js\");\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _Path2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Path2D */ \"../../api/v1/Path2D.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst a2r = (angle) => angle * 0.017453292519943295;\r\n\r\nconst rotate = ([x = 0, y = 0, z = 0], shape) =>\r\n  shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__[\"multiply\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__[\"fromZRotation\"])(a2r(z)), Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__[\"multiply\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__[\"fromYRotation\"])(a2r(y)), Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__[\"fromXRotation\"])(a2r(x)))));\r\n\r\nconst method = function (angles) { return rotate(angles, this); };\r\n\r\n_Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].prototype.rotate = method;\r\n_CAG__WEBPACK_IMPORTED_MODULE_1__[\"CAG\"].prototype.rotate = method;\r\n_CSG__WEBPACK_IMPORTED_MODULE_2__[\"CSG\"].prototype.rotate = method;\r\n_Path2D__WEBPACK_IMPORTED_MODULE_3__[\"Path2D\"].prototype.rotate = method;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotate.js?");

/***/ }),

/***/ "../../api/v1/rotateX.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateX.js ***!
  \**************************************************************/
/*! exports provided: rotateX */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony import */ var _Assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assembly */ \"../../api/v1/Assembly.js\");\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _Path2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Path2D */ \"../../api/v1/Path2D.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst rotateX = (angle, shape) => shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__[\"fromXRotation\"])(angle * 0.017453292519943295));\r\n\r\nconst method = function (angle) { return rotateX(angle, this); };\r\n\r\n_Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].prototype.rotateX = method;\r\n_CAG__WEBPACK_IMPORTED_MODULE_1__[\"CAG\"].prototype.rotateX = method;\r\n_CSG__WEBPACK_IMPORTED_MODULE_2__[\"CSG\"].prototype.rotateX = method;\r\n_Path2D__WEBPACK_IMPORTED_MODULE_3__[\"Path2D\"].prototype.rotateX = method;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateX.js?");

/***/ }),

/***/ "../../api/v1/rotateY.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateY.js ***!
  \**************************************************************/
/*! exports provided: rotateY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony import */ var _Assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assembly */ \"../../api/v1/Assembly.js\");\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _Path2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Path2D */ \"../../api/v1/Path2D.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst rotateY = (angle, shape) => shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__[\"fromYRotation\"])(angle * 0.017453292519943295));\r\n\r\nconst method = function (angle) { return rotateY(angle, this); };\r\n\r\n_Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].prototype.rotateY = method;\r\n_CAG__WEBPACK_IMPORTED_MODULE_1__[\"CAG\"].prototype.rotateY = method;\r\n_CSG__WEBPACK_IMPORTED_MODULE_2__[\"CSG\"].prototype.rotateY = method;\r\n_Path2D__WEBPACK_IMPORTED_MODULE_3__[\"Path2D\"].prototype.rotateY = method;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateY.js?");

/***/ }),

/***/ "../../api/v1/rotateZ.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateZ.js ***!
  \**************************************************************/
/*! exports provided: rotateZ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony import */ var _Assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assembly */ \"../../api/v1/Assembly.js\");\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _Path2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Path2D */ \"../../api/v1/Path2D.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst rotateZ = (angle, shape) => shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__[\"fromZRotation\"])(angle * 0.017453292519943295));\r\n\r\nconst method = function (angle) { return rotateZ(angle, this); };\r\n\r\n_Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].prototype.rotateZ = method;\r\n_CAG__WEBPACK_IMPORTED_MODULE_1__[\"CAG\"].prototype.rotateZ = method;\r\n_CSG__WEBPACK_IMPORTED_MODULE_2__[\"CSG\"].prototype.rotateZ = method;\r\n_Path2D__WEBPACK_IMPORTED_MODULE_3__[\"Path2D\"].prototype.rotateZ = method;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateZ.js?");

/***/ }),

/***/ "../../api/v1/scale.js":
/*!************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/scale.js ***!
  \************************************************************/
/*! exports provided: scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony import */ var _Assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assembly */ \"../../api/v1/Assembly.js\");\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _Path2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Path2D */ \"../../api/v1/Path2D.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst scale = (factor, shape) => {\r\n  if (factor.length) {\r\n    const [x = 1, y = 1, z = 1] = factor;\r\n    return shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__[\"fromScaling\"])([x, y, z]));\r\n  } else {\r\n    // scale(4)\r\n    return shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__[\"fromScaling\"])([factor, factor, factor]));\r\n  }\r\n};\r\n\r\nconst method = function (factor) { return scale(factor, this); };\r\n\r\n_Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].prototype.scale = method;\r\n_CAG__WEBPACK_IMPORTED_MODULE_1__[\"CAG\"].prototype.scale = method;\r\n_CSG__WEBPACK_IMPORTED_MODULE_2__[\"CSG\"].prototype.scale = method;\r\n_Path2D__WEBPACK_IMPORTED_MODULE_3__[\"Path2D\"].prototype.scale = method;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/scale.js?");

/***/ }),

/***/ "../../api/v1/sin.js":
/*!**********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sin.js ***!
  \**********************************************************/
/*! exports provided: sin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sin\", function() { return sin; });\nconst sin = (a) => Math.sin(a / 360 * Math.PI * 2);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sin.js?");

/***/ }),

/***/ "../../api/v1/sphere.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sphere.js ***!
  \*************************************************************/
/*! exports provided: sphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sphere\", function() { return sphere; });\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n\r\n\r\n// import { buildGeodesicSphere } from '@jsxcad/algorithm-shape';\r\n\r\n\r\nconst buildSphere = ({ r = 1, fn = 32 }) => _CSG__WEBPACK_IMPORTED_MODULE_0__[\"CSG\"].fromPolygons(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__[\"buildRingSphere\"])({ resolution: fn })).scale([r, r, r]);\r\n// const buildSphere = ({ r = 1, fn = 32 }) => CSG.fromPolygons(buildGeodesicSphere({ resolution: fn })).scale([r, r, r]);\r\n\r\nconst decode = (params) => {\r\n  // sphere();\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertEmpty\"])(params);\r\n    return {};\r\n  } catch (e) {}\r\n\r\n  // sphere(2);\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertSingle\"])(params);\r\n    const [radius] = params;\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertNumber\"])(radius);\r\n    return { r: radius };\r\n  } catch (e) {}\r\n\r\n  // sphere({ r: 10, fn: 100 });  // geodesic approach (icosahedron further triangulated)\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertSingle\"])(params);\r\n    const { r = 1, fn = 32, center = false } = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertNumber\"])(r);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertNumber\"])(fn);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_2__[\"assertBoolean\"])(center);\r\n    return { fn: fn, r: r };\r\n  } catch (e) {}\r\n\r\n  throw Error(`Unsupported interface for sphere: ${JSON.stringify(params)}`);\r\n};\r\n\r\n/**\r\n *\r\n * sphere();                          // openscad like\r\n * sphere(1);\r\n * sphere({r: 2});                    // Note: center:true is default (unlike other primitives, as OpenSCAD)\r\n * sphere({r: 2, center: true});     // Note: OpenSCAD doesn't support center for sphere but we do\r\n * sphere({r: 2, center: [false, false, true]}); // individual axis center\r\n * sphere({r: 10, fn: 100 });\r\n * sphere({r: 10, fn: 100, type: 'geodesic'});  // geodesic approach (icosahedron further triangulated)\r\n */\r\nconst sphere = (...params) => buildSphere(decode(params));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sphere.js?");

/***/ }),

/***/ "../../api/v1/sqrt.js":
/*!***********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sqrt.js ***!
  \***********************************************************/
/*! exports provided: sqrt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrt\", function() { return sqrt; });\nconst sqrt = Math.sqrt;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sqrt.js?");

/***/ }),

/***/ "../../api/v1/square.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/square.js ***!
  \*************************************************************/
/*! exports provided: square */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"square\", function() { return square; });\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n\r\n\r\n\r\n\r\nconst buildSquare = ({ scale = [1, 1, 1] }) => {\r\n  const cag = _CAG__WEBPACK_IMPORTED_MODULE_0__[\"CAG\"].fromPoints(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"buildRegularPolygon\"])({ edges: 4 }))\r\n      .rotateZ(45)\r\n      .scale(scale);\r\n  return cag;\r\n};\r\n\r\nconst decode = (params) => {\r\n  const edgeScale = Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"regularPolygonEdgeLengthToRadius\"])(1, 4);\r\n\r\n  // square({ size: [2,4], center: true }); // 2x4, center: false (default)\r\n  try {\r\n    const { size, center = false } = params[0];\r\n    const [length, width] = size;\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(length);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(width);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertBoolean\"])(center);\r\n    return { scale: [edgeScale * length, edgeScale * width] };\r\n  } catch (e) {}\r\n\r\n  // square([2,4]}); // 2x4, center: false (default)\r\n  try {\r\n    const [length, width] = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(length);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(width);\r\n    return { scale: [edgeScale * length, edgeScale * width] };\r\n  } catch (e) {};\r\n\r\n  // square(1); // 2x4, center: false (default)\r\n  try {\r\n    const [length] = params;\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertNumber\"])(length);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertSingle\"])(params);\r\n    return { scale: [edgeScale * length, edgeScale * length] };\r\n  } catch (e) {};\r\n\r\n  // square()\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_1__[\"assertEmpty\"])(params);\r\n    return {};\r\n  } catch (e) {};\r\n\r\n  throw Error(`Unsupported interface for square: ${JSON.stringify(params)}`);\r\n};\r\n\r\n/**\r\n *\r\n * square();                                   // openscad like\r\n * square(1);                                  // 1x1\r\n * square([2,3]);                              // 2x3\r\n * square({size: [2,4], center: true});        // 2x4, center: false (default)\r\n *\r\n */\r\nconst square = (...params) => buildSquare(decode(params));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/square.js?");

/***/ }),

/***/ "../../api/v1/text.js":
/*!***********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/text.js ***!
  \***********************************************************/
/*! exports provided: loadFont, text */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadFont\", function() { return loadFont; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"text\", function() { return text; });\n/* harmony import */ var _jsxcad_algorithm_text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-text */ \"../../algorithm/text/main.js\");\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n\r\n\r\n\r\nconst loadFont = ({ path }) => Object(_jsxcad_algorithm_text__WEBPACK_IMPORTED_MODULE_0__[\"pathnameToFont\"])(path);\r\n\r\nconst text = ({ font, curveSegments }, text) =>\r\n  Object(_jsxcad_algorithm_text__WEBPACK_IMPORTED_MODULE_0__[\"textToSurfaces\"])({ font: font, curveSegments }, text).map(paths => _CAG__WEBPACK_IMPORTED_MODULE_1__[\"CAG\"].fromPaths(paths));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/text.js?");

/***/ }),

/***/ "../../api/v1/toGeometry.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/toGeometry.js ***!
  \*****************************************************************/
/*! exports provided: toGeometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toGeometry\", function() { return toGeometry; });\nconst toGeometry = (shape) => shape.toGeometry();\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/toGeometry.js?");

/***/ }),

/***/ "../../api/v1/translate.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/translate.js ***!
  \****************************************************************/
/*! exports provided: translate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony import */ var _Assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assembly */ \"../../api/v1/Assembly.js\");\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _Path2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Path2D */ \"../../api/v1/Path2D.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst translate = ([x = 0, y = 0, z = 0], shape) => shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_4__[\"fromTranslation\"])([x, y, z]));\r\n\r\nconst method = function (vector) { return translate(vector, this); };\r\n\r\n_Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].prototype.translate = method;\r\n_CAG__WEBPACK_IMPORTED_MODULE_1__[\"CAG\"].prototype.translate = method;\r\n_CSG__WEBPACK_IMPORTED_MODULE_2__[\"CSG\"].prototype.translate = method;\r\n_Path2D__WEBPACK_IMPORTED_MODULE_3__[\"Path2D\"].prototype.translate = method;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/translate.js?");

/***/ }),

/***/ "../../api/v1/union.js":
/*!************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/union.js ***!
  \************************************************************/
/*! exports provided: union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return union; });\n/* harmony import */ var _Assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assembly */ \"../../api/v1/Assembly.js\");\n/* harmony import */ var _CAG__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CAG */ \"../../api/v1/CAG.js\");\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _Path2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Path2D */ \"../../api/v1/Path2D.js\");\n/* harmony import */ var _flatten__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flatten */ \"../../api/v1/flatten.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst union = (...params) => Object(_Assembly__WEBPACK_IMPORTED_MODULE_0__[\"unionLazily\"])(...Object(_flatten__WEBPACK_IMPORTED_MODULE_4__[\"flatten\"])(params));\r\n\r\nconst method = function (...shapes) { return union(this, ...shapes); };\r\n\r\n_Assembly__WEBPACK_IMPORTED_MODULE_0__[\"Assembly\"].prototype.union = method;\r\n_CAG__WEBPACK_IMPORTED_MODULE_1__[\"CAG\"].prototype.union = method;\r\n_CSG__WEBPACK_IMPORTED_MODULE_2__[\"CSG\"].prototype.union = method;\r\n_Path2D__WEBPACK_IMPORTED_MODULE_3__[\"Path2D\"].prototype.union = method;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/union.js?");

/***/ }),

/***/ "../../api/v1/writePaths.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writePaths.js ***!
  \*****************************************************************/
/*! exports provided: writePaths */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writePaths\", function() { return writePaths; });\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\nconst writePaths = ({ path }, ...paths) => {\r\n  Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__[\"writeFileSync\"])(path, paths);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writePaths.js?");

/***/ }),

/***/ "../../api/v1/writePdf.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writePdf.js ***!
  \***************************************************************/
/*! exports provided: writePdf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writePdf\", function() { return writePdf; });\n/* harmony import */ var _jsxcad_algorithm_pdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-pdf */ \"../../algorithm/pdf/main.js\");\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\n\r\nconst writePdf = ({ path }, ...shapes) => {\r\n  const pathSets = shapes.map(shape => {\r\n    if (shape instanceof Array) {\r\n      return shape;\r\n    } else {\r\n      return shape.toPaths({});\r\n    }\r\n  });\r\n  Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_1__[\"writeFileSync\"])(path, pathSets, { translator: () => Object(_jsxcad_algorithm_pdf__WEBPACK_IMPORTED_MODULE_0__[\"pathsToPdf\"])({}, [].concat(...pathSets)) });\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writePdf.js?");

/***/ }),

/***/ "../../api/v1/writeScreen.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeScreen.js ***!
  \******************************************************************/
/*! exports provided: writeScreen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writeScreen\", function() { return writeScreen; });\n/* harmony import */ var _jsxcad_algorithm_threejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-threejs */ \"../../algorithm/threejs/main.js\");\n\r\n\r\nconst writeScreen = ({ path }, ...shapes) => {\r\n    \r\n  //Parse the path\r\n  var [target , targetDiv, shapeID ]  = path.split('/');\r\n    \r\n  //Add a viewer to the path if there isn't one already\r\n  if(typeof document.getElementById(targetDiv).threeScreen == 'undefined'){\r\n      Object(_jsxcad_algorithm_threejs__WEBPACK_IMPORTED_MODULE_0__[\"buildThreejsScreen\"])(targetDiv);\r\n  }\r\n    \r\n  //Write to it\r\n  document.getElementById(targetDiv).threeScreen.writeScreen({id: shapeID}, ...shapes);    \r\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeScreen.js?");

/***/ }),

/***/ "../../api/v1/writeShape.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeShape.js ***!
  \*****************************************************************/
/*! exports provided: writeShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writeShape\", function() { return writeShape; });\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\nconst writeShape = ({ path }, ...shapes) => {\r\n  Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__[\"writeFileSync\"])(path, shapes.map(shape => shape.toPaths({})));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeShape.js?");

/***/ }),

/***/ "../../api/v1/writeStl.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeStl.js ***!
  \***************************************************************/
/*! exports provided: writeStl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writeStl\", function() { return writeStl; });\n/* harmony import */ var _CSG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CSG */ \"../../api/v1/CSG.js\");\n/* harmony import */ var _jsxcad_algorithm_stl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-stl */ \"../../algorithm/stl/main.js\");\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\n\r\n\r\nconst writeStl = ({ path, needIsWatertight = true }, ...shapes) => {\r\n  const pathSets = shapes.map(shape => {\r\n    if (shape instanceof Array) {\r\n      return shape;\r\n    } else {\r\n      return shape.toPolygons({});\r\n    }\r\n  });\r\n  Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__[\"writeFileSync\"])(path, pathSets, { translator: () => Object(_jsxcad_algorithm_stl__WEBPACK_IMPORTED_MODULE_1__[\"polygonsToStla\"])({ needIsWatertight }, [].concat(...pathSets)) });\r\n};\r\n\r\n_CSG__WEBPACK_IMPORTED_MODULE_0__[\"CSG\"].prototype.writeStl = function (options = {}) {\r\n  writeStl(options, this);\r\n  return this;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeStl.js?");

/***/ }),

/***/ "../../api/v1/writeThreejs.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeThreejs.js ***!
  \*******************************************************************/
/*! exports provided: writeThreejsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writeThreejsPage\", function() { return writeThreejsPage; });\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n/* harmony import */ var _jsxcad_algorithm_threejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-threejs */ \"../../algorithm/threejs/main.js\");\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\n\r\n\r\nconst toPolygons = (shape) => (shape instanceof Array) ? shape : shape.toPolygons({});\r\n\r\nconst writeThreejsPage = (options, ...shapes) => {\r\n  const solids = shapes.map(toPolygons).map(polygons => Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"toTriangles\"])({}, polygons));\r\n  // FIX: Should we generalize on sets of paths, like solids, rather than paths?\r\n  Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__[\"writeFileSync\"])(options.path, solids, { translator: () => Object(_jsxcad_algorithm_threejs__WEBPACK_IMPORTED_MODULE_1__[\"trianglesToThreejsPage\"])(options, ...solids) });\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeThreejs.js?");

/***/ }),

/***/ "../../geometry/assembly/main.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/geometry/assembly/main.js ***!
  \**********************************************************************/
/*! exports provided: Assembly, fromGeometries */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Assembly\", function() { return Assembly; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromGeometries\", function() { return fromGeometries; });\nclass Assembly {\r\n  constructor ({ geometries = [], properties }) {\r\n    this.geometries = geometries;\r\n    this.properties = properties;\r\n    this.isAssembly = true;\r\n  }\r\n\r\n  getProperty (key, defaultValue) {\r\n    if (this.properties === undefined) {\r\n      return defaultValue;\r\n    }\r\n    if (this.properties[key] === undefined) {\r\n      return defaultValue;\r\n    }\r\n    return this.properties[key];\r\n  }\r\n\r\n  withProperty (key, value) {\r\n    const properties = Object.assign({}, this.properties);\r\n    properties[key] = value;\r\n    return fromGeometries({ properties: properties }, this.geometries);\r\n  }\r\n\r\n  difference (...geometries) {\r\n    return fromGeometries({ properties: this.properties },\r\n                          this.geometries.map(geometry => geometry.difference(...geometries)));\r\n  }\r\n\r\n  flip () {\r\n    return fromGeometries({ properties: this.properties },\r\n                          this.geometries.map(geometry => geometry.flip()));\r\n  }\r\n\r\n  intersection (...geometries) {\r\n    return fromGeometries({ properties: this.properties },\r\n                          this.geometries.map(geometry => geometry.intersection(...geometries)));\r\n  }\r\n\r\n  merge (...geometries) {\r\n    return fromGeometries({ properties: this.properties }, [...this.toGeometries(), ...geometries]);\r\n  }\r\n\r\n  toGeometries (options = {}) {\r\n    return this.geometries;\r\n  }\r\n\r\n  toPaths (options) {\r\n    // FIX: Probably instead of toPaths we want an interface like 'toComponentPaths' which preserves the\r\n    // paths and properties of each component (and sub-component, and so on).\r\n    // If they want a fused geometry, then they should ask for that.\r\n    const { tags } = options;\r\n    if (tags !== undefined) {\r\n      const ourTags = this.getProperty('tags');\r\n      if (ourTags !== undefined) {\r\n        if (ourTags.every(tag => !tags.includes(tag))) {\r\n          // This tagged assembly does not have the right tags -- produce no paths.\r\n          let paths = [];\r\n          paths.tags = tags;\r\n          return paths;\r\n        }\r\n      }\r\n    }\r\n    let subPaths = this.geometries.map(geometry => geometry.toPaths(options));\r\n    let paths = [].concat(...subPaths);\r\n    // FIX: This is probably the wrong thing to do, see above.\r\n    paths.properties = Object.assign({}, ...subPaths.map(subPath => subPath.properties || {}), this.properties || {});\r\n    return paths;\r\n  }\r\n\r\n  transform (matrix) {\r\n    // Assembly transforms are eager, but the component transforms may be lazy.\r\n    return fromGeometries({ properties: this.properties },\r\n                          this.geometries.map(geometry => geometry.transform(matrix)));\r\n  }\r\n\r\n  union (...geometries) {\r\n    let unioned = this;\r\n    while (geometries.length > 0) {\r\n      const added = geometries.shift();\r\n      unioned = unioned.difference(added);\r\n      unioned = unioned.merge(added);\r\n    }\r\n    return unioned;\r\n  }\r\n}\r\n\r\nconst fromGeometries = ({ properties }, geometries) => {\r\n  return new Assembly({ geometries: geometries, properties: properties });\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/geometry/assembly/main.js?");

/***/ }),

/***/ "../../geometry/paths/main.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/geometry/paths/main.js ***!
  \*******************************************************************/
/*! exports provided: Paths, fromPaths */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Paths\", function() { return Paths; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPaths\", function() { return fromPaths; });\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\nclass Paths {\r\n  constructor ({ paths = [], transforms = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"identity\"])() }) {\r\n    this.basePaths = paths;\r\n    this.transforms = transforms;\r\n    this.isPath = true;\r\n    if (!(paths instanceof Array)) throw Error(`Die: ${JSON.stringify(paths)}`);\r\n  }\r\n\r\n  difference (...geometries) {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__[\"difference\"])(this.toPaths({}), geometries.map(geometry => geometry.toPaths({}))));\r\n  }\r\n\r\n  flip () {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__[\"flip\"])(this.toPaths({})));\r\n  }\r\n\r\n  intersection (...geometries) {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__[\"intersection\"])(this.toPaths({}), geometries.map(geometry => geometry.toPaths({}))));\r\n  }\r\n\r\n  toPaths (options = {}) {\r\n    if (this.paths === undefined) {\r\n      this.paths = Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(this.transforms, this.basePaths);\r\n    }\r\n    return this.paths;\r\n  }\r\n\r\n  transform (matrix) {\r\n    return new Paths({ paths: this.basePaths, transforms: Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"multiply\"])(matrix, this.transforms) });\r\n  }\r\n\r\n  union (...geometries) {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__[\"union\"])(this.toPaths({}), geometries.map(geometry => geometry.toPaths({}))));\r\n  }\r\n}\r\n\r\nconst fromPaths = (options = {}, paths) => new Paths({ paths: paths });\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/geometry/paths/main.js?");

/***/ }),

/***/ "../../geometry/solid3bsp/main.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/geometry/solid3bsp/main.js ***!
  \***********************************************************************/
/*! exports provided: Solid3Bsp, fromPaths */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Solid3Bsp\", function() { return Solid3Bsp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPaths\", function() { return fromPaths; });\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n/* harmony import */ var _jsxcad_algorithm_bsp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-bsp */ \"../../algorithm/bsp/main.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n\r\n\r\n\r\n// import { isWatertightPolygons } from '@jsxcad/algorithm-watertight';\r\n\r\n\r\nclass Solid3Bsp {\r\n  constructor ({ paths = [], transforms = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_2__[\"identity\"])() }) {\r\n    this.basePaths = Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_3__[\"toPolygons\"])(paths);\r\n    this.transforms = transforms;\r\n    this.isSolid = true;\r\n  }\r\n\r\n  difference (...geometries) {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_bsp__WEBPACK_IMPORTED_MODULE_1__[\"difference\"])(this.toPaths({}), ...geometries.map(geometry => geometry.toPaths({}))));\r\n  }\r\n\r\n  flip () {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"flip\"])(this.toPaths({})));\r\n  }\r\n\r\n  intersection (...geometries) {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_bsp__WEBPACK_IMPORTED_MODULE_1__[\"intersection\"])(this.toPaths({}), ...geometries.map(geometry => geometry.toPaths({}))));\r\n  }\r\n\r\n  toPaths (options = {}) {\r\n    if (this.paths === undefined) {\r\n      this.paths = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(this.transforms, this.basePaths));\r\n      // if (!isWatertightPolygons(this.paths)) throw Error('Not watertight');\r\n    }\r\n    return this.paths;\r\n  }\r\n\r\n  transform (matrix) {\r\n    return new Solid3Bsp({ paths: this.basePaths, transforms: Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_2__[\"multiply\"])(matrix, this.transforms) });\r\n  }\r\n\r\n  union (...geometries) {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_bsp__WEBPACK_IMPORTED_MODULE_1__[\"union\"])(this.toPaths({}), ...geometries.map(geometry => geometry.toPaths({}))));\r\n  }\r\n}\r\n\r\nconst fromPaths = (options = {}, paths) => {\r\n  paths = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"toTriangles\"])({}, paths));\r\n  // paths = toTriangles({}, paths);\r\n  // paths = canonicalize(paths);\r\n  return new Solid3Bsp({ paths: paths });\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/geometry/solid3bsp/main.js?");

/***/ }),

/***/ "../../geometry/surf2pc/main.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/geometry/surf2pc/main.js ***!
  \*********************************************************************/
/*! exports provided: Surf2Pc, fromPaths */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Surf2Pc\", function() { return Surf2Pc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPaths\", function() { return fromPaths; });\n/* harmony import */ var _jsxcad_algorithm_z0polygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-z0polygons */ \"../../algorithm/z0polygons/main.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\n\r\n\r\nclass Surf2Pc {\r\n  constructor ({ paths = [], transforms = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_3__[\"identity\"])() }) {\r\n    this.basePaths = Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"toZ0Polygons\"])(paths);\r\n    this.transforms = transforms;\r\n    this.isSurface = true;\r\n    this.isSurf2Pc = true;\r\n  }\r\n\r\n  difference (...geometries) {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_z0polygons__WEBPACK_IMPORTED_MODULE_0__[\"difference\"])(this.toPaths({}), ...geometries.map(geometry => geometry.toPaths({}))));\r\n  }\r\n\r\n  flip () {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_2__[\"flip\"])(this.toPaths({})));\r\n  }\r\n\r\n  intersection (...geometries) {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_z0polygons__WEBPACK_IMPORTED_MODULE_0__[\"intersection\"])(this.toPaths({}), ...geometries.map(geometry => geometry.toPaths({}))));\r\n  }\r\n\r\n  toPaths (options = {}) {\r\n    if (this.paths === undefined) {\r\n      this.paths = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_2__[\"transform\"])(this.transforms, this.basePaths);\r\n    }\r\n    return this.paths;\r\n  }\r\n\r\n  transform (matrix) {\r\n    return new Surf2Pc({ paths: this.basePaths, transforms: Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_3__[\"multiply\"])(matrix, this.transforms) });\r\n  }\r\n\r\n  union (...geometries) {\r\n    return fromPaths({}, Object(_jsxcad_algorithm_z0polygons__WEBPACK_IMPORTED_MODULE_0__[\"union\"])(this.toPaths({}), ...geometries.map(geometry => geometry.toPaths({}))));\r\n  }\r\n}\r\n\r\nconst fromPaths = (options = {}, paths) => new Surf2Pc({ paths: paths });\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/geometry/surf2pc/main.js?");

/***/ }),

/***/ "../../math/mat4/add.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/add.js ***!
  \*************************************************************/
/*! exports provided: add */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nconst add = (a, b) =>\r\n  [a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3], a[4] + b[4], a[5] + b[5], a[6] + b[6], a[7] + b[7], a[8] + b[8],\r\n   a[9] + b[9], a[10] + b[10], a[11] + b[11], a[12] + b[12], a[13] + b[13], a[14] + b[14], a[15] + b[15]];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/add.js?");

/***/ }),

/***/ "../../math/mat4/equals.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/equals.js ***!
  \****************************************************************/
/*! exports provided: equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nconst equals = (a, b) => {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\r\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\r\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\r\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/equals.js?");

/***/ }),

/***/ "../../math/mat4/fromRotation.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromRotation.js ***!
  \**********************************************************************/
/*! exports provided: fromRotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\nconst EPSILON = 1e-5;\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nconst fromRotation = (rad, [x, y, z]) => {\r\n  let len = Math.sqrt(x * x + y * y + z * z);\r\n\r\n  if (Math.abs(len) < EPSILON) { return null; }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  const s = Math.sin(rad);\r\n  const c = Math.cos(rad);\r\n  const t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  return [x * x * t + c,\r\n          y * x * t + z * s,\r\n          z * x * t - y * s,\r\n          0,\r\n          x * y * t - z * s,\r\n          y * y * t + c,\r\n          z * y * t + x * s,\r\n          0,\r\n          x * z * t + y * s,\r\n          y * z * t - x * s,\r\n          z * z * t + c,\r\n          0,\r\n          0,\r\n          0,\r\n          0,\r\n          1];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromRotation.js?");

/***/ }),

/***/ "../../math/mat4/fromScaling.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromScaling.js ***!
  \*********************************************************************/
/*! exports provided: fromScaling */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return fromScaling; });\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nconst fromScaling = ([x = 1, y = 1, z = 1]) => [x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromScaling.js?");

/***/ }),

/***/ "../../math/mat4/fromTranslation.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromTranslation.js ***!
  \*************************************************************************/
/*! exports provided: fromTranslation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return fromTranslation; });\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nconst fromTranslation = ([x = 0, y = 0, z = 0]) => [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromTranslation.js?");

/***/ }),

/***/ "../../math/mat4/fromValues.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromValues.js ***!
  \********************************************************************/
/*! exports provided: fromValues */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nconst fromValues = (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) =>\r\n  [m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromValues.js?");

/***/ }),

/***/ "../../math/mat4/fromXRotation.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromXRotation.js ***!
  \***********************************************************************/
/*! exports provided: fromXRotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromXRotation\", function() { return fromXRotation; });\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nconst fromXRotation = (rad) => {\r\n  const s = Math.sin(rad);\r\n  const c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  return [1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromXRotation.js?");

/***/ }),

/***/ "../../math/mat4/fromYRotation.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromYRotation.js ***!
  \***********************************************************************/
/*! exports provided: fromYRotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromYRotation\", function() { return fromYRotation; });\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nconst fromYRotation = (rad) => {\r\n  const s = Math.sin(rad);\r\n  const c = Math.cos(rad);\r\n  // Perform axis-specific matrix multiplication\r\n  return [c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromYRotation.js?");

/***/ }),

/***/ "../../math/mat4/fromZRotation.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromZRotation.js ***!
  \***********************************************************************/
/*! exports provided: fromZRotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromZRotation\", function() { return fromZRotation; });\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nconst fromZRotation = (rad) => {\r\n  const s = Math.sin(rad);\r\n  const c = Math.cos(rad);\r\n  // Perform axis-specific matrix multiplication\r\n  return [c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromZRotation.js?");

/***/ }),

/***/ "../../math/mat4/identity.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/identity.js ***!
  \******************************************************************/
/*! exports provided: identity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @returns {mat4} out\r\n */\r\nconst identity = () => [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/identity.js?");

/***/ }),

/***/ "../../math/mat4/isMirroring.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/isMirroring.js ***!
  \*********************************************************************/
/*! exports provided: isMirroring */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isMirroring\", function() { return isMirroring; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * determine whether the input matrix is a mirroring transformation\r\n *\r\n * @param {mat4} mat the input matrix\r\n * @returns {boolean} output\r\n */\r\nconst isMirroring = (mat) => {\r\n  const u = [mat[0], mat[4], mat[8]];\r\n  const v = [mat[1], mat[5], mat[9]];\r\n  const w = [mat[2], mat[6], mat[10]];\r\n\r\n  // for a true orthogonal, non-mirrored base, u.cross(v) == w\r\n  // If they have an opposite direction then we are mirroring\r\n  const mirrorvalue = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(u, v), w);\r\n  const ismirror = (mirrorvalue < 0);\r\n  return ismirror;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/isMirroring.js?");

/***/ }),

/***/ "../../math/mat4/main.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/main.js ***!
  \**************************************************************/
/*! exports provided: add, equals, fromRotation, fromScaling, fromTranslation, fromValues, fromXRotation, fromYRotation, fromZRotation, identity, isMirroring, mirror, mirrorByPlane, multiply, rightMultiplyVec2, rightMultiplyVec3, subtract */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add */ \"../../math/mat4/add.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return _add__WEBPACK_IMPORTED_MODULE_0__[\"add\"]; });\n\n/* harmony import */ var _equals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./equals */ \"../../math/mat4/equals.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return _equals__WEBPACK_IMPORTED_MODULE_1__[\"equals\"]; });\n\n/* harmony import */ var _fromRotation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromRotation */ \"../../math/mat4/fromRotation.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return _fromRotation__WEBPACK_IMPORTED_MODULE_2__[\"fromRotation\"]; });\n\n/* harmony import */ var _fromScaling__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromScaling */ \"../../math/mat4/fromScaling.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return _fromScaling__WEBPACK_IMPORTED_MODULE_3__[\"fromScaling\"]; });\n\n/* harmony import */ var _fromTranslation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromTranslation */ \"../../math/mat4/fromTranslation.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return _fromTranslation__WEBPACK_IMPORTED_MODULE_4__[\"fromTranslation\"]; });\n\n/* harmony import */ var _fromValues__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fromValues */ \"../../math/mat4/fromValues.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return _fromValues__WEBPACK_IMPORTED_MODULE_5__[\"fromValues\"]; });\n\n/* harmony import */ var _fromXRotation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fromXRotation */ \"../../math/mat4/fromXRotation.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromXRotation\", function() { return _fromXRotation__WEBPACK_IMPORTED_MODULE_6__[\"fromXRotation\"]; });\n\n/* harmony import */ var _fromYRotation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fromYRotation */ \"../../math/mat4/fromYRotation.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromYRotation\", function() { return _fromYRotation__WEBPACK_IMPORTED_MODULE_7__[\"fromYRotation\"]; });\n\n/* harmony import */ var _fromZRotation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fromZRotation */ \"../../math/mat4/fromZRotation.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromZRotation\", function() { return _fromZRotation__WEBPACK_IMPORTED_MODULE_8__[\"fromZRotation\"]; });\n\n/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./identity */ \"../../math/mat4/identity.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return _identity__WEBPACK_IMPORTED_MODULE_9__[\"identity\"]; });\n\n/* harmony import */ var _isMirroring__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./isMirroring */ \"../../math/mat4/isMirroring.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isMirroring\", function() { return _isMirroring__WEBPACK_IMPORTED_MODULE_10__[\"isMirroring\"]; });\n\n/* harmony import */ var _mirror__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./mirror */ \"../../math/mat4/mirror.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"mirror\", function() { return _mirror__WEBPACK_IMPORTED_MODULE_11__[\"mirror\"]; });\n\n/* harmony import */ var _mirrorByPlane__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./mirrorByPlane */ \"../../math/mat4/mirrorByPlane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"mirrorByPlane\", function() { return _mirrorByPlane__WEBPACK_IMPORTED_MODULE_12__[\"mirrorByPlane\"]; });\n\n/* harmony import */ var _multiply__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./multiply */ \"../../math/mat4/multiply.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return _multiply__WEBPACK_IMPORTED_MODULE_13__[\"multiply\"]; });\n\n/* harmony import */ var _rightMultiplyVec2__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./rightMultiplyVec2 */ \"../../math/mat4/rightMultiplyVec2.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rightMultiplyVec2\", function() { return _rightMultiplyVec2__WEBPACK_IMPORTED_MODULE_14__[\"rightMultiplyVec2\"]; });\n\n/* harmony import */ var _rightMultiplyVec3__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./rightMultiplyVec3 */ \"../../math/mat4/rightMultiplyVec3.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rightMultiplyVec3\", function() { return _rightMultiplyVec3__WEBPACK_IMPORTED_MODULE_15__[\"rightMultiplyVec3\"]; });\n\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./subtract */ \"../../math/mat4/subtract.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return _subtract__WEBPACK_IMPORTED_MODULE_16__[\"subtract\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/main.js?");

/***/ }),

/***/ "../../math/mat4/mirror.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/mirror.js ***!
  \****************************************************************/
/*! exports provided: mirror */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mirror\", function() { return mirror; });\n/**\r\n * m the mat4 by the dimensions in the given vec3\r\n * create an affine matrix for mirroring into an arbitrary plane:\r\n *\r\n * @param {vec3} v the vec3 to mirror the matrix by\r\n * @param {mat4} a the matrix to mirror\r\n * @returns {mat4} out\r\n */\r\nconst mirror = ([x, y, z], a) => [\r\n  a[0] * x, a[1] * x, a[2] * x, a[3] * x,\r\n  a[4] * y, a[5] * y, a[6] * y, a[7] * y,\r\n  a[8] * z, a[9] * z, a[10] * z, a[11] * z,\r\n  a[12], a[13], a[14], a[15]];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/mirror.js?");

/***/ }),

/***/ "../../math/mat4/mirrorByPlane.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/mirrorByPlane.js ***!
  \***********************************************************************/
/*! exports provided: mirrorByPlane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mirrorByPlane\", function() { return mirrorByPlane; });\n/**\r\n * Create an affine matrix for mirroring onto an arbitrary plane\r\n *\r\n * @param {vec4} plane to mirror the matrix by\r\n * @returns {mat4} out\r\n */\r\nconst mirrorByPlane = ([nx, ny, nz, w]) => [\r\n  (1.0 - 2.0 * nx * nx), (-2.0 * ny * nx), (-2.0 * nz * nx), 0,\r\n  (-2.0 * nx * ny), (1.0 - 2.0 * ny * ny), (-2.0 * nz * ny), 0,\r\n  (-2.0 * nx * nz), (-2.0 * ny * nz), (1.0 - 2.0 * nz * nz), 0,\r\n  (2.0 * nx * w), (2.0 * ny * w), (2.0 * nz * w), 1];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/mirrorByPlane.js?");

/***/ }),

/***/ "../../math/mat4/multiply.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/multiply.js ***!
  \******************************************************************/
/*! exports provided: multiply */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/**\r\n * Multiplies two mat4's\r\n *\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nconst multiply = (a, b) => {\r\n  const out = Array(16);\r\n  const a00 = a[0];\r\n  const a01 = a[1];\r\n  const a02 = a[2];\r\n  const a03 = a[3];\r\n  const a10 = a[4];\r\n  const a11 = a[5];\r\n  const a12 = a[6];\r\n  const a13 = a[7];\r\n  const a20 = a[8];\r\n  const a21 = a[9];\r\n  const a22 = a[10];\r\n  const a23 = a[11];\r\n  const a30 = a[12];\r\n  const a31 = a[13];\r\n  const a32 = a[14];\r\n  const a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  let b0 = b[0];\r\n  let b1 = b[1];\r\n  let b2 = b[2];\r\n  let b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];\r\n  b1 = b[5];\r\n  b2 = b[6];\r\n  b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];\r\n  b1 = b[9];\r\n  b2 = b[10];\r\n  b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];\r\n  b1 = b[13];\r\n  b2 = b[14];\r\n  b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/multiply.js?");

/***/ }),

/***/ "../../math/mat4/rightMultiplyVec2.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/rightMultiplyVec2.js ***!
  \***************************************************************************/
/*! exports provided: rightMultiplyVec2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rightMultiplyVec2\", function() { return rightMultiplyVec2; });\n/* harmony import */ var _jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec2 */ \"../../math/vec2/main.js\");\n\r\n\r\n/**\r\n * Multiply the input matrix by a Vector2 (interpreted as 2 row, 1 column)\r\n * (result = M*v)\r\n * Fourth element is set to 1\r\n * @param {vec2} vector the input vector\r\n * @param {mat4} matrix the input matrix\r\n * @returns {vec2} output\r\n */\r\nconst rightMultiplyVec2 = ([v0, v1], matrix) => {\r\n  const v2 = 0;\r\n  const v3 = 1;\r\n  let x = v0 * matrix[0] + v1 * matrix[1] + v2 * matrix[2] + v3 * matrix[3];\r\n  let y = v0 * matrix[4] + v1 * matrix[5] + v2 * matrix[6] + v3 * matrix[7];\r\n  const w = v0 * matrix[12] + v1 * matrix[13] + v2 * matrix[14] + v3 * matrix[15];\r\n\r\n  // scale such that fourth element becomes 1:\r\n  if (w !== 1) {\r\n    const invw = 1.0 / w;\r\n    x *= invw;\r\n    y *= invw;\r\n  }\r\n  return Object(_jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_0__[\"fromValues\"])(x, y);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/rightMultiplyVec2.js?");

/***/ }),

/***/ "../../math/mat4/rightMultiplyVec3.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/rightMultiplyVec3.js ***!
  \***************************************************************************/
/*! exports provided: rightMultiplyVec3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rightMultiplyVec3\", function() { return rightMultiplyVec3; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Multiply the input matrix by a Vector3 (interpreted as 3 row, 1 column)\r\n * (result = M*v)\r\n * Fourth element is set to 1\r\n * @param {vec3} vector the input vector\r\n * @param {mat4} matrix the input matrix\r\n * @returns {vec3} output\r\n */\r\nconst rightMultiplyVec3 = ([v0, v1, v2], matrix) => {\r\n  const v3 = 1;\r\n  let x = v0 * matrix[0] + v1 * matrix[1] + v2 * matrix[2] + v3 * matrix[3];\r\n  let y = v0 * matrix[4] + v1 * matrix[5] + v2 * matrix[6] + v3 * matrix[7];\r\n  let z = v0 * matrix[8] + v1 * matrix[9] + v2 * matrix[10] + v3 * matrix[11];\r\n  const w = v0 * matrix[12] + v1 * matrix[13] + v2 * matrix[14] + v3 * matrix[15];\r\n\r\n  // scale such that fourth element becomes 1:\r\n  if (w !== 1) {\r\n    const invw = 1.0 / w;\r\n    x *= invw;\r\n    y *= invw;\r\n    z *= invw;\r\n  }\r\n  return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromValues\"])(x, y, z);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/rightMultiplyVec3.js?");

/***/ }),

/***/ "../../math/mat4/subtract.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/subtract.js ***!
  \******************************************************************/
/*! exports provided: subtract */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nconst subtract = (a, b) => [\r\n  a[0] - b[0],\r\n  a[1] - b[1],\r\n  a[2] - b[2],\r\n  a[3] - b[3],\r\n  a[4] - b[4],\r\n  a[5] - b[5],\r\n  a[6] - b[6],\r\n  a[7] - b[7],\r\n  a[8] - b[8],\r\n  a[9] - b[9],\r\n  a[10] - b[10],\r\n  a[11] - b[11],\r\n  a[12] - b[12],\r\n  a[13] - b[13],\r\n  a[14] - b[14],\r\n  a[15] - b[15]];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/subtract.js?");

/***/ }),

/***/ "../../math/plane/equals.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/equals.js ***!
  \*****************************************************************/
/*! exports provided: equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/**\r\n * Compare the given planes for equality\r\n * @return {boolean} true if planes are equal\r\n */\r\nconst equals = (a, b) => (a[0] === b[0]) && (a[1] === b[1]) && (a[2] === b[2]) && (a[3] === b[3]);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/equals.js?");

/***/ }),

/***/ "../../math/plane/flip.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/flip.js ***!
  \***************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/**\r\n * Flip the given plane (vec4)\r\n *\r\n * @param {vec4} vec - plane to flip\r\n * @return {vec4} flipped plane\r\n */\r\nconst flip = ([x = 0, y = 0, z = 0, w = 0]) => [-x, -y, -z, -w];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/flip.js?");

/***/ }),

/***/ "../../math/plane/fromNormalAndPoint.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromNormalAndPoint.js ***!
  \*****************************************************************************/
/*! exports provided: fromNormalAndPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromNormalAndPoint\", function() { return fromNormalAndPoint; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Create a new plane from the given normal and point values\r\n * @param {Vec3} normal  - vector 3D\r\n * @param {Vec3}  point- vector 3D\r\n * @returns {Array} a new plane with properly typed values\r\n */\r\nconst fromNormalAndPoint = (normal, point) => {\r\n  const u = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"unit\"])(normal);\r\n  const w = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(point, u);\r\n  return [u[0], u[1], u[2], w];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromNormalAndPoint.js?");

/***/ }),

/***/ "../../math/plane/fromPoints.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromPoints.js ***!
  \*********************************************************************/
/*! exports provided: fromPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return fromPoints; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Create a new plane from the given points\r\n *\r\n * @param {Vec3} a - 3D point\r\n * @param {Vec3} b - 3D point\r\n * @param {Vec3} c - 3D point\r\n * @returns {Vec4} a new plane with properly typed values\r\n */\r\nconst fromPoints = (a, b, c) => {\r\n  // let n = b.minus(a).cross(c.minus(a)).unit()\r\n  // FIXME optimize later\r\n  const ba = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(b, a);\r\n  const ca = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(c, a);\r\n  const cr = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(ba, ca);\r\n  const normal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"unit\"])(cr); // normal part\r\n  //\r\n  const w = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(normal, a);\r\n  return [normal[0], normal[1], normal[2], w];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromPoints.js?");

/***/ }),

/***/ "../../math/plane/fromPointsRandom.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromPointsRandom.js ***!
  \***************************************************************************/
/*! exports provided: fromPointsRandom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPointsRandom\", function() { return fromPointsRandom; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\nconst EPS = 1e-5;\r\n\r\n/** Create a new plane from the given points like fromPoints,\r\n * but allow the vectors to be on one point or one line\r\n * in such a case a random plane through the given points is constructed\r\n * @param {Vec3} a - 3D point\r\n * @param {Vec3} b - 3D point\r\n * @param {Vec3} c - 3D point\r\n * @returns {Vec4} a new plane with properly typed values\r\n */\r\nconst fromPointsRandom = (a, b, c) => {\r\n  let v1 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(b, a);\r\n  let v2 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(c, a);\r\n  if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"length\"])(v1) < EPS) {\r\n    v1 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"random\"])(v2);\r\n  }\r\n  if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"length\"])(v2) < EPS) {\r\n    v2 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"random\"])(v1);\r\n  }\r\n  let normal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(v1, v2);\r\n  if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"length\"])(normal) < EPS) {\r\n    // this would mean that v1 == v2.negated()\r\n    v2 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"random\"])(v1);\r\n    normal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(v1, v2);\r\n  }\r\n  normal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"unit\"])(normal);\r\n  return Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromValues\"])(normal[0], normal[1], normal[2], Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(normal, a));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromPointsRandom.js?");

/***/ }),

/***/ "../../math/plane/main.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/main.js ***!
  \***************************************************************/
/*! exports provided: equals, flip, fromNormalAndPoint, fromPoints, fromPointsRandom, signedDistanceToPoint, splitLineSegmentByPlane, toXYPlaneTransforms, transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _equals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./equals */ \"../../math/plane/equals.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return _equals__WEBPACK_IMPORTED_MODULE_0__[\"equals\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flip */ \"../../math/plane/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_1__[\"flip\"]; });\n\n/* harmony import */ var _fromNormalAndPoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromNormalAndPoint */ \"../../math/plane/fromNormalAndPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromNormalAndPoint\", function() { return _fromNormalAndPoint__WEBPACK_IMPORTED_MODULE_2__[\"fromNormalAndPoint\"]; });\n\n/* harmony import */ var _fromPoints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromPoints */ \"../../math/plane/fromPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return _fromPoints__WEBPACK_IMPORTED_MODULE_3__[\"fromPoints\"]; });\n\n/* harmony import */ var _fromPointsRandom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromPointsRandom */ \"../../math/plane/fromPointsRandom.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPointsRandom\", function() { return _fromPointsRandom__WEBPACK_IMPORTED_MODULE_4__[\"fromPointsRandom\"]; });\n\n/* harmony import */ var _signedDistanceToPoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./signedDistanceToPoint */ \"../../math/plane/signedDistanceToPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"signedDistanceToPoint\", function() { return _signedDistanceToPoint__WEBPACK_IMPORTED_MODULE_5__[\"signedDistanceToPoint\"]; });\n\n/* harmony import */ var _splitLineSegmentByPlane__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./splitLineSegmentByPlane */ \"../../math/plane/splitLineSegmentByPlane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"splitLineSegmentByPlane\", function() { return _splitLineSegmentByPlane__WEBPACK_IMPORTED_MODULE_6__[\"splitLineSegmentByPlane\"]; });\n\n/* harmony import */ var _toXYPlaneTransforms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./toXYPlaneTransforms */ \"../../math/plane/toXYPlaneTransforms.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toXYPlaneTransforms\", function() { return _toXYPlaneTransforms__WEBPACK_IMPORTED_MODULE_7__[\"toXYPlaneTransforms\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transform */ \"../../math/plane/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_8__[\"transform\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/main.js?");

/***/ }),

/***/ "../../math/plane/signedDistanceToPoint.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/signedDistanceToPoint.js ***!
  \********************************************************************************/
/*! exports provided: signedDistanceToPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"signedDistanceToPoint\", function() { return signedDistanceToPoint; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\nconst W = 3;\r\n\r\n/**\r\n * Calculate the distance to the given point\r\n * @return {Number} signed distance to point\r\n */\r\nconst signedDistanceToPoint = (plane, vector) => Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, vector) - plane[W];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/signedDistanceToPoint.js?");

/***/ }),

/***/ "../../math/plane/splitLineSegmentByPlane.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/splitLineSegmentByPlane.js ***!
  \**********************************************************************************/
/*! exports provided: splitLineSegmentByPlane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"splitLineSegmentByPlane\", function() { return splitLineSegmentByPlane; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Split the given line by the given plane.\r\n * Robust splitting, even if the line is parallel to the plane\r\n * @return {vec3} a new point\r\n */\r\nconst splitLineSegmentByPlane = (plane, p1, p2) => {\r\n  const direction = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(p2, p1);\r\n  let lambda = (plane[3] - Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, p1)) / Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, direction);\r\n  if (Number.isNaN(lambda)) lambda = 0;\r\n  if (lambda > 1) lambda = 1;\r\n  if (lambda < 0) lambda = 0;\r\n  return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(p1, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(lambda, direction));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/splitLineSegmentByPlane.js?");

/***/ }),

/***/ "../../math/plane/toXYPlaneTransforms.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/toXYPlaneTransforms.js ***!
  \******************************************************************************/
/*! exports provided: toXYPlaneTransforms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toXYPlaneTransforms\", function() { return toXYPlaneTransforms; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\nconst X = 0;\r\nconst Y = 1;\r\nconst Z = 2;\r\nconst W = 3;\r\n\r\nconst toXYPlaneTransforms = (plane, rightVector) => {\r\n  if (rightVector === undefined) {\r\n    rightVector = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"random\"])(plane);\r\n  }\r\n\r\n  const v = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"unit\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"cross\"])(plane, rightVector));\r\n  const u = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"cross\"])(v, plane);\r\n  const p = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"multiply\"])(plane, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"fromScalar\"])(plane[W]));\r\n\r\n  return {\r\n    toXYPlane: Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromValues\"])(\r\n      u[X], v[X], plane[X], 0,\r\n      u[Y], v[Y], plane[Y], 0,\r\n      u[Z], v[Z], plane[Z], 0,\r\n      0, 0, -plane[W], 1),\r\n    fromXYPlane: Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromValues\"])(\r\n      u[X], u[Y], u[Z], 0,\r\n      v[X], v[Y], v[Z], 0,\r\n      plane[X], plane[Y], plane[Z], 0,\r\n      p[X], p[Y], p[Z], 1)\r\n  };\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/toXYPlaneTransforms.js?");

/***/ }),

/***/ "../../math/plane/transform.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/transform.js ***!
  \********************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flip */ \"../../math/plane/flip.js\");\n/* harmony import */ var _fromPoints__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromPoints */ \"../../math/plane/fromPoints.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Transform the given plane using the given matrix\r\n * @return {Array} a new plane with properly typed values\r\n */\r\nconst transform = (matrix, plane) => {\r\n  const ismirror = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_2__[\"isMirroring\"])(matrix);\r\n  // get two vectors in the plane:\r\n  const r = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_3__[\"random\"])(plane);\r\n  const u = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_3__[\"cross\"])(plane, r);\r\n  const v = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_3__[\"cross\"])(plane, u);\r\n  // get 3 points in the plane:\r\n  let point1 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_3__[\"multiply\"])(plane, [plane[3], plane[3], plane[3]]);\r\n  let point2 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_3__[\"add\"])(point1, u);\r\n  let point3 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_3__[\"add\"])(point1, v);\r\n  // transform the points:\r\n  point1 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_3__[\"transform\"])(matrix, point1);\r\n  point2 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_3__[\"transform\"])(matrix, point2);\r\n  point3 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_3__[\"transform\"])(matrix, point3);\r\n  // and create a new plane from the transformed points:\r\n  let newplane = Object(_fromPoints__WEBPACK_IMPORTED_MODULE_1__[\"fromPoints\"])(point1, point2, point3);\r\n  if (ismirror) {\r\n    // the transform is mirroring so mirror the plane\r\n    newplane = Object(_flip__WEBPACK_IMPORTED_MODULE_0__[\"flip\"])(newplane);\r\n  }\r\n  return newplane;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/transform.js?");

/***/ }),

/***/ "../../math/poly3/canonicalize.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/canonicalize.js ***!
  \***********************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ \"../../math/poly3/map.js\");\n\r\n\r\n\r\nconst canonicalize = polygon => Object(_map__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(polygon, _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/canonicalize.js?");

/***/ }),

/***/ "../../math/poly3/eachEdge.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/eachEdge.js ***!
  \*******************************************************************/
/*! exports provided: eachEdge */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachEdge\", function() { return eachEdge; });\n/**\r\n * Emits the edges of a polygon in order.\r\n *\r\n * @param {function} the function to call with each edge in order.\r\n * @param {Polygon} the polygon of which to emit the edges.\r\n */\r\n\r\nconst eachEdge = (options = {}, thunk, polygon) => {\r\n  if (polygon.length >= 2) {\r\n    for (let nth = 1; nth < polygon.length; nth++) {\r\n      thunk(polygon[nth - 1], polygon[nth]);\r\n    }\r\n    thunk(polygon[polygon.length - 1], polygon[0]);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/eachEdge.js?");

/***/ }),

/***/ "../../math/poly3/flip.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/flip.js ***!
  \***************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/**\r\n * Flip the give polygon to face the opposite direction.\r\n *\r\n * @param {poly3} polygon - the polygon to flip\r\n * @returns {poly3} a new poly3\r\n */\r\nconst flip = (polygon) => [...polygon].reverse();\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/flip.js?");

/***/ }),

/***/ "../../math/poly3/fromPoints.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/fromPoints.js ***!
  \*********************************************************************/
/*! exports provided: fromPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return fromPoints; });\n/**\r\n * Create a poly3 from the given points.\r\n *\r\n * @param {Array[]} points - list of points\r\n * @param {plane} [planeof] - plane of the polygon\r\n *\r\n * @example\r\n * const points = [\r\n *   [0,  0, 0],\r\n *   [0, 10, 0],\r\n *   [0, 10, 10]\r\n * ]\r\n * const polygon = createFromPoints(points)\r\n */\r\nconst fromPoints = (points, planeof) => [...points];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/fromPoints.js?");

/***/ }),

/***/ "../../math/poly3/isConvex.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/isConvex.js ***!
  \*******************************************************************/
/*! exports provided: isConvex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isConvex\", function() { return isConvex; });\n/* harmony import */ var _toPlane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPlane */ \"../../math/poly3/toPlane.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n/**\r\n * Check whether the polygon is convex.\r\n * @returns {boolean}\r\n */\r\nconst areVerticesConvex = (vertices, plane) => {\r\n  const numvertices = vertices.length;\r\n  if (numvertices > 2) {\r\n    let prevprevpos = vertices[numvertices - 2];\r\n    let prevpos = vertices[numvertices - 1];\r\n    for (let i = 0; i < numvertices; i++) {\r\n      const pos = vertices[i];\r\n      if (!isConvexPoint(prevprevpos, prevpos, pos, plane)) {\r\n        return false;\r\n      }\r\n      prevprevpos = prevpos;\r\n      prevpos = pos;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n// calculate whether three points form a convex corner\r\n//  prevpoint, point, nextpoint: the 3 coordinates (Vector3D instances)\r\n//  normal: the normal vector of the plane\r\nconst isConvexPoint = (prevpoint, point, nextpoint, plane) => {\r\n  const crossproduct = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"cross\"])(\r\n    Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(point, prevpoint),\r\n    Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(nextpoint, point)\r\n  );\r\n  // note: plane ~= normal point\r\n  const crossdotnormal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"dot\"])(crossproduct, plane);\r\n  return crossdotnormal >= 0;\r\n};\r\n\r\n// FIXME: not used anywhere ???\r\n/* const isStrictlyConvexPoint = function (prevpoint, point, nextpoint, normal) {\r\n  let crossproduct = point.minus(prevpoint).cross(nextpoint.minus(point))\r\n  let crossdotnormal = crossproduct.dot(normal)\r\n  return (crossdotnormal >= EPS)\r\n} */\r\n\r\nconst isConvex = (polygon) => areVerticesConvex(polygon, Object(_toPlane__WEBPACK_IMPORTED_MODULE_0__[\"toPlane\"])(polygon));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/isConvex.js?");

/***/ }),

/***/ "../../math/poly3/main.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/main.js ***!
  \***************************************************************/
/*! exports provided: canonicalize, eachEdge, flip, fromPoints, isConvex, map, measureArea, measureBoundingBox, measureBoundingSphere, toEdges, toPlane, toPoints, transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canonicalize */ \"../../math/poly3/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]; });\n\n/* harmony import */ var _eachEdge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eachEdge */ \"../../math/poly3/eachEdge.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"eachEdge\", function() { return _eachEdge__WEBPACK_IMPORTED_MODULE_1__[\"eachEdge\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./flip */ \"../../math/poly3/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_2__[\"flip\"]; });\n\n/* harmony import */ var _fromPoints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromPoints */ \"../../math/poly3/fromPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return _fromPoints__WEBPACK_IMPORTED_MODULE_3__[\"fromPoints\"]; });\n\n/* harmony import */ var _isConvex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isConvex */ \"../../math/poly3/isConvex.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isConvex\", function() { return _isConvex__WEBPACK_IMPORTED_MODULE_4__[\"isConvex\"]; });\n\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./map */ \"../../math/poly3/map.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return _map__WEBPACK_IMPORTED_MODULE_5__[\"map\"]; });\n\n/* harmony import */ var _measureArea__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./measureArea */ \"../../math/poly3/measureArea.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureArea\", function() { return _measureArea__WEBPACK_IMPORTED_MODULE_6__[\"measureArea\"]; });\n\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../math/poly3/measureBoundingBox.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return _measureBoundingBox__WEBPACK_IMPORTED_MODULE_7__[\"measureBoundingBox\"]; });\n\n/* harmony import */ var _measureBoundingSphere__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./measureBoundingSphere */ \"../../math/poly3/measureBoundingSphere.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingSphere\", function() { return _measureBoundingSphere__WEBPACK_IMPORTED_MODULE_8__[\"measureBoundingSphere\"]; });\n\n/* harmony import */ var _toEdges__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./toEdges */ \"../../math/poly3/toEdges.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toEdges\", function() { return _toEdges__WEBPACK_IMPORTED_MODULE_9__[\"toEdges\"]; });\n\n/* harmony import */ var _toPlane__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./toPlane */ \"../../math/poly3/toPlane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPlane\", function() { return _toPlane__WEBPACK_IMPORTED_MODULE_10__[\"toPlane\"]; });\n\n/* harmony import */ var _toPoints__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toPoints */ \"../../math/poly3/toPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return _toPoints__WEBPACK_IMPORTED_MODULE_11__[\"toPoints\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./transform */ \"../../math/poly3/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_12__[\"transform\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/main.js?");

/***/ }),

/***/ "../../math/poly3/map.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/map.js ***!
  \**************************************************************/
/*! exports provided: map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map; });\n/**\r\n * Transforms the vertices of a polygon, producing a new poly3.\r\n *\r\n * The polygon does not need to be a poly3, but may be any array of\r\n * points. The points being represented as arrays of values.\r\n *\r\n * If the original has a 'plane' property, the result will have a clone\r\n * of the plane.\r\n *\r\n * @param {Function} [transform=vec3.clone] - function used to transform the vertices.\r\n * @returns {Array} a copy with transformed vertices and copied properties.\r\n *\r\n * @example\r\n * const vertices = [ [0, 0, 0], [0, 10, 0], [0, 10, 10] ]\r\n * let observed = poly3.map(vertices)\r\n */\r\nconst map = (original, transform) => {\r\n  if (original === undefined) {\r\n    original = [];\r\n  }\r\n  if (transform === undefined) {\r\n    transform = _ => _;\r\n  }\r\n  return original.map(vertex => transform(vertex));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/map.js?");

/***/ }),

/***/ "../../math/poly3/measureArea.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureArea.js ***!
  \**********************************************************************/
/*! exports provided: measureArea */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureArea\", function() { return measureArea; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n// measure the area of the given poly3 (3D planar polygon)\r\n// translated from the orginal C++ code from Dan Sunday\r\n// 2000 softSurfer http://geomalgorithms.com\r\nconst measureArea = (poly3) => {\r\n  const n = poly3.length;\r\n  if (n < 3) {\r\n    return 0; // degenerate polygon\r\n  }\r\n  const vertices = poly3;\r\n\r\n  // calculate a real normal\r\n  const a = vertices[0];\r\n  const b = vertices[1];\r\n  const c = vertices[2];\r\n  const ba = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(b, a);\r\n  const ca = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(c, a);\r\n  const normal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(ba, ca);\r\n  // let normal = b.minus(a).cross(c.minus(a))\r\n  // let normal = poly3.plane.normal // unit based normal, CANNOT use\r\n\r\n  // determin direction of projection\r\n  const ax = Math.abs(normal[0]);\r\n  const ay = Math.abs(normal[1]);\r\n  const az = Math.abs(normal[2]);\r\n  const an = Math.sqrt((ax * ax) + (ay * ay) + (az * az)); // length of normal\r\n\r\n  let coord = 3; // ignore Z coordinates\r\n  if ((ax > ay) && (ax > az)) {\r\n    coord = 1; // ignore X coordinates\r\n  } else\r\n  if (ay > az) {\r\n    coord = 2; // ignore Y coordinates\r\n  }\r\n\r\n  let area = 0;\r\n  let h = 0;\r\n  let i = 1;\r\n  let j = 2;\r\n  switch (coord) {\r\n    case 1: // ignore X coordinates\r\n    // compute area of 2D projection\r\n      for (i = 1; i < n; i++) {\r\n        h = i - 1;\r\n        j = (i + 1) % n;\r\n        area += (vertices[i][1] * (vertices[j][2] - vertices[h][2]));\r\n      }\r\n      area += (vertices[0][1] * (vertices[1][2] - vertices[n - 1][2]));\r\n      // scale to get area\r\n      area *= (an / (2 * normal[0]));\r\n      break;\r\n\r\n    case 2: // ignore Y coordinates\r\n    // compute area of 2D projection\r\n      for (i = 1; i < n; i++) {\r\n        h = i - 1;\r\n        j = (i + 1) % n;\r\n        area += (vertices[i][2] * (vertices[j][0] - vertices[h][0]));\r\n      }\r\n      area += (vertices[0][2] * (vertices[1][0] - vertices[n - 1][0]));\r\n      // scale to get area\r\n      area *= (an / (2 * normal[1]));\r\n      break;\r\n\r\n    case 3: // ignore Z coordinates\r\n    default:\r\n    // compute area of 2D projection\r\n      for (i = 1; i < n; i++) {\r\n        h = i - 1;\r\n        j = (i + 1) % n;\r\n        area += (vertices[i][0] * (vertices[j][1] - vertices[h][1]));\r\n      }\r\n      area += (vertices[0][0] * (vertices[1][1] - vertices[n - 1][1]));\r\n      // scale to get area\r\n      area *= (an / (2 * normal[2]));\r\n      break;\r\n  }\r\n  return area;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureArea.js?");

/***/ }),

/***/ "../../math/poly3/measureBoundingBox.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureBoundingBox.js ***!
  \*****************************************************************************/
/*! exports provided: measureBoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return measureBoundingBox; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n// returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)\r\nconst measureBoundingBox = (poly3) => {\r\n  const cached = poly3.boundingBox;\r\n  if (cached === undefined) {\r\n    const vertices = poly3;\r\n    const numvertices = vertices.length;\r\n    let min = numvertices === 0 ? Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromValues\"])() : vertices[0];\r\n    let max = min;\r\n    for (let i = 1; i < numvertices; i++) {\r\n      min = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"min\"])(min, vertices[i]);\r\n      max = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"max\"])(max, vertices[i]);\r\n    }\r\n    poly3.boundingBox = [min, max];\r\n    return poly3.boundingBox;\r\n  }\r\n  return cached;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureBoundingBox.js?");

/***/ }),

/***/ "../../math/poly3/measureBoundingSphere.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureBoundingSphere.js ***!
  \********************************************************************************/
/*! exports provided: measureBoundingSphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingSphere\", function() { return measureBoundingSphere; });\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../math/poly3/measureBoundingBox.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n/** Measure the bounding sphere of the given poly3\r\n * @param {poly3} the poly3 to measure\r\n * @returns computed bounding sphere; center (vec3) and radius\r\n */\r\nconst measureBoundingSphere = (poly3) => {\r\n  const box = Object(_measureBoundingBox__WEBPACK_IMPORTED_MODULE_0__[\"measureBoundingBox\"])(poly3);\r\n  const center = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"scale\"])(0.5, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"add\"])(box[0], box[1]));\r\n  const radius = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"distance\"])(center, box[1]);\r\n  return [center, radius];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureBoundingSphere.js?");

/***/ }),

/***/ "../../math/poly3/toEdges.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toEdges.js ***!
  \******************************************************************/
/*! exports provided: toEdges */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toEdges\", function() { return toEdges; });\n/* harmony import */ var _eachEdge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eachEdge */ \"../../math/poly3/eachEdge.js\");\n\r\n\r\n/**\r\n * Converts the polygon to an ordered list of edges.\r\n *\r\n * @param {Polygon}\r\n * @returns {Edges}\r\n */\r\n\r\nconst toEdges = (options = {}, polygon) => {\r\n  let edges = [];\r\n  Object(_eachEdge__WEBPACK_IMPORTED_MODULE_0__[\"eachEdge\"])({}, (a, b) => edges.push([a, b]), polygon);\r\n  return edges;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toEdges.js?");

/***/ }),

/***/ "../../math/poly3/toPlane.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toPlane.js ***!
  \******************************************************************/
/*! exports provided: toPlane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPlane\", function() { return toPlane; });\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n\r\n\r\nconst toPlane = (polygon) => {\r\n  if (polygon.plane === undefined) {\r\n    if (polygon.length >= 3) {\r\n      polygon.plane = Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__[\"fromPoints\"])(...polygon);\r\n    } else {\r\n      throw Error('die');\r\n    }\r\n  }\r\n  return polygon.plane;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toPlane.js?");

/***/ }),

/***/ "../../math/poly3/toPoints.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toPoints.js ***!
  \*******************************************************************/
/*! exports provided: toPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return toPoints; });\n/**\r\n * Returns the polygon as an array of points.\r\n * @param {Polygon}\r\n * @returns {Points}\r\n */\r\n\r\nconst toPoints = polygon => polygon;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toPoints.js?");

/***/ }),

/***/ "../../math/poly3/transform.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/transform.js ***!
  \********************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ \"../../math/poly3/map.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n\r\n// Affine transformation of polygon. Returns a new polygon.\r\nconst transform = (matrix, polygons) => {\r\n  const transformed = Object(_map__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(polygons, vertex => Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"transform\"])(matrix, vertex));\r\n  if (Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"isMirroring\"])(matrix)) {\r\n    // Reverse the order to preserve the orientation.\r\n    transformed.reverse();\r\n  }\r\n  return transformed;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/transform.js?");

/***/ }),

/***/ "../../math/ray3/canonicalize.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/canonicalize.js ***!
  \**********************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Produce a canonical version of a ray3.\r\n * @param {ray3} the ray\r\n * @returns {ray3} the canonical ray3\r\n */\r\nconst canonicalize = ([point, unitDirection]) => [Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(point), Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(unitDirection)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/canonicalize.js?");

/***/ }),

/***/ "../../math/ray3/closestPoint.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/closestPoint.js ***!
  \**********************************************************************/
/*! exports provided: closestPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"closestPoint\", function() { return closestPoint; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Determine the closest point on the given line to the given point.\r\n *\r\n * @param {vec3} point the point of reference\r\n * @param {line3} line the 3D line for calculations\r\n * @returns {vec3} a new point\r\n */\r\nconst closestPoint = (point, [lpoint, ldirection]) => {\r\n  const a = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(point, lpoint), ldirection);\r\n  const b = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(ldirection, ldirection);\r\n  const t = a / b;\r\n  return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(lpoint, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(t, ldirection));\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/closestPoint.js?");

/***/ }),

/***/ "../../math/ray3/direction.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/direction.js ***!
  \*******************************************************************/
/*! exports provided: direction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"direction\", function() { return direction; });\n/**\r\n * Return the direction of the given line.\r\n *\r\n * @return {vec3} the relative vector in the direction of the line\r\n */\r\nconst direction = ([point, unitDirection]) => unitDirection;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/direction.js?");

/***/ }),

/***/ "../../math/ray3/distanceToPoint.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/distanceToPoint.js ***!
  \*************************************************************************/
/*! exports provided: distanceToPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distanceToPoint\", function() { return distanceToPoint; });\n/* harmony import */ var _closestPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./closestPoint */ \"../../math/ray3/closestPoint.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n/**\r\n * Calculate the distance (positive) between the given point and line\r\n *\r\n * @param {vec3} point the point of reference\r\n * @param {line3} line the 3D line of reference\r\n * @return {Number} distance between line and point\r\n */\r\nconst distanceToPoint = (point, line) => {\r\n  const closest = Object(_closestPoint__WEBPACK_IMPORTED_MODULE_0__[\"closestPoint\"])(point, line);\r\n  const distancevector = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(point, closest);\r\n  return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"length\"])(distancevector);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/distanceToPoint.js?");

/***/ }),

/***/ "../../math/ray3/equals.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/equals.js ***!
  \****************************************************************/
/*! exports provided: equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Compare the given 3D lines for equality\r\n *\r\n * @return {boolean} true if lines are equal\r\n */\r\nconst equals = ([point1, unit1], [point2, unit2]) => {\r\n  // compare directions (unit vectors)\r\n  if (!Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"equals\"])(unit1, unit2)) return false;\r\n\r\n  // compare points\r\n  if (!Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"equals\"])(point1, point2)) return false;\r\n\r\n  // why would lines with the same slope (direction) and different points be equal?\r\n  // let distance = distanceToPoint(line1, line2[0])\r\n  // if (distance > EPS) return false\r\n\r\n  return true;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/equals.js?");

/***/ }),

/***/ "../../math/ray3/fromPlanes.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPlanes.js ***!
  \********************************************************************/
/*! exports provided: fromPlanes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPlanes\", function() { return fromPlanes; });\n/* harmony import */ var _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromPointAndDirection */ \"../../math/ray3/fromPointAndDirection.js\");\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n\r\nconst EPS = 1e-5;\r\n\r\nconst fromPlanes = (plane1, plane2) => {\r\n  let direction = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"cross\"])(plane1, plane2);\r\n  let length = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"length\"])(direction);\r\n  if (length < EPS) {\r\n    throw new Error('parallel planes do not intersect');\r\n  }\r\n  length = (1.0 / length);\r\n  direction = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"scale\"])(length, direction);\r\n\r\n  const absx = Math.abs(direction[0]);\r\n  const absy = Math.abs(direction[1]);\r\n  const absz = Math.abs(direction[2]);\r\n  let origin;\r\n  let r;\r\n  if ((absx >= absy) && (absx >= absz)) {\r\n    // find a point p for which x is zero\r\n    r = Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_1__[\"solve2Linear\"])(plane1[1], plane1[2], plane2[1], plane2[2], plane1[3], plane2[3]);\r\n    origin = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"fromValues\"])(0, r[0], r[1]);\r\n  } else if ((absy >= absx) && (absy >= absz)) {\r\n    // find a point p for which y is zero\r\n    r = Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_1__[\"solve2Linear\"])(plane1[0], plane1[2], plane2[0], plane2[2], plane1[3], plane2[3]);\r\n    origin = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"fromValues\"])(r[0], 0, r[1]);\r\n  } else {\r\n    // find a point p for which z is zero\r\n    r = Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_1__[\"solve2Linear\"])(plane1[0], plane1[1], plane2[0], plane2[1], plane1[3], plane2[3]);\r\n    origin = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"fromValues\"])(r[0], r[1], 0);\r\n  }\r\n  return Object(_fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__[\"fromPointAndDirection\"])(origin, direction);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPlanes.js?");

/***/ }),

/***/ "../../math/ray3/fromPointAndDirection.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPointAndDirection.js ***!
  \*******************************************************************************/
/*! exports provided: fromPointAndDirection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPointAndDirection\", function() { return fromPointAndDirection; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Create a line in 3D space from the given data.\r\n *\r\n * The point can be any random point on the line.\r\n * The direction must be a vector with positive or negative distance from the point.\r\n * See the logic of fromPoints for appropriate values.\r\n *\r\n * @param {vec3} point start point of the line segment\r\n * @param {vec3} direction direction of the line segment\r\n * @returns {line3} a new unbounded 3D line\r\n */\r\nconst fromPointAndDirection = (point, direction) => [point, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"unit\"])(direction)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPointAndDirection.js?");

/***/ }),

/***/ "../../math/ray3/fromPoints.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPoints.js ***!
  \********************************************************************/
/*! exports provided: fromPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return fromPoints; });\n/* harmony import */ var _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromPointAndDirection */ \"../../math/ray3/fromPointAndDirection.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n/**\r\n * Creates a new 3D line that passes through the given points.\r\n *\r\n * @param {vec3} p1 start point of the line segment\r\n * @param {vec3} p2 end point of the line segment\r\n * @returns {line3} a new unbounded 3D line\r\n */\r\nconst fromPoints = (p1, p2) => {\r\n  const direction = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(p2, p1);\r\n  return Object(_fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__[\"fromPointAndDirection\"])(p1, direction);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPoints.js?");

/***/ }),

/***/ "../../math/ray3/intersectPointOfLineAndPlane.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/intersectPointOfLineAndPlane.js ***!
  \**************************************************************************************/
/*! exports provided: intersectPointOfLineAndPlane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersectPointOfLineAndPlane\", function() { return intersectPointOfLineAndPlane; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Determine the closest point on the given plane to the given line.\r\n *\r\n * The point of intersection will be invalid if parallel to the plane, e.g. NaN.\r\n *\r\n * @param {plane} plane the plane of reference\r\n * @param {line3} line the 3D line of reference\r\n * @returns {vec3} a new point\r\n */\r\nconst intersectPointOfLineAndPlane = (plane, line) => {\r\n  // plane: plane.normal * p = plane.w\r\n  const pnormal = plane;\r\n  const pw = plane[3];\r\n\r\n  const lpoint = line[0];\r\n  const ldirection = line[1];\r\n\r\n  // point: p = line.point + labda * line.direction\r\n  const lambda = (pw - Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(pnormal, lpoint)) / Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(pnormal, ldirection);\r\n\r\n  const point = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(lpoint, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(lambda, ldirection));\r\n  return point;\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/intersectPointOfLineAndPlane.js?");

/***/ }),

/***/ "../../math/ray3/main.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/main.js ***!
  \**************************************************************/
/*! exports provided: canonicalize, closestPoint, direction, distanceToPoint, equals, fromPointAndDirection, fromPlanes, fromPoints, intersectPointOfLineAndPlane, origin, reverse, transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canonicalize */ \"../../math/ray3/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]; });\n\n/* harmony import */ var _closestPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./closestPoint */ \"../../math/ray3/closestPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"closestPoint\", function() { return _closestPoint__WEBPACK_IMPORTED_MODULE_1__[\"closestPoint\"]; });\n\n/* harmony import */ var _direction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./direction */ \"../../math/ray3/direction.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"direction\", function() { return _direction__WEBPACK_IMPORTED_MODULE_2__[\"direction\"]; });\n\n/* harmony import */ var _distanceToPoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./distanceToPoint */ \"../../math/ray3/distanceToPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"distanceToPoint\", function() { return _distanceToPoint__WEBPACK_IMPORTED_MODULE_3__[\"distanceToPoint\"]; });\n\n/* harmony import */ var _equals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./equals */ \"../../math/ray3/equals.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return _equals__WEBPACK_IMPORTED_MODULE_4__[\"equals\"]; });\n\n/* harmony import */ var _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fromPointAndDirection */ \"../../math/ray3/fromPointAndDirection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPointAndDirection\", function() { return _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_5__[\"fromPointAndDirection\"]; });\n\n/* harmony import */ var _fromPlanes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fromPlanes */ \"../../math/ray3/fromPlanes.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPlanes\", function() { return _fromPlanes__WEBPACK_IMPORTED_MODULE_6__[\"fromPlanes\"]; });\n\n/* harmony import */ var _fromPoints__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fromPoints */ \"../../math/ray3/fromPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return _fromPoints__WEBPACK_IMPORTED_MODULE_7__[\"fromPoints\"]; });\n\n/* harmony import */ var _intersectPointOfLineAndPlane__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./intersectPointOfLineAndPlane */ \"../../math/ray3/intersectPointOfLineAndPlane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"intersectPointOfLineAndPlane\", function() { return _intersectPointOfLineAndPlane__WEBPACK_IMPORTED_MODULE_8__[\"intersectPointOfLineAndPlane\"]; });\n\n/* harmony import */ var _origin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./origin */ \"../../math/ray3/origin.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"origin\", function() { return _origin__WEBPACK_IMPORTED_MODULE_9__[\"origin\"]; });\n\n/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./reverse */ \"../../math/ray3/reverse.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"reverse\", function() { return _reverse__WEBPACK_IMPORTED_MODULE_10__[\"reverse\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./transform */ \"../../math/ray3/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_11__[\"transform\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/main.js?");

/***/ }),

/***/ "../../math/ray3/origin.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/origin.js ***!
  \****************************************************************/
/*! exports provided: origin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"origin\", function() { return origin; });\n/**\r\n * Return the origin of the given line.\r\n *\r\n * @param {line3} line the 3D line of reference\r\n * @return {vec3} the origin of the line\r\n */\r\nconst origin = ([origin, unitDirection]) => origin;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/origin.js?");

/***/ }),

/***/ "../../math/ray3/reverse.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/reverse.js ***!
  \*****************************************************************/
/*! exports provided: reverse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reverse\", function() { return reverse; });\n/* harmony import */ var _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromPointAndDirection */ \"../../math/ray3/fromPointAndDirection.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n/**\r\n * Create a new line in the opposite direction as the given.\r\n *\r\n * @param {line3} line the 3D line to reverse\r\n * @returns {line3} a new unbounded 3D line\r\n */\r\nconst reverse = ([point, unitDirection]) => Object(_fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__[\"fromPointAndDirection\"])(point, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"negate\"])(unitDirection));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/reverse.js?");

/***/ }),

/***/ "../../math/ray3/transform.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/transform.js ***!
  \*******************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromPointAndDirection */ \"../../math/ray3/fromPointAndDirection.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n/**\r\n * Transforms the given 3D line using the given matrix.\r\n *\r\n * @param {mat4} matrix matrix to transform with\r\n * @param {line3} line the 3D line to transform\r\n * @returns {line3} a new unbounded 3D line\r\n */\r\nconst transform = (matrix, [point, direction]) => {\r\n  const pointPlusDirection = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"add\"])(point, direction);\r\n  const newpoint = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"transform\"])(matrix, point);\r\n  const newPointPlusDirection = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"transform\"])(matrix, pointPlusDirection);\r\n  const newdirection = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(newPointPlusDirection, newpoint);\r\n  return Object(_fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__[\"fromPointAndDirection\"])(newpoint, newdirection);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/transform.js?");

/***/ }),

/***/ "../../math/utils/clamp.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/clamp.js ***!
  \****************************************************************/
/*! exports provided: clamp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clamp\", function() { return clamp; });\nconst clamp = (value, min, max) => Math.min(Math.max(value, min), max);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/clamp.js?");

/***/ }),

/***/ "../../math/utils/degToRad.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/degToRad.js ***!
  \*******************************************************************/
/*! exports provided: degToRad */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"degToRad\", function() { return degToRad; });\n// radians = degrees * PI / 180\r\nconst degToRad = degrees => degrees * 0.017453292519943295;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/degToRad.js?");

/***/ }),

/***/ "../../math/utils/main.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/main.js ***!
  \***************************************************************/
/*! exports provided: clamp, degToRad, quantizeForSpace, radToDeg, reallyQuantizeForSpace, solve2Linear */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _clamp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clamp */ \"../../math/utils/clamp.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"clamp\", function() { return _clamp__WEBPACK_IMPORTED_MODULE_0__[\"clamp\"]; });\n\n/* harmony import */ var _degToRad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./degToRad */ \"../../math/utils/degToRad.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"degToRad\", function() { return _degToRad__WEBPACK_IMPORTED_MODULE_1__[\"degToRad\"]; });\n\n/* harmony import */ var _quantizeForSpace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./quantizeForSpace */ \"../../math/utils/quantizeForSpace.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"quantizeForSpace\", function() { return _quantizeForSpace__WEBPACK_IMPORTED_MODULE_2__[\"quantizeForSpace\"]; });\n\n/* harmony import */ var _radToDeg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./radToDeg */ \"../../math/utils/radToDeg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"radToDeg\", function() { return _radToDeg__WEBPACK_IMPORTED_MODULE_3__[\"radToDeg\"]; });\n\n/* harmony import */ var _reallyQuantizeForSpace__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reallyQuantizeForSpace */ \"../../math/utils/reallyQuantizeForSpace.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"reallyQuantizeForSpace\", function() { return _reallyQuantizeForSpace__WEBPACK_IMPORTED_MODULE_4__[\"reallyQuantizeForSpace\"]; });\n\n/* harmony import */ var _solve2Linear__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./solve2Linear */ \"../../math/utils/solve2Linear.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"solve2Linear\", function() { return _solve2Linear__WEBPACK_IMPORTED_MODULE_5__[\"solve2Linear\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/main.js?");

/***/ }),

/***/ "../../math/utils/quantizeForSpace.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/quantizeForSpace.js ***!
  \***************************************************************************/
/*! exports provided: quantizeForSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quantizeForSpace\", function() { return quantizeForSpace; });\n// TODO: Clean this up.\r\nconst quantizeForSpace = (value) => value;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/quantizeForSpace.js?");

/***/ }),

/***/ "../../math/utils/radToDeg.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/radToDeg.js ***!
  \*******************************************************************/
/*! exports provided: radToDeg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"radToDeg\", function() { return radToDeg; });\n// degrees = radians * 180 / PI\r\nconst radToDeg = radians => radians * 57.29577951308232;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/radToDeg.js?");

/***/ }),

/***/ "../../math/utils/reallyQuantizeForSpace.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/reallyQuantizeForSpace.js ***!
  \*********************************************************************************/
/*! exports provided: reallyQuantizeForSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reallyQuantizeForSpace\", function() { return reallyQuantizeForSpace; });\nconst spatialResolution = 1e5;\r\n\r\n// Quantize values for use in spatial coordinates, and so on, even if the usual quantizeForSpace is disabled.\r\nconst reallyQuantizeForSpace = (value) => (Math.round(value * spatialResolution) / spatialResolution);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/reallyQuantizeForSpace.js?");

/***/ }),

/***/ "../../math/utils/solve2Linear.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/solve2Linear.js ***!
  \***********************************************************************/
/*! exports provided: solve2Linear */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"solve2Linear\", function() { return solve2Linear; });\nconst solve2Linear = (a, b, c, d, u, v) => {\r\n  const det = a * d - b * c;\r\n  const invdet = 1.0 / det;\r\n  const x = u * d - b * v;\r\n  const y = -u * c + a * v;\r\n  return [x * invdet, y * invdet];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/solve2Linear.js?");

/***/ }),

/***/ "../../math/vec2/abs.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/abs.js ***!
  \*************************************************************/
/*! exports provided: abs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"abs\", function() { return abs; });\n/**\r\n * Calculates the absolute value of the give vector\r\n *\r\n * @param {vec2} vec - given value\r\n * @returns {vec2} absolute value of the vector\r\n */\r\nconst abs = ([x, y]) => [Math.abs(x), Math.abs(y)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/abs.js?");

/***/ }),

/***/ "../../math/vec2/add.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/add.js ***!
  \*************************************************************/
/*! exports provided: add */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst add = ([ax, ay], [bx, by]) => [ax + bx, ay + by];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/add.js?");

/***/ }),

/***/ "../../math/vec2/angleDegrees.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/angleDegrees.js ***!
  \**********************************************************************/
/*! exports provided: angleDegrees */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angleDegrees\", function() { return angleDegrees; });\n/* harmony import */ var _angleRadians__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./angleRadians */ \"../../math/vec2/angleRadians.js\");\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n\r\n\r\n\r\nconst angleDegrees = (vector) => Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_1__[\"radToDeg\"])(Object(_angleRadians__WEBPACK_IMPORTED_MODULE_0__[\"angleRadians\"])(vector));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/angleDegrees.js?");

/***/ }),

/***/ "../../math/vec2/angleRadians.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/angleRadians.js ***!
  \**********************************************************************/
/*! exports provided: angleRadians */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angleRadians\", function() { return angleRadians; });\n// y=sin, x=cos\r\nconst angleRadians = ([x, y]) => Math.atan2(y, x);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/angleRadians.js?");

/***/ }),

/***/ "../../math/vec2/canonicalize.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/canonicalize.js ***!
  \**********************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n\r\n\r\nconst canonicalize = ([x, y]) => [Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])(x), Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])(y)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/canonicalize.js?");

/***/ }),

/***/ "../../math/vec2/cross.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/cross.js ***!
  \***************************************************************/
/*! exports provided: cross */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return cross; });\n/**\r\n * Computes the cross product (3D) of two vectors\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} cross product\r\n */\r\n// Alternatively return vec3.cross(out, vec3.fromVec2(a), vec3.fromVec2(b))\r\nconst cross = (a, b) => [0, 0, a[0] * b[1] - a[1] * b[0]];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/cross.js?");

/***/ }),

/***/ "../../math/vec2/distance.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/distance.js ***!
  \******************************************************************/
/*! exports provided: distance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return distance; });\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nconst distance = ([ax, ay], [bx, by]) => {\r\n  const x = bx - ax;\r\n  const y = by - ay;\r\n  return Math.sqrt(x * x + y * y);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/distance.js?");

/***/ }),

/***/ "../../math/vec2/divide.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/divide.js ***!
  \****************************************************************/
/*! exports provided: divide */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return divide; });\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst divide = ([ax, ay], [bx, by]) => [ax / bx, ay / by];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/divide.js?");

/***/ }),

/***/ "../../math/vec2/dot.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/dot.js ***!
  \*************************************************************/
/*! exports provided: dot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nconst dot = ([ax, ay], [bx, by]) => (ax * bx) + (ay * by);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/dot.js?");

/***/ }),

/***/ "../../math/vec2/equals.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/equals.js ***!
  \****************************************************************/
/*! exports provided: equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\nconst equals = ([ax, ay], [bx, by]) => (ax === bx) && (ay === by);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/equals.js?");

/***/ }),

/***/ "../../math/vec2/fromAngleDegrees.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromAngleDegrees.js ***!
  \**************************************************************************/
/*! exports provided: fromAngleDegrees */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromAngleDegrees\", function() { return fromAngleDegrees; });\nconst fromAngleDegrees = (degrees) => {\r\n  const radians = Math.PI * degrees / 180;\r\n  return [Math.cos(radians), Math.sin(radians)];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromAngleDegrees.js?");

/***/ }),

/***/ "../../math/vec2/fromAngleRadians.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromAngleRadians.js ***!
  \**************************************************************************/
/*! exports provided: fromAngleRadians */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromAngleRadians\", function() { return fromAngleRadians; });\nconst fromAngleRadians = (radians) => [Math.cos(radians), Math.sin(radians)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromAngleRadians.js?");

/***/ }),

/***/ "../../math/vec2/fromPoint.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromPoint.js ***!
  \*******************************************************************/
/*! exports provided: fromPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPoint\", function() { return fromPoint; });\n/**\r\n * Creates a new vec2 from the point given.\r\n * Missing ranks are implicitly zero.\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nconst fromPoint = ([x = 0, y = 0]) => [x, y];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromPoint.js?");

/***/ }),

/***/ "../../math/vec2/fromScalar.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromScalar.js ***!
  \********************************************************************/
/*! exports provided: fromScalar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScalar\", function() { return fromScalar; });\n/** Create a vec2 from a single scalar value\r\n * @param  {Float} scalar\r\n * @returns {Vec2} a new vec2\r\n */\r\nconst fromScalar = (scalar) => [scalar, scalar];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromScalar.js?");

/***/ }),

/***/ "../../math/vec2/fromValues.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromValues.js ***!
  \********************************************************************/
/*! exports provided: fromValues */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/**\r\n * Creates a new vec3 initialized with the given values\r\n * Any missing ranks are implicitly zero.\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec3} a new 2D vector\r\n */\r\nconst fromValues = (x = 0, y = 0) => [x, y];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromValues.js?");

/***/ }),

/***/ "../../math/vec2/length.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/length.js ***!
  \****************************************************************/
/*! exports provided: length */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nconst length = ([x, y]) => Math.sqrt((x * x) + (y * y));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/length.js?");

/***/ }),

/***/ "../../math/vec2/lerp.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/lerp.js ***!
  \**************************************************************/
/*! exports provided: lerp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst lerp = (t, [ax, ay], [bx, by]) => [ax + t * (bx - ax),\r\n                                                ay + t * (by - ay)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/lerp.js?");

/***/ }),

/***/ "../../math/vec2/main.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/main.js ***!
  \**************************************************************/
/*! exports provided: abs, add, angle, angleDegrees, angleRadians, canonicalize, cross, distance, divide, dot, equals, fromAngle, fromAngleDegrees, fromAngleRadians, fromPoint, fromScalar, fromValues, length, lerp, max, min, multiply, negate, normal, normalize, rotate, scale, squaredDistance, squaredLength, subtract, transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angle\", function() { return angle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromAngle\", function() { return fromAngle; });\n/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abs */ \"../../math/vec2/abs.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"abs\", function() { return _abs__WEBPACK_IMPORTED_MODULE_0__[\"abs\"]; });\n\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add */ \"../../math/vec2/add.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return _add__WEBPACK_IMPORTED_MODULE_1__[\"add\"]; });\n\n/* harmony import */ var _angleDegrees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./angleDegrees */ \"../../math/vec2/angleDegrees.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"angleDegrees\", function() { return _angleDegrees__WEBPACK_IMPORTED_MODULE_2__[\"angleDegrees\"]; });\n\n/* harmony import */ var _angleRadians__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./angleRadians */ \"../../math/vec2/angleRadians.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"angleRadians\", function() { return _angleRadians__WEBPACK_IMPORTED_MODULE_3__[\"angleRadians\"]; });\n\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./canonicalize */ \"../../math/vec2/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_4__[\"canonicalize\"]; });\n\n/* harmony import */ var _cross__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cross */ \"../../math/vec2/cross.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return _cross__WEBPACK_IMPORTED_MODULE_5__[\"cross\"]; });\n\n/* harmony import */ var _distance__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./distance */ \"../../math/vec2/distance.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return _distance__WEBPACK_IMPORTED_MODULE_6__[\"distance\"]; });\n\n/* harmony import */ var _divide__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./divide */ \"../../math/vec2/divide.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return _divide__WEBPACK_IMPORTED_MODULE_7__[\"divide\"]; });\n\n/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dot */ \"../../math/vec2/dot.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return _dot__WEBPACK_IMPORTED_MODULE_8__[\"dot\"]; });\n\n/* harmony import */ var _equals__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./equals */ \"../../math/vec2/equals.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return _equals__WEBPACK_IMPORTED_MODULE_9__[\"equals\"]; });\n\n/* harmony import */ var _fromAngleDegrees__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./fromAngleDegrees */ \"../../math/vec2/fromAngleDegrees.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromAngleDegrees\", function() { return _fromAngleDegrees__WEBPACK_IMPORTED_MODULE_10__[\"fromAngleDegrees\"]; });\n\n/* harmony import */ var _fromAngleRadians__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./fromAngleRadians */ \"../../math/vec2/fromAngleRadians.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromAngleRadians\", function() { return _fromAngleRadians__WEBPACK_IMPORTED_MODULE_11__[\"fromAngleRadians\"]; });\n\n/* harmony import */ var _fromPoint__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./fromPoint */ \"../../math/vec2/fromPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPoint\", function() { return _fromPoint__WEBPACK_IMPORTED_MODULE_12__[\"fromPoint\"]; });\n\n/* harmony import */ var _fromScalar__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./fromScalar */ \"../../math/vec2/fromScalar.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromScalar\", function() { return _fromScalar__WEBPACK_IMPORTED_MODULE_13__[\"fromScalar\"]; });\n\n/* harmony import */ var _fromValues__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./fromValues */ \"../../math/vec2/fromValues.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return _fromValues__WEBPACK_IMPORTED_MODULE_14__[\"fromValues\"]; });\n\n/* harmony import */ var _length__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./length */ \"../../math/vec2/length.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return _length__WEBPACK_IMPORTED_MODULE_15__[\"length\"]; });\n\n/* harmony import */ var _lerp__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./lerp */ \"../../math/vec2/lerp.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return _lerp__WEBPACK_IMPORTED_MODULE_16__[\"lerp\"]; });\n\n/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./max */ \"../../math/vec2/max.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return _max__WEBPACK_IMPORTED_MODULE_17__[\"max\"]; });\n\n/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./min */ \"../../math/vec2/min.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return _min__WEBPACK_IMPORTED_MODULE_18__[\"min\"]; });\n\n/* harmony import */ var _multiply__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./multiply */ \"../../math/vec2/multiply.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return _multiply__WEBPACK_IMPORTED_MODULE_19__[\"multiply\"]; });\n\n/* harmony import */ var _negate__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./negate */ \"../../math/vec2/negate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return _negate__WEBPACK_IMPORTED_MODULE_20__[\"negate\"]; });\n\n/* harmony import */ var _normal__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./normal */ \"../../math/vec2/normal.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"normal\", function() { return _normal__WEBPACK_IMPORTED_MODULE_21__[\"normal\"]; });\n\n/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./normalize */ \"../../math/vec2/normalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return _normalize__WEBPACK_IMPORTED_MODULE_22__[\"normalize\"]; });\n\n/* harmony import */ var _rotate__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./rotate */ \"../../math/vec2/rotate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return _rotate__WEBPACK_IMPORTED_MODULE_23__[\"rotate\"]; });\n\n/* harmony import */ var _scale__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./scale */ \"../../math/vec2/scale.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return _scale__WEBPACK_IMPORTED_MODULE_24__[\"scale\"]; });\n\n/* harmony import */ var _squaredDistance__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./squaredDistance */ \"../../math/vec2/squaredDistance.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return _squaredDistance__WEBPACK_IMPORTED_MODULE_25__[\"squaredDistance\"]; });\n\n/* harmony import */ var _squaredLength__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./squaredLength */ \"../../math/vec2/squaredLength.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return _squaredLength__WEBPACK_IMPORTED_MODULE_26__[\"squaredLength\"]; });\n\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./subtract */ \"../../math/vec2/subtract.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return _subtract__WEBPACK_IMPORTED_MODULE_27__[\"subtract\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./transform */ \"../../math/vec2/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_28__[\"transform\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst angle = _angleRadians__WEBPACK_IMPORTED_MODULE_3__[\"angleRadians\"];\r\nconst fromAngle = _fromAngleRadians__WEBPACK_IMPORTED_MODULE_11__[\"fromAngleRadians\"];\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/main.js?");

/***/ }),

/***/ "../../math/vec2/max.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/max.js ***!
  \*************************************************************/
/*! exports provided: max */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst max = ([ax, ay], [bx, by]) => [Math.max(ax, bx), Math.max(ay, by)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/max.js?");

/***/ }),

/***/ "../../math/vec2/min.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/min.js ***!
  \*************************************************************/
/*! exports provided: min */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return min; });\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst min = ([ax, ay], [bx, by]) => [Math.min(ax, bx), Math.min(ay, by)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/min.js?");

/***/ }),

/***/ "../../math/vec2/multiply.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/multiply.js ***!
  \******************************************************************/
/*! exports provided: multiply */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst multiply = ([ax, ay], [bx, by]) => [ax * bx, ay * by];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/multiply.js?");

/***/ }),

/***/ "../../math/vec2/negate.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/negate.js ***!
  \****************************************************************/
/*! exports provided: negate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return negate; });\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nconst negate = ([x, y]) => [-x, -y];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/negate.js?");

/***/ }),

/***/ "../../math/vec2/normal.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/normal.js ***!
  \****************************************************************/
/*! exports provided: normal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normal\", function() { return normal; });\n/* harmony import */ var _rotate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rotate */ \"../../math/vec2/rotate.js\");\n\r\n\r\n/**\r\n * Calculates the normal value of the give vector\r\n * The normal value is the given vector rotated 90 degress.\r\n *\r\n * @param {vec2} vec - given value\r\n * @returns {vec2} normal value of the vector\r\n */\r\nconst normal = (vec) => Object(_rotate__WEBPACK_IMPORTED_MODULE_0__[\"rotate\"])(Math.PI / 2, vec);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/normal.js?");

/***/ }),

/***/ "../../math/vec2/normalize.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/normalize.js ***!
  \*******************************************************************/
/*! exports provided: normalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/**\r\n * Normalize the given vector.\r\n *\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} normalized (unit) vector\r\n */\r\nconst normalize = ([x, y]) => {\r\n  let len = x * x + y * y;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    return [x * len, y * len];\r\n  } else {\r\n    return [x, y];\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/normalize.js?");

/***/ }),

/***/ "../../math/vec2/rotate.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/rotate.js ***!
  \****************************************************************/
/*! exports provided: rotate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/**\r\n * Rotates a vec2 by an angle\r\n *\r\n * @param {Number} angle the angle of rotation (in radians)\r\n * @param {vec2} vector the vector to rotate\r\n * @returns {vec2} out\r\n */\r\nconst rotate = (angle, [x, y]) => {\r\n  const c = Math.cos(angle);\r\n  const s = Math.sin(angle);\r\n  return [x * c - y * s,\r\n          x * s + y * c];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/rotate.js?");

/***/ }),

/***/ "../../math/vec2/scale.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/scale.js ***!
  \***************************************************************/
/*! exports provided: scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {Number} amount amount to scale the vector by\r\n * @param {vec2} vector the vector to scale\r\n * @returns {vec2} out\r\n */\r\nconst scale = (amount, [x, y]) => [x * amount, y * amount];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/scale.js?");

/***/ }),

/***/ "../../math/vec2/squaredDistance.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/squaredDistance.js ***!
  \*************************************************************************/
/*! exports provided: squaredDistance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return squaredDistance; });\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nconst squaredDistance = ([ax, ay], [bx, by]) => {\r\n  const x = bx - ax;\r\n  const y = by - ay;\r\n  return (x * x) + (y * y);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/squaredDistance.js?");

/***/ }),

/***/ "../../math/vec2/squaredLength.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/squaredLength.js ***!
  \***********************************************************************/
/*! exports provided: squaredLength */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nconst squaredLength = ([x, y]) => (x * x) + (y * y);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/squaredLength.js?");

/***/ }),

/***/ "../../math/vec2/subtract.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/subtract.js ***!
  \******************************************************************/
/*! exports provided: subtract */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst subtract = ([ax, ay], [bx, by]) => [ax - bx, ay - by];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/subtract.js?");

/***/ }),

/***/ "../../math/vec2/transform.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/transform.js ***!
  \*******************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {mat4} matrix matrix to transform with\r\n * @param {vec2} vector the vector to transform\r\n * @returns {vec2} out\r\n */\r\nconst transform = (matrix, [x, y]) => [matrix[0] * x + matrix[4] * y + matrix[12],\r\n                                              matrix[1] * x + matrix[5] * y + matrix[13]];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/transform.js?");

/***/ }),

/***/ "../../math/vec3/abs.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/abs.js ***!
  \*************************************************************/
/*! exports provided: abs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"abs\", function() { return abs; });\n/**\r\n * Calculates the absolute value of the give vector\r\n *\r\n * @param {vec3} [out] - receiving vector\r\n * @param {vec3} vec - given value\r\n * @returns {vec3} absolute value of the vector\r\n */\r\nconst abs = ([x, y, z]) => [Math.abs(x), Math.abs(y), Math.abs(z)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/abs.js?");

/***/ }),

/***/ "../../math/vec3/add.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/add.js ***!
  \*************************************************************/
/*! exports provided: add */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} a the first vector to add\r\n * @param {vec3} b the second vector to add\r\n * @returns {vec3} the added vectors\r\n */\r\nconst add = ([ax, ay, az], [bx, by, bz]) => [ax + bx, ay + by, az + bz];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/add.js?");

/***/ }),

/***/ "../../math/vec3/angle.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/angle.js ***!
  \***************************************************************/
/*! exports provided: angle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angle\", function() { return angle; });\n/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dot */ \"../../math/vec3/dot.js\");\n/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./normalize */ \"../../math/vec3/normalize.js\");\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n\r\n\r\n\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nconst angle = (a, b) => {\r\n  const cosine = Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_2__[\"reallyQuantizeForSpace\"])(Object(_dot__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(Object(_normalize__WEBPACK_IMPORTED_MODULE_1__[\"normalize\"])(a), Object(_normalize__WEBPACK_IMPORTED_MODULE_1__[\"normalize\"])(b)));\r\n  return cosine > 1.0 ? 0 : Math.acos(cosine);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/angle.js?");

/***/ }),

/***/ "../../math/vec3/canonicalize.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/canonicalize.js ***!
  \**********************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n\r\n\r\nconst canonicalize = ([x = 0, y = 0, z = 0]) => [Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])(x), Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])(y), Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])(z)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/canonicalize.js?");

/***/ }),

/***/ "../../math/vec3/cross.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/cross.js ***!
  \***************************************************************/
/*! exports provided: cross */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return cross; });\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst cross = ([ax, ay, az], [bx, by, bz]) => [ay * bz - az * by,\r\n                                                      az * bx - ax * bz,\r\n                                                      ax * by - ay * bx];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/cross.js?");

/***/ }),

/***/ "../../math/vec3/distance.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/distance.js ***!
  \******************************************************************/
/*! exports provided: distance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return distance; });\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nconst distance = ([ax, ay, az], [bx, by, bz]) => {\r\n  const x = bx - ax;\r\n  const y = by - ay;\r\n  const z = bz - az;\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/distance.js?");

/***/ }),

/***/ "../../math/vec3/divide.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/divide.js ***!
  \****************************************************************/
/*! exports provided: divide */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return divide; });\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst divide = ([ax, ay, az], [bx, by, bz]) => [ax / bx,\r\n                                                       ay / by,\r\n                                                       az / bz];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/divide.js?");

/***/ }),

/***/ "../../math/vec3/dot.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/dot.js ***!
  \*************************************************************/
/*! exports provided: dot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nconst dot = ([ax, ay, az], [bx, by, bz]) => (ax * bx) + (ay * by) + (az * bz);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/dot.js?");

/***/ }),

/***/ "../../math/vec3/equals.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/equals.js ***!
  \****************************************************************/
/*! exports provided: equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\nconst equals = ([ax, ay, az], [bx, by, bz]) => (ax === bx) && (ay === by) && (az === bz);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/equals.js?");

/***/ }),

/***/ "../../math/vec3/fromPoint.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromPoint.js ***!
  \*******************************************************************/
/*! exports provided: fromPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPoint\", function() { return fromPoint; });\n/**\r\n * Creates a new vec3 from the point given.\r\n * Missing ranks are implicitly zero.\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nconst fromPoint = ([x = 0, y = 0, z = 0]) => [x, y, z];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromPoint.js?");

/***/ }),

/***/ "../../math/vec3/fromScalar.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromScalar.js ***!
  \********************************************************************/
/*! exports provided: fromScalar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScalar\", function() { return fromScalar; });\n/** create a vec3 from a single scalar value\r\n * all components of the resulting vec3 have the value of the\r\n * input scalar\r\n * @param  {Float} scalar\r\n * @returns {Vec3}\r\n */\r\nconst fromScalar = (scalar) => [scalar, scalar, scalar];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromScalar.js?");

/***/ }),

/***/ "../../math/vec3/fromValues.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromValues.js ***!
  \********************************************************************/
/*! exports provided: fromValues */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nconst fromValues = (x = 0, y = 0, z = 0) => [x, y, z];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromValues.js?");

/***/ }),

/***/ "../../math/vec3/fromVec2.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromVec2.js ***!
  \******************************************************************/
/*! exports provided: fromVec2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromVec2\", function() { return fromVec2; });\n// extend to a 3D vector by adding a z coordinate:\r\nconst fromVec2 = ([x = 0, y = 0], z = 0) => [x, y, z];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromVec2.js?");

/***/ }),

/***/ "../../math/vec3/length.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/length.js ***!
  \****************************************************************/
/*! exports provided: length */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nconst length = ([x = 0, y = 0, z = 0]) => Math.sqrt((x * x) + (y * y) + (z * z));\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/length.js?");

/***/ }),

/***/ "../../math/vec3/lerp.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/lerp.js ***!
  \**************************************************************/
/*! exports provided: lerp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {Number} t interpolant (0.0 to 1.0) applied between the two inputs\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst lerp = (t, [ax, ay, az], [bx, by, bz]) => [ax + t * (bx - ax),\r\n                                                        ay + t * (by - ay),\r\n                                                        az + t * (bz - az)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/lerp.js?");

/***/ }),

/***/ "../../math/vec3/main.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/main.js ***!
  \**************************************************************/
/*! exports provided: abs, add, angle, canonicalize, cross, distance, divide, dot, equals, fromPoint, fromScalar, fromValues, fromVec2, length, lerp, max, min, multiply, negate, normalize, random, rotateX, rotateY, rotateZ, scale, squaredDistance, squaredLength, subtract, transform, unit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abs */ \"../../math/vec3/abs.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"abs\", function() { return _abs__WEBPACK_IMPORTED_MODULE_0__[\"abs\"]; });\n\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add */ \"../../math/vec3/add.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return _add__WEBPACK_IMPORTED_MODULE_1__[\"add\"]; });\n\n/* harmony import */ var _angle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./angle */ \"../../math/vec3/angle.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"angle\", function() { return _angle__WEBPACK_IMPORTED_MODULE_2__[\"angle\"]; });\n\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./canonicalize */ \"../../math/vec3/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_3__[\"canonicalize\"]; });\n\n/* harmony import */ var _cross__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cross */ \"../../math/vec3/cross.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return _cross__WEBPACK_IMPORTED_MODULE_4__[\"cross\"]; });\n\n/* harmony import */ var _distance__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./distance */ \"../../math/vec3/distance.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return _distance__WEBPACK_IMPORTED_MODULE_5__[\"distance\"]; });\n\n/* harmony import */ var _divide__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./divide */ \"../../math/vec3/divide.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return _divide__WEBPACK_IMPORTED_MODULE_6__[\"divide\"]; });\n\n/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dot */ \"../../math/vec3/dot.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return _dot__WEBPACK_IMPORTED_MODULE_7__[\"dot\"]; });\n\n/* harmony import */ var _equals__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./equals */ \"../../math/vec3/equals.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return _equals__WEBPACK_IMPORTED_MODULE_8__[\"equals\"]; });\n\n/* harmony import */ var _fromPoint__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./fromPoint */ \"../../math/vec3/fromPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPoint\", function() { return _fromPoint__WEBPACK_IMPORTED_MODULE_9__[\"fromPoint\"]; });\n\n/* harmony import */ var _fromScalar__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./fromScalar */ \"../../math/vec3/fromScalar.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromScalar\", function() { return _fromScalar__WEBPACK_IMPORTED_MODULE_10__[\"fromScalar\"]; });\n\n/* harmony import */ var _fromValues__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./fromValues */ \"../../math/vec3/fromValues.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return _fromValues__WEBPACK_IMPORTED_MODULE_11__[\"fromValues\"]; });\n\n/* harmony import */ var _fromVec2__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./fromVec2 */ \"../../math/vec3/fromVec2.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromVec2\", function() { return _fromVec2__WEBPACK_IMPORTED_MODULE_12__[\"fromVec2\"]; });\n\n/* harmony import */ var _length__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./length */ \"../../math/vec3/length.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return _length__WEBPACK_IMPORTED_MODULE_13__[\"length\"]; });\n\n/* harmony import */ var _lerp__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lerp */ \"../../math/vec3/lerp.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return _lerp__WEBPACK_IMPORTED_MODULE_14__[\"lerp\"]; });\n\n/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./max */ \"../../math/vec3/max.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return _max__WEBPACK_IMPORTED_MODULE_15__[\"max\"]; });\n\n/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./min */ \"../../math/vec3/min.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return _min__WEBPACK_IMPORTED_MODULE_16__[\"min\"]; });\n\n/* harmony import */ var _multiply__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./multiply */ \"../../math/vec3/multiply.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return _multiply__WEBPACK_IMPORTED_MODULE_17__[\"multiply\"]; });\n\n/* harmony import */ var _negate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./negate */ \"../../math/vec3/negate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return _negate__WEBPACK_IMPORTED_MODULE_18__[\"negate\"]; });\n\n/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./normalize */ \"../../math/vec3/normalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return _normalize__WEBPACK_IMPORTED_MODULE_19__[\"normalize\"]; });\n\n/* harmony import */ var _random__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./random */ \"../../math/vec3/random.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return _random__WEBPACK_IMPORTED_MODULE_20__[\"random\"]; });\n\n/* harmony import */ var _rotateX__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./rotateX */ \"../../math/vec3/rotateX.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return _rotateX__WEBPACK_IMPORTED_MODULE_21__[\"rotateX\"]; });\n\n/* harmony import */ var _rotateY__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./rotateY */ \"../../math/vec3/rotateY.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return _rotateY__WEBPACK_IMPORTED_MODULE_22__[\"rotateY\"]; });\n\n/* harmony import */ var _rotateZ__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./rotateZ */ \"../../math/vec3/rotateZ.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return _rotateZ__WEBPACK_IMPORTED_MODULE_23__[\"rotateZ\"]; });\n\n/* harmony import */ var _scale__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./scale */ \"../../math/vec3/scale.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return _scale__WEBPACK_IMPORTED_MODULE_24__[\"scale\"]; });\n\n/* harmony import */ var _squaredDistance__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./squaredDistance */ \"../../math/vec3/squaredDistance.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return _squaredDistance__WEBPACK_IMPORTED_MODULE_25__[\"squaredDistance\"]; });\n\n/* harmony import */ var _squaredLength__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./squaredLength */ \"../../math/vec3/squaredLength.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return _squaredLength__WEBPACK_IMPORTED_MODULE_26__[\"squaredLength\"]; });\n\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./subtract */ \"../../math/vec3/subtract.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return _subtract__WEBPACK_IMPORTED_MODULE_27__[\"subtract\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./transform */ \"../../math/vec3/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_28__[\"transform\"]; });\n\n/* harmony import */ var _unit__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./unit */ \"../../math/vec3/unit.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"unit\", function() { return _unit__WEBPACK_IMPORTED_MODULE_29__[\"unit\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/main.js?");

/***/ }),

/***/ "../../math/vec3/max.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/max.js ***!
  \*************************************************************/
/*! exports provided: max */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst max = ([ax, ay, az], [bx, by, bz]) => [Math.max(ax, bx),\r\n                                                    Math.max(ay, by),\r\n                                                    Math.max(az, bz)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/max.js?");

/***/ }),

/***/ "../../math/vec3/min.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/min.js ***!
  \*************************************************************/
/*! exports provided: min */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return min; });\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst min = ([ax, ay, az], [bx, by, bz]) => [Math.min(ax, bx),\r\n                                                    Math.min(ay, by),\r\n                                                    Math.min(az, bz)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/min.js?");

/***/ }),

/***/ "../../math/vec3/multiply.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/multiply.js ***!
  \******************************************************************/
/*! exports provided: multiply */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst multiply = ([ax, ay, az], [bx, by, bz]) => [(ax * bx), (ay * by), (az * bz)];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/multiply.js?");

/***/ }),

/***/ "../../math/vec3/negate.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/negate.js ***!
  \****************************************************************/
/*! exports provided: negate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return negate; });\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nconst negate = ([x, y, z]) => [-x, -y, -z];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/negate.js?");

/***/ }),

/***/ "../../math/vec3/normalize.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/normalize.js ***!
  \*******************************************************************/
/*! exports provided: normalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony import */ var _scale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scale */ \"../../math/vec3/scale.js\");\n\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nconst normalize = (a) => {\r\n  const [x, y, z] = a;\r\n  const len = (x * x) + (y * y) + (z * z);\r\n  if (len > 0) {\r\n    // TODO: evaluate use of glm_invsqrt here?\r\n    return Object(_scale__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(1 / Math.sqrt(len), a);\r\n  } else {\r\n    return a;\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/normalize.js?");

/***/ }),

/***/ "../../math/vec3/random.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/random.js ***!
  \****************************************************************/
/*! exports provided: random */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abs */ \"../../math/vec3/abs.js\");\n\r\n\r\n// find a vector that is somewhat perpendicular to this one\r\nconst random = (vec) => {\r\n  const temp = Object(_abs__WEBPACK_IMPORTED_MODULE_0__[\"abs\"])(vec);\r\n  if ((temp[0] <= temp[1]) && (temp[0] <= temp[2])) {\r\n    return [1, 0, 0];\r\n  } else if ((temp[1] <= temp[0]) && (temp[1] <= temp[2])) {\r\n    return [0, 1, 0];\r\n  } else {\r\n    return [0, 0, 1];\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/random.js?");

/***/ }),

/***/ "../../math/vec3/rotateX.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateX.js ***!
  \*****************************************************************/
/*! exports provided: rotateX */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add */ \"../../math/vec3/add.js\");\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subtract */ \"../../math/vec3/subtract.js\");\n\r\n\r\n\r\n/**\r\n * Rotate vector 3D vector around the x-axis\r\n * @param {Number} angle The angle of rotation\r\n * @param {vec3} origin The origin of the rotation\r\n * @param {vec3} vector The vec3 point to rotate\r\n * @returns {vec3} out\r\n */\r\nconst rotateX = (angle, origin, vector) => {\r\n  const p = Object(_subtract__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(vector, origin);\r\n  // rotate\r\n  const r = [p[0],\r\n             p[1] * Math.cos(angle) - p[2] * Math.sin(angle),\r\n             p[1] * Math.sin(angle) + p[2] * Math.cos(angle)];\r\n  // translate\r\n  return Object(_add__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(r, origin);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateX.js?");

/***/ }),

/***/ "../../math/vec3/rotateY.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateY.js ***!
  \*****************************************************************/
/*! exports provided: rotateY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add */ \"../../math/vec3/add.js\");\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subtract */ \"../../math/vec3/subtract.js\");\n\r\n\r\n\r\n/**\r\n * Rotate vector 3D vector around the y-axis\r\n * @param {Number} angle The angle of rotation\r\n * @param {vec3} origin The origin of the rotation\r\n * @param {vec3} vector The vec3 point to rotate\r\n * @returns {vec3} out\r\n */\r\nconst rotateY = (angle, origin, vector) => {\r\n  const p = Object(_subtract__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(vector, origin);\r\n  // rotate\r\n  const r = [p[2] * Math.sin(angle) + p[0] * Math.cos(angle),\r\n             p[1],\r\n             p[2] * Math.cos(angle) - p[0] * Math.sin(angle)];\r\n  // translate\r\n  return Object(_add__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(r, origin);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateY.js?");

/***/ }),

/***/ "../../math/vec3/rotateZ.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateZ.js ***!
  \*****************************************************************/
/*! exports provided: rotateZ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add */ \"../../math/vec3/add.js\");\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subtract */ \"../../math/vec3/subtract.js\");\n\r\n\r\n\r\n/**\r\n * Rotate vector 3D vector around the z-axis\r\n * @param {Number} angle The angle of rotation in radians\r\n * @param {vec3} origin The origin of the rotation\r\n * @param {vec3} vector The vec3 point to rotate\r\n * @returns {vec3} out\r\n */\r\nconst rotateZ = (angle, origin, vector) => {\r\n  const p = Object(_subtract__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(vector, origin);\r\n  // rotate\r\n  const r = [p[0] * Math.cos(angle) - p[1] * Math.sin(angle),\r\n             p[0] * Math.sin(angle) + p[1] * Math.cos(angle),\r\n             p[2]];\r\n  // translate\r\n  return Object(_add__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(r, origin);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateZ.js?");

/***/ }),

/***/ "../../math/vec3/scale.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/scale.js ***!
  \***************************************************************/
/*! exports provided: scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {Number} amount amount to scale the vector by\r\n * @param {vec3} vector the vector to scale\r\n * @returns {vec3} out\r\n */\r\nconst scale = (amount, [x, y, z]) => [x * amount,\r\n                                             y * amount,\r\n                                             z * amount];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/scale.js?");

/***/ }),

/***/ "../../math/vec3/squaredDistance.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/squaredDistance.js ***!
  \*************************************************************************/
/*! exports provided: squaredDistance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return squaredDistance; });\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nconst squaredDistance = ([ax, ay, az], [bx, by, bz]) => {\r\n  const x = bx - ax;\r\n  const y = by - ay;\r\n  const z = bz - az;\r\n  return (x * x) + (y * y) + (z * z);\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/squaredDistance.js?");

/***/ }),

/***/ "../../math/vec3/squaredLength.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/squaredLength.js ***!
  \***********************************************************************/
/*! exports provided: squaredLength */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nconst squaredLength = ([x, y, z]) => (x * x) + (y * y) + (z * z);\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/squaredLength.js?");

/***/ }),

/***/ "../../math/vec3/subtract.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/subtract.js ***!
  \******************************************************************/
/*! exports provided: subtract */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst subtract = ([ax, ay, az], [bx, by, bz]) => [ax - bx,\r\n                                                         ay - by,\r\n                                                         az - bz];\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/subtract.js?");

/***/ }),

/***/ "../../math/vec3/transform.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/transform.js ***!
  \*******************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n * @param {[[<vec3>], <mat4> , <vec3>]} params\r\n * @param {mat4} params[1] matrix matrix to transform with\r\n * @param {vec3} params[2] vector the vector to transform\r\n * @returns {vec3} out\r\n */\r\nconst transform = (matrix, [x = 0, y = 0, z = 0]) => {\r\n  let w = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15];\r\n  w = w || 1.0;\r\n  return [(matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12]) / w,\r\n          (matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13]) / w,\r\n          (matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14]) / w];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/transform.js?");

/***/ }),

/***/ "../../math/vec3/unit.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/unit.js ***!
  \**************************************************************/
/*! exports provided: unit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unit\", function() { return unit; });\n/* harmony import */ var _length__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./length */ \"../../math/vec3/length.js\");\n\r\n\r\n/**\r\n * Calculates the unit vector of the given vector\r\n *\r\n * @param {vec3} vector - the base vector for calculations\r\n * @returns {vec3} unit vector of the given vector\r\n */\r\nconst unit = (vector) => {\r\n  const [x, y, z] = vector;\r\n  const magnitude = Object(_length__WEBPACK_IMPORTED_MODULE_0__[\"length\"])(vector);\r\n  return [x / magnitude,\r\n          y / magnitude,\r\n          z / magnitude];\r\n};\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/unit.js?");

/***/ }),

/***/ "../../node_modules/abs-svg-path/index.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/abs-svg-path/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\nmodule.exports = absolutize\n\n/**\n * redefine `path` with absolute coordinates\n *\n * @param {Array} path\n * @return {Array}\n */\n\nfunction absolutize(path){\n\tvar startX = 0\n\tvar startY = 0\n\tvar x = 0\n\tvar y = 0\n\n\treturn path.map(function(seg){\n\t\tseg = seg.slice()\n\t\tvar type = seg[0]\n\t\tvar command = type.toUpperCase()\n\n\t\t// is relative\n\t\tif (type != command) {\n\t\t\tseg[0] = command\n\t\t\tswitch (type) {\n\t\t\t\tcase 'a':\n\t\t\t\t\tseg[6] += x\n\t\t\t\t\tseg[7] += y\n\t\t\t\t\tbreak\n\t\t\t\tcase 'v':\n\t\t\t\t\tseg[1] += y\n\t\t\t\t\tbreak\n\t\t\t\tcase 'h':\n\t\t\t\t\tseg[1] += x\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tfor (var i = 1; i < seg.length;) {\n\t\t\t\t\t\tseg[i++] += x\n\t\t\t\t\t\tseg[i++] += y\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// update cursor state\n\t\tswitch (command) {\n\t\t\tcase 'Z':\n\t\t\t\tx = startX\n\t\t\t\ty = startY\n\t\t\t\tbreak\n\t\t\tcase 'H':\n\t\t\t\tx = seg[1]\n\t\t\t\tbreak\n\t\t\tcase 'V':\n\t\t\t\ty = seg[1]\n\t\t\t\tbreak\n\t\t\tcase 'M':\n\t\t\t\tx = startX = seg[1]\n\t\t\t\ty = startY = seg[2]\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tx = seg[seg.length - 2]\n\t\t\t\ty = seg[seg.length - 1]\n\t\t}\n\n\t\treturn seg\n\t})\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/abs-svg-path/index.js?");

/***/ }),

/***/ "../../node_modules/base64-js/index.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/base64-js/index.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/base64-js/index.js?");

/***/ }),

/***/ "../../node_modules/bezier/index.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/bezier/index.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var cache = {\n    '1': bezier1\n  , '2': bezier2\n  , '3': bezier3\n  , '4': bezier4\n}\n\nmodule.exports = neat\nmodule.exports.prepare = prepare\n\nfunction neat(arr, t) {\n  return prepare(arr.length)(arr, t)\n}\n\nfunction prepare(pieces) {\n  pieces = +pieces|0\n  if (!pieces) throw new Error('Cannot create a interpolator with no elements')\n  if (cache[pieces]) return cache[pieces]\n\n  var fn = ['var ut = 1 - t', '']\n\n  var n = pieces\n  while (n--) {\n    for (var j = 0; j < n; j += 1) {\n      if (n+1 === pieces) {\n        fn.push('var p'+j+' = arr['+j+'] * ut + arr['+(j+1)+'] * t')\n      } else\n      if (n > 1) {\n        fn.push('p'+j+' = p'+j+' * ut + p'+(j+1)+' * t')\n      } else {\n        fn.push('return p'+j+' * ut + p'+(j+1)+' * t')\n      }\n    }\n    if (n > 1) fn.push('')\n  }\n\n  fn = [\n    'return function bezier'+pieces+'(arr, t) {'\n    , fn.map(function(s) { return '  ' + s }).join('\\n')\n    , '}'\n  ].join('\\n')\n\n  return Function(fn)()\n}\n\n//\n// Including the first four degrees\n// manually - there's a slight performance penalty\n// to generated code. It's outweighed by\n// the gains of the optimisations, but always\n// helps to cover the most common cases :)\n//\n\nfunction bezier1(arr) {\n  return arr[0]\n}\n\nfunction bezier2(arr, t) {\n  return arr[0] + (arr[1] - arr[0]) * t\n}\n\nfunction bezier3(arr, t) {\n  var ut = 1 - t\n  return (arr[0] * ut + arr[1] * t) * ut + (arr[1] * ut + arr[2] * t) * t\n}\n\nfunction bezier4(arr, t) {\n  var ut = 1 - t\n  var a1 = arr[1] * ut + arr[2] * t\n  return ((arr[0] * ut + arr[1] * t) * ut + a1 * t) * ut + (a1 * ut + (arr[2] * ut + arr[3] * t) * t) * t\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/bezier/index.js?");

/***/ }),

/***/ "../../node_modules/buffer/index.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/buffer/index.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"../../node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"../../node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"../../node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"../../node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/buffer/index.js?");

/***/ }),

/***/ "../../node_modules/curvify-svg-path/arc-to-curves.js":
/*!*******************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/curvify-svg-path/arc-to-curves.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var max = Math.max\nvar abs = Math.abs\nvar pow = Math.pow\nvar sin = Math.sin\nvar cos = Math.cos\nvar tan = Math.tan\nvar acos = Math.acos\nvar sqrt = Math.sqrt\nvar ceil = Math.ceil\nvar τ = Math.PI * 2\n\nmodule.exports = curves\n\nfunction curves (px, py, cx, cy, rx, ry, xrot, large, sweep) {\n  if (rx === 0 || ry === 0) return []\n\n  xrot = xrot || 0\n  large = large || 0\n  sweep = sweep || 0\n\n  var sinphi = sin(xrot * τ / 360)\n  var cosphi = cos(xrot * τ / 360)\n\n  var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2\n  var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2\n  if (pxp === 0 && pyp === 0) return []\n\n  rx = abs(rx)\n  ry = abs(ry)\n\n  var lambda = (\n    pow(pxp, 2) / pow(rx, 2) +\n    pow(pyp, 2) / pow(ry, 2)\n  )\n\n  if (lambda > 1) {\n    rx *= sqrt(lambda)\n    ry *= sqrt(lambda)\n  }\n\n  var centre = getArcCentre(px, py, cx, cy, rx, ry, large, sweep, sinphi, cosphi, pxp, pyp)\n  var centrex = centre[0]\n  var centrey = centre[1]\n  var ang1 = centre[2]\n  var ang2 = centre[3]\n\n  var segments = max(ceil(abs(ang2) / (τ / 4)), 1)\n  if (!segments) return []\n\n  var curves = []\n  ang2 /= segments\n  while (segments--) {\n    curves.push(approxUnitArc(ang1, ang2))\n    ang1 += ang2\n  }\n\n  var result = []\n  var curve, a, b, c\n  var i = 0, l = curves.length\n\n  while (i < l) {\n    curve = curves[i++]\n    a = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centrex, centrey)\n    b = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centrex, centrey)\n    c = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centrex, centrey)\n    result[result.length] = [a[0], a[1], b[0], b[1], c[0], c[1]]\n  }\n\n  return result\n}\n\nfunction mapToEllipse (curve, rx, ry, cosphi, sinphi, centrex, centrey) {\n  var x = curve[0] * rx\n  var y = curve[1] * ry\n\n  var xp = cosphi * x - sinphi * y\n  var yp = sinphi * x + cosphi * y\n\n  return [xp + centrex, yp + centrey]\n}\n\nfunction approxUnitArc (ang1, ang2) {\n  var a = 4 / 3 * tan(ang2 / 4)\n\n  var x1 = cos(ang1)\n  var y1 = sin(ang1)\n  var x2 = cos(ang1 + ang2)\n  var y2 = sin(ang1 + ang2)\n\n  return [\n    [x1 - y1 * a, y1 + x1 * a ],\n    [x2 + y2 * a, y2 - x2 * a],\n    [x2, y2]\n  ]\n}\n\nfunction getArcCentre (px, py, cx, cy, rx, ry, large, sweep, sinphi, cosphi, pxp, pyp) {\n  var rxsq = pow(rx, 2)\n  var rysq = pow(ry, 2)\n  var pxpsq = pow(pxp, 2)\n  var pypsq = pow(pyp, 2)\n\n  var radicant = (rxsq * rysq) - (rxsq * pypsq) - (rysq * pxpsq)\n\n  if (radicant < 0) radicant = 0\n  radicant /= (rxsq * pypsq) + (rysq * pxpsq)\n  radicant = sqrt(radicant) * (large === sweep ? -1 : 1)\n\n  var centrexp = radicant * rx / ry * pyp\n  var centreyp = radicant * -ry / rx * pxp\n  var centrex = cosphi * centrexp - sinphi * centreyp + (px + cx) / 2\n  var centrey = sinphi * centrexp + cosphi * centreyp + (py + cy) / 2\n\n  var vx1 = (pxp - centrexp) / rx\n  var vy1 = (pyp - centreyp) / ry\n  var vx2 = (-pxp - centrexp) / rx\n  var vy2 = (-pyp - centreyp) / ry\n\n  var ang1 = vectorAngle(1, 0, vx1, vy1)\n  var ang2 = vectorAngle(vx1, vy1, vx2, vy2)\n\n  if (sweep === 0 && ang2 > 0) ang2 -= τ\n  if (sweep === 1 && ang2 < 0) ang2 += τ\n\n  return [centrex, centrey, ang1, ang2]\n}\n\nfunction vectorAngle (ux, uy, vx, vy) {\n  var sign = (ux * vy - uy * vx < 0) ? -1 : 1\n  var umag = sqrt(ux * ux + uy * uy)\n  var vmag = sqrt(ux * ux + uy * uy)\n  var dot = ux * vx + uy * vy\n\n  var div = dot / (umag * vmag)\n  if (div > 1) div = 1\n  if (div < -1) div = -1\n\n  return sign * acos(div)\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/curvify-svg-path/arc-to-curves.js?");

/***/ }),

/***/ "../../node_modules/curvify-svg-path/index.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/curvify-svg-path/index.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arc = __webpack_require__(/*! ./arc-to-curves */ \"../../node_modules/curvify-svg-path/arc-to-curves.js\")\n\nmodule.exports = curvify\n\nfunction curvify (path) {\n  var result = []\n  var cmd, prev, curves\n  var x = 0, y = 0\n  var bx = 0, by = 0\n  var sx = 0, sy = 0\n  var qx, qy, cx, cy\n  var i = 0, j, m, sl\n  var l = path.length\n\n  while (i < l) {\n    seg = path[i++], cmd = seg[0]\n\n    if (cmd == 'M') sx = seg[1], sy = seg[2]\n    else if (cmd == 'L') seg = line(x, y, seg[1], seg[2])\n    else if (cmd == 'H') seg = line(x, y, seg[1], y)\n    else if (cmd == 'V') seg = line(x, y, x, seg[1])\n    else if (cmd == 'Z') seg = line(x, y, sx, sy)\n\n    else if (cmd == 'A') {\n      curves = arc(\n        x, y, seg[6], seg[7],\n        seg[1], seg[2], seg[3],\n        seg[4], seg[5]\n      )\n\n      m = curves.length\n      if (!m) continue\n      j = 0\n\n      while (j < m) {\n        c = curves[j++]\n        seg = ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\n        if (j < m) result[result.length] = seg\n      }\n    }\n\n    else if (cmd == 'S') {\n      cx = x, cy = y\n      if (prev == 'C' || prev == 'S') {\n        cx += cx - bx,\n        cy += cy - by\n      }\n      seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]]\n    }\n\n    else if (cmd == 'T') {\n      if (prev == 'Q' || prev == 'T') {\n        qx = x * 2 - qx, qy = y * 2 - qy\n      }\n      else qx = x, qy = y\n      seg = quadratic(x, y, qx, qy, seg[1], seg[2])\n    }\n\n    else if (cmd == 'Q') {\n      qx = seg[1], qy = seg[2]\n      seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4])\n    }\n\n    sl = seg.length\n    x = seg[sl - 2], y = seg[sl - 1]\n    if (sl > 4) bx = seg[sl - 4], by = seg[sl - 3]\n    else bx = x, by = y\n    prev = cmd\n\n    result[result.length] = seg\n  }\n\n  return result\n}\n\nfunction line (x1, y1, x2, y2) {\n  return ['C', x1, y1, x2, y2, x2, y2]\n}\n\nfunction quadratic (x1, y1, cx, cy, x2, y2) {\n  return ['C',\n    x1 / 3 + (2 / 3) * cx, y1 / 3 + (2 / 3) * cy,\n    x2 / 3 + (2 / 3) * cx, y2 / 3 + (2 / 3) * cy,\n    x2, y2\n  ]\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/curvify-svg-path/index.js?");

/***/ }),

/***/ "../../node_modules/debug/src/browser.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/debug/src/browser.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n// eslint-disable-next-line complexity\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n    return true;\n  } // Internet Explorer and Edge do not support colors.\n\n\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  } // Is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n\n  if (!this.useColors) {\n    return;\n  }\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit'); // The final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if (match === '%%') {\n      return;\n    }\n\n    index++;\n\n    if (match === '%c') {\n      // We only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  var _console;\n\n  // This hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return (typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (namespaces) {\n      exports.storage.setItem('debug', namespaces);\n    } else {\n      exports.storage.removeItem('debug');\n    }\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    r = exports.storage.getItem('debug');\n  } catch (error) {} // Swallow\n  // XXX (@Qix-) should we be logging these?\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\n\nfunction localstorage() {\n  try {\n    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n    // The Browser also has localStorage in the global context.\n    return localStorage;\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"../../node_modules/debug/src/common.js\")(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (error) {\n    return '[UnexpectedJSONParseError]: ' + error.message;\n  }\n};\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"../../node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/debug/src/browser.js?");

/***/ }),

/***/ "../../node_modules/debug/src/common.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/debug/src/common.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug.default = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = __webpack_require__(/*! ms */ \"../../node_modules/ms/index.js\");\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  /**\n  * Active `debug` instances.\n  */\n\n  createDebug.instances = [];\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var self = debug; // Set `diff` timestamp\n\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\n    // debug.rawLog = rawLog;\n    // env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @api public\n  */\n\n\n  function disable() {\n    createDebug.enable('');\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;\n\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/debug/src/common.js?");

/***/ }),

/***/ "../../node_modules/get-plane-normal/index.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/get-plane-normal/index.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var normalize = __webpack_require__(/*! gl-vec3/normalize */ \"../../node_modules/gl-vec3/normalize.js\")\nvar sub = __webpack_require__(/*! gl-vec3/subtract */ \"../../node_modules/gl-vec3/subtract.js\")\nvar cross = __webpack_require__(/*! gl-vec3/cross */ \"../../node_modules/gl-vec3/cross.js\")\nvar tmp = [0, 0, 0]\n\nmodule.exports = planeNormal\n\nfunction planeNormal (out, point1, point2, point3) {\n  sub(out, point1, point2)\n  sub(tmp, point2, point3)\n  cross(out, out, tmp)\n  return normalize(out, out)\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/get-plane-normal/index.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/add.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/add.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = add;\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction add(out, a, b) {\n    out[0] = a[0] + b[0]\n    out[1] = a[1] + b[1]\n    out[2] = a[2] + b[2]\n    return out\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/add.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/copy.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/copy.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = copy;\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nfunction copy(out, a) {\n    out[0] = a[0]\n    out[1] = a[1]\n    out[2] = a[2]\n    return out\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/copy.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/cross.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/cross.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = cross;\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2]\n\n    out[0] = ay * bz - az * by\n    out[1] = az * bx - ax * bz\n    out[2] = ax * by - ay * bx\n    return out\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/cross.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/distance.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/distance.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = distance;\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nfunction distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2]\n    return Math.sqrt(x*x + y*y + z*z)\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/distance.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/dot.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/dot.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = dot;\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/dot.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/length.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/length.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = length;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    return Math.sqrt(x*x + y*y + z*z)\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/length.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/normalize.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/normalize.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = normalize;\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nfunction normalize(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    var len = x*x + y*y + z*z\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len)\n        out[0] = a[0] * len\n        out[1] = a[1] * len\n        out[2] = a[2] * len\n    }\n    return out\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/normalize.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/scale.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/scale.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = scale;\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nfunction scale(out, a, b) {\n    out[0] = a[0] * b\n    out[1] = a[1] * b\n    out[2] = a[2] * b\n    return out\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/scale.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/scaleAndAdd.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/scaleAndAdd.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = scaleAndAdd;\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nfunction scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale)\n    out[1] = a[1] + (b[1] * scale)\n    out[2] = a[2] + (b[2] * scale)\n    return out\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/scaleAndAdd.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/squaredDistance.js":
/*!************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/squaredDistance.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = squaredDistance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nfunction squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2]\n    return x*x + y*y + z*z\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/squaredDistance.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/squaredLength.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/squaredLength.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = squaredLength;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    return x*x + y*y + z*z\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/squaredLength.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/subtract.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/subtract.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = subtract;\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction subtract(out, a, b) {\n    out[0] = a[0] - b[0]\n    out[1] = a[1] - b[1]\n    out[2] = a[2] - b[2]\n    return out\n}\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/subtract.js?");

/***/ }),

/***/ "../../node_modules/ieee754/index.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ieee754/index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ieee754/index.js?");

/***/ }),

/***/ "../../node_modules/isarray/index.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/isarray/index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/isarray/index.js?");

/***/ }),

/***/ "../../node_modules/ms/index.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ms/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\-?\\d?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ms/index.js?");

/***/ }),

/***/ "../../node_modules/node-libs-browser/mock/empty.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/node-libs-browser/mock/empty.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/node-libs-browser/mock/empty.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/bbox.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/bbox.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// The Bounding Box object\n\nfunction derive(v0, v1, v2, v3, t) {\n    return Math.pow(1 - t, 3) * v0 +\n        3 * Math.pow(1 - t, 2) * t * v1 +\n        3 * (1 - t) * Math.pow(t, 2) * v2 +\n        Math.pow(t, 3) * v3;\n}\n/**\n * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.\n * It is used to calculate the bounding box of a glyph or text path.\n *\n * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.\n *\n * @exports opentype.BoundingBox\n * @class\n * @constructor\n */\nfunction BoundingBox() {\n    this.x1 = Number.NaN;\n    this.y1 = Number.NaN;\n    this.x2 = Number.NaN;\n    this.y2 = Number.NaN;\n}\n\n/**\n * Returns true if the bounding box is empty, that is, no points have been added to the box yet.\n */\nBoundingBox.prototype.isEmpty = function() {\n    return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n};\n\n/**\n * Add the point to the bounding box.\n * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.\n * @param {number} x - The X coordinate of the point.\n * @param {number} y - The Y coordinate of the point.\n */\nBoundingBox.prototype.addPoint = function(x, y) {\n    if (typeof x === 'number') {\n        if (isNaN(this.x1) || isNaN(this.x2)) {\n            this.x1 = x;\n            this.x2 = x;\n        }\n        if (x < this.x1) {\n            this.x1 = x;\n        }\n        if (x > this.x2) {\n            this.x2 = x;\n        }\n    }\n    if (typeof y === 'number') {\n        if (isNaN(this.y1) || isNaN(this.y2)) {\n            this.y1 = y;\n            this.y2 = y;\n        }\n        if (y < this.y1) {\n            this.y1 = y;\n        }\n        if (y > this.y2) {\n            this.y2 = y;\n        }\n    }\n};\n\n/**\n * Add a X coordinate to the bounding box.\n * This extends the bounding box to include the X coordinate.\n * This function is used internally inside of addBezier.\n * @param {number} x - The X coordinate of the point.\n */\nBoundingBox.prototype.addX = function(x) {\n    this.addPoint(x, null);\n};\n\n/**\n * Add a Y coordinate to the bounding box.\n * This extends the bounding box to include the Y coordinate.\n * This function is used internally inside of addBezier.\n * @param {number} y - The Y coordinate of the point.\n */\nBoundingBox.prototype.addY = function(y) {\n    this.addPoint(null, y);\n};\n\n/**\n * Add a Bézier curve to the bounding box.\n * This extends the bounding box to include the entire Bézier.\n * @param {number} x0 - The starting X coordinate.\n * @param {number} y0 - The starting Y coordinate.\n * @param {number} x1 - The X coordinate of the first control point.\n * @param {number} y1 - The Y coordinate of the first control point.\n * @param {number} x2 - The X coordinate of the second control point.\n * @param {number} y2 - The Y coordinate of the second control point.\n * @param {number} x - The ending X coordinate.\n * @param {number} y - The ending Y coordinate.\n */\nBoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {\n    // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // and https://github.com/icons8/svg-path-bounding-box\n\n    const p0 = [x0, y0];\n    const p1 = [x1, y1];\n    const p2 = [x2, y2];\n    const p3 = [x, y];\n\n    this.addPoint(x0, y0);\n    this.addPoint(x, y);\n\n    for (let i = 0; i <= 1; i++) {\n        const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n        const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n        const c = 3 * p1[i] - 3 * p0[i];\n\n        if (a === 0) {\n            if (b === 0) continue;\n            const t = -c / b;\n            if (0 < t && t < 1) {\n                if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t));\n                if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t));\n            }\n            continue;\n        }\n\n        const b2ac = Math.pow(b, 2) - 4 * c * a;\n        if (b2ac < 0) continue;\n        const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n        if (0 < t1 && t1 < 1) {\n            if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));\n            if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));\n        }\n        const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n        if (0 < t2 && t2 < 1) {\n            if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));\n            if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));\n        }\n    }\n};\n\n/**\n * Add a quadratic curve to the bounding box.\n * This extends the bounding box to include the entire quadratic curve.\n * @param {number} x0 - The starting X coordinate.\n * @param {number} y0 - The starting Y coordinate.\n * @param {number} x1 - The X coordinate of the control point.\n * @param {number} y1 - The Y coordinate of the control point.\n * @param {number} x - The ending X coordinate.\n * @param {number} y - The ending Y coordinate.\n */\nBoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {\n    const cp1x = x0 + 2 / 3 * (x1 - x0);\n    const cp1y = y0 + 2 / 3 * (y1 - y0);\n    const cp2x = cp1x + 1 / 3 * (x - x0);\n    const cp2y = cp1y + 1 / 3 * (y - y0);\n    this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (BoundingBox);\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/bbox.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/bidi.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/bidi.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tokenizer */ \"../../node_modules/opentype.js/src/tokenizer.js\");\n/* harmony import */ var _features_arab_contextCheck_arabicWord__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./features/arab/contextCheck/arabicWord */ \"../../node_modules/opentype.js/src/features/arab/contextCheck/arabicWord.js\");\n/* harmony import */ var _features_arab_contextCheck_arabicSentence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./features/arab/contextCheck/arabicSentence */ \"../../node_modules/opentype.js/src/features/arab/contextCheck/arabicSentence.js\");\n/* harmony import */ var _features_arab_arabicPresentationForms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./features/arab/arabicPresentationForms */ \"../../node_modules/opentype.js/src/features/arab/arabicPresentationForms.js\");\n/* harmony import */ var _features_arab_arabicRequiredLigatures__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./features/arab/arabicRequiredLigatures */ \"../../node_modules/opentype.js/src/features/arab/arabicRequiredLigatures.js\");\n/**\n * Infer bidirectional properties for a given text and apply\n * the corresponding layout rules.\n */\n\n\n\n\n\n\n\n/**\n * Create Bidi. features\n * @param {string} baseDir text base direction. value either 'ltr' or 'rtl'\n */\nfunction Bidi(baseDir) {\n    this.baseDir = baseDir || 'ltr';\n    this.tokenizer = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.features = [];\n}\n\n/**\n * Sets Bidi text\n * @param {string} text a text input\n */\nBidi.prototype.setText = function (text) {\n    this.text = text;\n};\n\n/**\n * Store essential context checks:\n * arabic word check for applying gsub features\n * arabic sentence check for adjusting arabic layout\n */\nBidi.prototype.contextChecks = ({\n    arabicWordCheck: _features_arab_contextCheck_arabicWord__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    arabicSentenceCheck: _features_arab_contextCheck_arabicSentence__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\n});\n\n/**\n * Register arabic word check\n */\nfunction registerArabicWordCheck() {\n    const checks = this.contextChecks.arabicWordCheck;\n    return this.tokenizer.registerContextChecker(\n        'arabicWord',\n        checks.arabicWordStartCheck,\n        checks.arabicWordEndCheck\n    );\n}\n\n/**\n * Register arabic sentence check\n */\nfunction registerArabicSentenceCheck() {\n    const checks = this.contextChecks.arabicSentenceCheck;\n    return this.tokenizer.registerContextChecker(\n        'arabicSentence',\n        checks.arabicSentenceStartCheck,\n        checks.arabicSentenceEndCheck\n    );\n}\n\n/**\n * Perform pre tokenization procedure then\n * tokenize text input\n */\nfunction tokenizeText() {\n    registerArabicWordCheck.call(this);\n    registerArabicSentenceCheck.call(this);\n    return this.tokenizer.tokenize(this.text);\n}\n\n/**\n * Reverse arabic sentence layout\n * TODO: check base dir before applying adjustments - priority low\n */\nfunction reverseArabicSentences() {\n    const ranges = this.tokenizer.getContextRanges('arabicSentence');\n    ranges.forEach(range => {\n        let rangeTokens = this.tokenizer.getRangeTokens(range);\n        this.tokenizer.replaceRange(\n            range.startIndex,\n            range.endOffset,\n            rangeTokens.reverse()\n        );\n    });\n}\n\n/**\n * Subscribe arabic presentation form features\n * @param {feature} feature a feature to apply\n */\nBidi.prototype.subscribeArabicForms = function(feature) {\n    this.tokenizer.events.contextEnd.subscribe(\n        (contextName, range) => {\n            if (contextName === 'arabicWord') {\n                return _features_arab_arabicPresentationForms__WEBPACK_IMPORTED_MODULE_3__[\"default\"].call(\n                    this.tokenizer, range, feature\n                );\n            }\n        }\n    );\n};\n\n/**\n * Apply Gsub features\n * @param {feature} features a list of features\n */\nBidi.prototype.applyFeatures = function (features) {\n    for (let i = 0; i < features.length; i++) {\n        const feature = features[i];\n        if (feature) {\n            const script = feature.script;\n            if (!this.features[script]) {\n                this.features[script] = {};\n            }\n            this.features[script][feature.tag] = feature;\n        }\n    }\n};\n\n/**\n * Register a state modifier\n * @param {string} modifierId state modifier id\n * @param {function} condition a predicate function that returns true or false\n * @param {function} modifier a modifier function to set token state\n */\nBidi.prototype.registerModifier = function (modifierId, condition, modifier) {\n    this.tokenizer.registerModifier(modifierId, condition, modifier);\n};\n\n/**\n * Check if 'glyphIndex' is registered\n */\nfunction checkGlyphIndexStatus() {\n    if (this.tokenizer.registeredModifiers.indexOf('glyphIndex') === -1) {\n        throw new Error(\n            'glyphIndex modifier is required to apply ' +\n            'arabic presentation features.'\n        );\n    }\n}\n\n/**\n * Apply arabic presentation forms features\n */\nfunction applyArabicPresentationForms() {\n    if (!this.features.hasOwnProperty('arab')) return;\n    checkGlyphIndexStatus.call(this);\n    const ranges = this.tokenizer.getContextRanges('arabicWord');\n    ranges.forEach(range => {\n        _features_arab_arabicPresentationForms__WEBPACK_IMPORTED_MODULE_3__[\"default\"].call(this, range);\n    });\n}\n\n/**\n * Apply required arabic ligatures\n */\nfunction applyArabicRequireLigatures() {\n    if (!this.features.hasOwnProperty('arab')) return;\n    if (!this.features.arab.hasOwnProperty('rlig')) return;\n    checkGlyphIndexStatus.call(this);\n    const ranges = this.tokenizer.getContextRanges('arabicWord');\n    ranges.forEach(range => {\n        _features_arab_arabicRequiredLigatures__WEBPACK_IMPORTED_MODULE_4__[\"default\"].call(this, range);\n    });\n}\n\n/**\n * process text input\n * @param {string} text an input text\n */\nBidi.prototype.processText = function(text) {\n    if (!this.text || this.text !== text) {\n        this.setText(text);\n        tokenizeText.call(this);\n        applyArabicPresentationForms.call(this);\n        applyArabicRequireLigatures.call(this);\n        reverseArabicSentences.call(this);\n    }\n};\n\n/**\n * Process a string of text to identify and adjust\n * bidirectional text entities.\n * @param {string} text input text\n */\nBidi.prototype.getBidiText = function (text) {\n    this.processText(text);\n    return this.tokenizer.getText();\n};\n\n/**\n * Get the current state index of each token\n * @param {text} text an input text\n */\nBidi.prototype.getTextGlyphs = function (text) {\n    this.processText(text);\n    let indexes = [];\n    for (let i = 0; i < this.tokenizer.tokens.length; i++) {\n        const token = this.tokenizer.tokens[i];\n        if (token.state.deleted) continue;\n        const index = token.activeState.value;\n        indexes.push(Array.isArray(index) ? index[0] : index);\n    }\n    return indexes;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Bidi);\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/bidi.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/char.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/char.js ***!
  \*********************************************************************************/
/*! exports provided: isArabicChar, isIsolatedArabicChar, isTashkeelArabicChar, isWhiteSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isArabicChar\", function() { return isArabicChar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isIsolatedArabicChar\", function() { return isIsolatedArabicChar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isTashkeelArabicChar\", function() { return isTashkeelArabicChar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isWhiteSpace\", function() { return isWhiteSpace; });\n// ╭─┄┄┄────────────────────────┄─────────────────────────────────────────────╮\n// ┊ Character Class Assertions ┊ Checks if a char belongs to a certain class ┊\n// ╰─╾──────────────────────────┄─────────────────────────────────────────────╯\n// jscs:disable maximumLineLength\n/**\n * Check if a char is Arabic\n * @param {string} c a single char\n */\nfunction isArabicChar(c) {\n    return /[\\u0600-\\u065F\\u066A-\\u06D2\\u06FA-\\u06FF]/.test(c);\n}\n\n/**\n * Check if a char is an isolated arabic char\n * @param {string} c a single char\n */\nfunction isIsolatedArabicChar(char) {\n    return /[\\u0630\\u0690\\u0621\\u0631\\u0661\\u0671\\u0622\\u0632\\u0672\\u0692\\u06C2\\u0623\\u0673\\u0693\\u06C3\\u0624\\u0694\\u06C4\\u0625\\u0675\\u0695\\u06C5\\u06E5\\u0676\\u0696\\u06C6\\u0627\\u0677\\u0697\\u06C7\\u0648\\u0688\\u0698\\u06C8\\u0689\\u0699\\u06C9\\u068A\\u06CA\\u066B\\u068B\\u06CB\\u068C\\u068D\\u06CD\\u06FD\\u068E\\u06EE\\u06FE\\u062F\\u068F\\u06CF\\u06EF]/.test(char);\n}\n\n/**\n * Check if a char is an Arabic Tashkeel char\n * @param {string} c a single char\n */\nfunction isTashkeelArabicChar(char) {\n    return /[\\u0600-\\u0605\\u060C-\\u060E\\u0610-\\u061B\\u061E\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED]/.test(char);\n}\n\n/**\n * Check if a char is whitespace char\n * @param {string} c a single char\n */\nfunction isWhiteSpace(c) {\n    return /\\s/.test(c);\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/char.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/check.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/check.js ***!
  \**********************************************************************************/
/*! exports provided: fail, argument, assert, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fail\", function() { return fail; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"argument\", function() { return argument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assert\", function() { return argument; });\n// Run-time checking of preconditions.\n\nfunction fail(message) {\n    throw new Error(message);\n}\n\n// Precondition function that checks if the given predicate is true.\n// If not, it will throw an error.\nfunction argument(predicate, message) {\n    if (!predicate) {\n        fail(message);\n    }\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ fail, argument, assert: argument });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/check.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/draw.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/draw.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// Drawing utility functions.\n\n// Draw a line on the given context from point `x1,y1` to point `x2,y2`.\nfunction line(ctx, x1, y1, x2, y2) {\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ line });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/draw.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/encoding.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/encoding.js ***!
  \*************************************************************************************/
/*! exports provided: cffStandardStrings, cffStandardEncoding, cffExpertEncoding, standardNames, DefaultEncoding, CmapEncoding, CffEncoding, GlyphNames, addGlyphNames */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cffStandardStrings\", function() { return cffStandardStrings; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cffStandardEncoding\", function() { return cffStandardEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cffExpertEncoding\", function() { return cffExpertEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"standardNames\", function() { return standardNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultEncoding\", function() { return DefaultEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CmapEncoding\", function() { return CmapEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CffEncoding\", function() { return CffEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GlyphNames\", function() { return GlyphNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addGlyphNames\", function() { return addGlyphNames; });\n// Glyph encoding\n\nconst cffStandardStrings = [\n    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',\n    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',\n    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',\n    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',\n    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',\n    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',\n    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',\n    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',\n    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',\n    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',\n    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',\n    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',\n    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',\n    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',\n    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',\n    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',\n    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',\n    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',\n    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',\n    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',\n    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',\n    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',\n    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',\n    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',\n    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',\n    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',\n    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',\n    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',\n    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',\n    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',\n    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',\n    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];\n\nconst cffStandardEncoding = [\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',\n    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',\n    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',\n    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',\n    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',\n    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',\n    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',\n    'lslash', 'oslash', 'oe', 'germandbls'];\n\nconst cffExpertEncoding = [\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',\n    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',\n    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',\n    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',\n    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',\n    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',\n    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',\n    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',\n    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',\n    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',\n    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',\n    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',\n    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',\n    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',\n    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\nconst standardNames = [\n    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',\n    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',\n    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',\n    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',\n    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',\n    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',\n    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',\n    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',\n    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',\n    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',\n    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',\n    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',\n    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',\n    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',\n    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',\n    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',\n    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',\n    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',\n    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',\n    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',\n    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',\n    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',\n    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\n/**\n * This is the encoding used for fonts created from scratch.\n * It loops through all glyphs and finds the appropriate unicode value.\n * Since it's linear time, other encodings will be faster.\n * @exports opentype.DefaultEncoding\n * @class\n * @constructor\n * @param {opentype.Font}\n */\nfunction DefaultEncoding(font) {\n    this.font = font;\n}\n\nDefaultEncoding.prototype.charToGlyphIndex = function(c) {\n    const code = c.codePointAt(0);\n    const glyphs = this.font.glyphs;\n    if (glyphs) {\n        for (let i = 0; i < glyphs.length; i += 1) {\n            const glyph = glyphs.get(i);\n            for (let j = 0; j < glyph.unicodes.length; j += 1) {\n                if (glyph.unicodes[j] === code) {\n                    return i;\n                }\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * @exports opentype.CmapEncoding\n * @class\n * @constructor\n * @param {Object} cmap - a object with the cmap encoded data\n */\nfunction CmapEncoding(cmap) {\n    this.cmap = cmap;\n}\n\n/**\n * @param  {string} c - the character\n * @return {number} The glyph index.\n */\nCmapEncoding.prototype.charToGlyphIndex = function(c) {\n    return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;\n};\n\n/**\n * @exports opentype.CffEncoding\n * @class\n * @constructor\n * @param {string} encoding - The encoding\n * @param {Array} charset - The character set.\n */\nfunction CffEncoding(encoding, charset) {\n    this.encoding = encoding;\n    this.charset = charset;\n}\n\n/**\n * @param  {string} s - The character\n * @return {number} The index.\n */\nCffEncoding.prototype.charToGlyphIndex = function(s) {\n    const code = s.codePointAt(0);\n    const charName = this.encoding[code];\n    return this.charset.indexOf(charName);\n};\n\n/**\n * @exports opentype.GlyphNames\n * @class\n * @constructor\n * @param {Object} post\n */\nfunction GlyphNames(post) {\n    switch (post.version) {\n        case 1:\n            this.names = standardNames.slice();\n            break;\n        case 2:\n            this.names = new Array(post.numberOfGlyphs);\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                if (post.glyphNameIndex[i] < standardNames.length) {\n                    this.names[i] = standardNames[post.glyphNameIndex[i]];\n                } else {\n                    this.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];\n                }\n            }\n\n            break;\n        case 2.5:\n            this.names = new Array(post.numberOfGlyphs);\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                this.names[i] = standardNames[i + post.glyphNameIndex[i]];\n            }\n\n            break;\n        case 3:\n            this.names = [];\n            break;\n        default:\n            this.names = [];\n            break;\n    }\n}\n\n/**\n * Gets the index of a glyph by name.\n * @param  {string} name - The glyph name\n * @return {number} The index\n */\nGlyphNames.prototype.nameToGlyphIndex = function(name) {\n    return this.names.indexOf(name);\n};\n\n/**\n * @param  {number} gid\n * @return {string}\n */\nGlyphNames.prototype.glyphIndexToName = function(gid) {\n    return this.names[gid];\n};\n\n/**\n * @alias opentype.addGlyphNames\n * @param {opentype.Font}\n */\nfunction addGlyphNames(font) {\n    let glyph;\n    const glyphIndexMap = font.tables.cmap.glyphIndexMap;\n    const charCodes = Object.keys(glyphIndexMap);\n\n    for (let i = 0; i < charCodes.length; i += 1) {\n        const c = charCodes[i];\n        const glyphIndex = glyphIndexMap[c];\n        glyph = font.glyphs.get(glyphIndex);\n        glyph.addUnicode(parseInt(c));\n    }\n\n    for (let i = 0; i < font.glyphs.length; i += 1) {\n        glyph = font.glyphs.get(i);\n        if (font.cffEncoding) {\n            if (font.isCIDFont) {\n                glyph.name = 'gid' + i;\n            } else {\n                glyph.name = font.cffEncoding.charset[i];\n            }\n        } else if (font.glyphNames.names) {\n            glyph.name = font.glyphNames.glyphIndexToName(i);\n        }\n    }\n}\n\n\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/encoding.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/features/arab/arabicPresentationForms.js":
/*!******************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/arabicPresentationForms.js ***!
  \******************************************************************************************************************/
/*! exports provided: default, arabicPresentationForms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicPresentationForms\", function() { return arabicPresentationForms; });\n/* harmony import */ var _tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tokenizer */ \"../../node_modules/opentype.js/src/tokenizer.js\");\n/* harmony import */ var _char__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../char */ \"../../node_modules/opentype.js/src/char.js\");\n/**\n * Apply Arabic presentation forms to a range of tokens\n */\n\n\n\n/**\n * Check if a char can be connected to it's preceding char\n * @param {ContextParams} charContextParams context params of a char\n */\nfunction willConnectPrev(charContextParams) {\n    let backtrack = [].concat(charContextParams.backtrack);\n    for (let i = backtrack.length - 1; i >= 0; i--) {\n        const prevChar = backtrack[i];\n        const isolated = Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isIsolatedArabicChar\"])(prevChar);\n        const tashkeel = Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isTashkeelArabicChar\"])(prevChar);\n        if (!isolated && !tashkeel) return true;\n        if (isolated) return false;\n    }\n    return false;\n}\n\n/**\n * Check if a char can be connected to it's proceeding char\n * @param {ContextParams} charContextParams context params of a char\n */\nfunction willConnectNext(charContextParams) {\n    if (Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isIsolatedArabicChar\"])(charContextParams.current)) return false;\n    for (let i = 0; i < charContextParams.lookahead.length; i++) {\n        const nextChar = charContextParams.lookahead[i];\n        const tashkeel = Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isTashkeelArabicChar\"])(nextChar);\n        if (!tashkeel) return true;\n    }\n    return false;\n}\n\n/**\n * Apply arabic presentation forms to a list of tokens\n * @param {ContextRange} range a range of tokens\n */\nfunction arabicPresentationForms(range) {\n    const features = this.features.arab;\n    const rangeTokens = this.tokenizer.getRangeTokens(range);\n    if (rangeTokens.length === 1) return;\n    const getSubstitutionIndex = substitution => (\n        substitution.length === 1 &&\n        substitution[0].id === 12 &&\n        substitution[0].substitution\n    );\n    const applyForm = (tag, token, params) => {\n        if (!features.hasOwnProperty(tag)) return;\n        let substitution = features[tag].lookup(params) || null;\n        let substIndex = getSubstitutionIndex(substitution)[0];\n        if (substIndex >= 0) {\n            return token.setState(tag, substIndex);\n        }\n    };\n    const tokensParams = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"](rangeTokens, 0);\n    const charContextParams = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"](rangeTokens.map(t=>t.char), 0);\n    rangeTokens.forEach((token, i) => {\n        if (Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isTashkeelArabicChar\"])(token.char)) return;\n        tokensParams.setCurrentIndex(i);\n        charContextParams.setCurrentIndex(i);\n        let CONNECT = 0; // 2 bits 00 (10: can connect next) (01: can connect prev)\n        if (willConnectPrev(charContextParams)) CONNECT |= 1;\n        if (willConnectNext(charContextParams)) CONNECT |= 2;\n        switch (CONNECT) {\n            case 0: // isolated * original form\n                return;\n            case 1: // fina\n                applyForm('fina', token, tokensParams);\n                break;\n            case 2: // init\n                applyForm('init', token, tokensParams);\n                break;\n            case 3: // medi\n                applyForm('medi', token, tokensParams);\n                break;\n        }\n    });\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (arabicPresentationForms);\n\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/arabicPresentationForms.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/features/arab/arabicRequiredLigatures.js":
/*!******************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/arabicRequiredLigatures.js ***!
  \******************************************************************************************************************/
/*! exports provided: default, arabicRequiredLigatures */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicRequiredLigatures\", function() { return arabicRequiredLigatures; });\n/* harmony import */ var _tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tokenizer */ \"../../node_modules/opentype.js/src/tokenizer.js\");\n/**\n * Apply Arabic required ligatures feature to a range of tokens\n */\n\n\n\n/**\n * Apply Arabic required ligatures to a context range\n * @param {ContextRange} range a range of tokens\n */\nfunction arabicRequiredLigatures(range) {\n    const features = this.features.arab;\n    if (!features.hasOwnProperty('rlig')) return;\n    let tokens = this.tokenizer.getRangeTokens(range);\n    for (let i = 0; i < tokens.length; i++) {\n        const lookupParams = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"](tokens, i);\n        let substitution = features.rlig.lookup(lookupParams) || null;\n        const chainingContext = (\n            substitution.length === 1 &&\n            substitution[0].id === 63 &&\n            substitution[0].substitution\n        );\n        const ligature = (\n            substitution.length === 1 &&\n            substitution[0].id === 41 &&\n            substitution[0].substitution[0]\n        );\n        const token = tokens[i];\n        if (!!ligature) {\n            token.setState('rlig', [ligature.ligGlyph]);\n            for (let c = 0; c < ligature.components.length; c++) {\n                const component = ligature.components[c];\n                const lookaheadToken = lookupParams.get(c + 1);\n                if (lookaheadToken.activeState.value === component) {\n                    lookaheadToken.state.deleted = true;\n                }\n            }\n        } else if (chainingContext) {\n            const substIndex = (\n                chainingContext &&\n                chainingContext.length === 1 &&\n                chainingContext[0].id === 12 &&\n                chainingContext[0].substitution\n            );\n            if (!!substIndex && substIndex >= 0) token.setState('rlig', substIndex);\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (arabicRequiredLigatures);\n\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/arabicRequiredLigatures.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/features/arab/contextCheck/arabicSentence.js":
/*!**********************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/contextCheck/arabicSentence.js ***!
  \**********************************************************************************************************************/
/*! exports provided: arabicSentenceStartCheck, arabicSentenceEndCheck, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicSentenceStartCheck\", function() { return arabicSentenceStartCheck; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicSentenceEndCheck\", function() { return arabicSentenceEndCheck; });\n/* harmony import */ var _char__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../char */ \"../../node_modules/opentype.js/src/char.js\");\n/**\n * Arabic sentence context checkers\n */\n\n\n\nfunction arabicSentenceStartCheck(contextParams) {\n    const char = contextParams.current;\n    const prevChar = contextParams.get(-1);\n    return (\n        // ? an arabic char preceded with a non arabic char\n        (Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(char) || Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isTashkeelArabicChar\"])(char)) &&\n        !Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(prevChar)\n    );\n}\n\nfunction arabicSentenceEndCheck(contextParams) {\n    const nextChar = contextParams.get(1);\n    switch (true) {\n        case nextChar === null:\n            return true;\n        case (!Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(nextChar) && !Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isTashkeelArabicChar\"])(nextChar)):\n            const nextIsWhitespace = Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isWhiteSpace\"])(nextChar);\n            if (!nextIsWhitespace) return true;\n            if (nextIsWhitespace) {\n                let arabicCharAhead = false;\n                arabicCharAhead = (\n                    contextParams.lookahead.some(\n                        c => Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(c) || Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isTashkeelArabicChar\"])(c)\n                    )\n                );\n                if (!arabicCharAhead) return true;\n            }\n            break;\n        default:\n            return false;\n    }\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ arabicSentenceStartCheck, arabicSentenceEndCheck });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/contextCheck/arabicSentence.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/features/arab/contextCheck/arabicWord.js":
/*!******************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/contextCheck/arabicWord.js ***!
  \******************************************************************************************************************/
/*! exports provided: arabicWordStartCheck, arabicWordEndCheck, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicWordStartCheck\", function() { return arabicWordStartCheck; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicWordEndCheck\", function() { return arabicWordEndCheck; });\n/* harmony import */ var _char__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../char */ \"../../node_modules/opentype.js/src/char.js\");\n/**\n * Arabic word context checkers\n */\n\n\n\nfunction arabicWordStartCheck(contextParams) {\n    const char = contextParams.current;\n    const prevChar = contextParams.get(-1);\n    return (\n        // ? arabic first char\n        (prevChar === null && Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(char)) ||\n        // ? arabic char preceded with a non arabic char\n        (!Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(prevChar) && Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(char))\n    );\n}\n\nfunction arabicWordEndCheck(contextParams) {\n    const nextChar = contextParams.get(1);\n    return (\n        // ? last arabic char\n        (nextChar === null) ||\n        // ? next char is not arabic\n        (!Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(nextChar))\n    );\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ arabicWordStartCheck, arabicWordEndCheck });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/contextCheck/arabicWord.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/features/featureQuery.js":
/*!**************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/featureQuery.js ***!
  \**************************************************************************************************/
/*! exports provided: default, Feature */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Feature\", function() { return Feature; });\n/* harmony import */ var _tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tokenizer */ \"../../node_modules/opentype.js/src/tokenizer.js\");\n/* harmony import */ var _char__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../char */ \"../../node_modules/opentype.js/src/char.js\");\n/**\n * Query a feature by some of it's properties to lookup a glyph substitution.\n */\n\n\n\n\n// DEFAULT TEXT BASE DIRECTION\nlet BASE_DIR = 'ltr';\n\n/**\n * Create feature query instance\n * @param {Font} font opentype font instance\n * @param {string} baseDir text base direction\n */\nfunction FeatureQuery(font, baseDir) {\n    this.font = font;\n    this.features = {};\n    BASE_DIR = !!baseDir ? baseDir : BASE_DIR;\n}\n\n/**\n * Create a new feature lookup\n * @param {string} tag feature tag\n * @param {feature} feature reference to feature at gsub table\n * @param {FeatureLookups} feature lookups associated with this feature\n * @param {string} script gsub script tag\n */\nfunction Feature(tag, feature, featureLookups, script) {\n    this.tag = tag;\n    this.featureRef = feature;\n    this.lookups = featureLookups.lookups;\n    this.script = script;\n}\n\n/**\n * Create a coverage table lookup\n * @param {any} coverageTable gsub coverage table\n */\nfunction Coverage(coverageTable) {\n    this.table = coverageTable;\n}\n\n/**\n * Create a ligature set lookup\n * @param {any} ligatureSets gsub ligature set\n */\nfunction LigatureSets(ligatureSets) {\n    this.ligatureSets = ligatureSets;\n}\n\n/**\n * Lookup a glyph ligature\n * @param {ContextParams} contextParams context params to lookup\n * @param {number} ligSetIndex ligature set index at ligature sets\n */\nLigatureSets.prototype.lookup = function (contextParams, ligSetIndex) {\n    const ligatureSet = this.ligatureSets[ligSetIndex];\n    const matchComponents = (components, indexes) => {\n        if (components.length > indexes.length) return null;\n        for (let c = 0; c < components.length; c++) {\n            const component = components[c];\n            const index = indexes[c];\n            if (component !== index) return false;\n        }\n        return true;\n    };\n    for (let s = 0; s < ligatureSet.length; s++) {\n        const ligSetItem = ligatureSet[s];\n        const lookaheadIndexes = contextParams.lookahead.map(\n            token => token.activeState.value\n        );\n        if (BASE_DIR === 'rtl') lookaheadIndexes.reverse();\n        const componentsMatch = matchComponents(\n            ligSetItem.components, lookaheadIndexes\n        );\n        if (componentsMatch) return ligSetItem;\n    }\n    return null;\n};\n\n/**\n * Create a feature substitution\n * @param {any} lookups a reference to gsub lookups\n * @param {Lookuptable} lookupTable a feature lookup table\n * @param {any} subtable substitution table\n */\nfunction Substitution(lookups, lookupTable, subtable) {\n    this.lookups = lookups;\n    this.subtable = subtable;\n    this.lookupTable = lookupTable;\n    if (subtable.hasOwnProperty('coverage')) {\n        this.coverage = new Coverage(\n            subtable.coverage\n        );\n    }\n    if (subtable.hasOwnProperty('inputCoverage')) {\n        this.inputCoverage = subtable.inputCoverage.map(\n            table => new Coverage(table)\n        );\n    }\n    if (subtable.hasOwnProperty('backtrackCoverage')) {\n        this.backtrackCoverage = subtable.backtrackCoverage.map(\n            table => new Coverage(table)\n        );\n    }\n    if (subtable.hasOwnProperty('lookaheadCoverage')) {\n        this.lookaheadCoverage = subtable.lookaheadCoverage.map(\n            table => new Coverage(table)\n        );\n    }\n    if (subtable.hasOwnProperty('ligatureSets')) {\n        this.ligatureSets = new LigatureSets(subtable.ligatureSets);\n    }\n}\n\n/**\n * Create a lookup table lookup\n * @param {number} index table index at gsub lookups\n * @param {any} lookups a reference to gsub lookups\n */\nfunction LookupTable(index, lookups) {\n    this.index = index;\n    this.subtables = lookups[index].subtables.map(\n        subtable => new Substitution(\n            lookups, lookups[index], subtable\n        )\n    );\n}\n\nfunction FeatureLookups(lookups, lookupListIndexes) {\n    this.lookups = lookupListIndexes.map(\n        index => new LookupTable(index, lookups)\n    );\n}\n\n/**\n * Lookup a lookup table subtables\n * @param {ContextParams} contextParams context params to lookup\n */\nLookupTable.prototype.lookup = function (contextParams) {\n    let substitutions = [];\n    for (let i = 0; i < this.subtables.length; i++) {\n        const subsTable = this.subtables[i];\n        let substitution = subsTable.lookup(contextParams);\n        if (substitution !== null || substitution.length) {\n            substitutions = substitutions.concat(substitution);\n        }\n    }\n    return substitutions;\n};\n\n/**\n * Handle a single substitution - format 2\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction singleSubstitutionFormat2(contextParams) {\n    let glyphIndex = contextParams.current.activeState.value;\n    glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;\n    let substituteIndex = this.coverage.lookup(glyphIndex);\n    if (substituteIndex === -1) return [];\n    return [this.subtable.substitute[substituteIndex]];\n}\n\n/**\n * Lookup a list of coverage tables\n * @param {any} coverageList a list of coverage tables\n * @param {any} contextParams context params to lookup\n */\nfunction lookupCoverageList(coverageList, contextParams) {\n    let lookupList = [];\n    for (let i = 0; i < coverageList.length; i++) {\n        const coverage = coverageList[i];\n        let glyphIndex = contextParams.current.activeState.value;\n        glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;\n        const lookupIndex = coverage.lookup(glyphIndex);\n        if (lookupIndex !== -1) {\n            lookupList.push(lookupIndex);\n        }\n    }\n    if (lookupList.length !== coverageList.length) return -1;\n    return lookupList;\n}\n\n/**\n * Handle chaining context substitution - format 3\n * @param {any} contextParams context params to lookup\n */\nfunction chainingSubstitutionFormat3(contextParams) {\n    const lookupsCount = (\n        this.inputCoverage.length +\n        this.lookaheadCoverage.length +\n        this.backtrackCoverage.length\n    );\n    if (contextParams.context.length < lookupsCount) return [];\n    // INPUT LOOKUP //\n    let inputLookups = lookupCoverageList(\n        this.inputCoverage, contextParams\n    );\n    if (inputLookups === -1) return [];\n    // LOOKAHEAD LOOKUP //\n    const lookaheadOffset = this.inputCoverage.length - 1;\n    if (contextParams.lookahead.length < this.lookaheadCoverage.length) return [];\n    let lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);\n    while (lookaheadContext.length && Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isTashkeelArabicChar\"])(lookaheadContext[0].char)) {\n        lookaheadContext.shift();\n    }\n    const lookaheadParams = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"](lookaheadContext, 0);\n    let lookaheadLookups = lookupCoverageList(\n        this.lookaheadCoverage, lookaheadParams\n    );\n    // BACKTRACK LOOKUP //\n    let backtrackContext = [].concat(contextParams.backtrack);\n    backtrackContext.reverse();\n    while (backtrackContext.length && Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isTashkeelArabicChar\"])(backtrackContext[0].char)) {\n        backtrackContext.shift();\n    }\n    if (backtrackContext.length < this.backtrackCoverage.length) return [];\n    const backtrackParams = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"](backtrackContext, 0);\n    let backtrackLookups = lookupCoverageList(\n        this.backtrackCoverage, backtrackParams\n    );\n    const contextRulesMatch = (\n        inputLookups.length === this.inputCoverage.length &&\n        lookaheadLookups.length === this.lookaheadCoverage.length &&\n        backtrackLookups.length === this.backtrackCoverage.length\n    );\n    let substitutions = [];\n    if (contextRulesMatch) {\n        let lookupRecords = this.subtable.lookupRecords;\n        for (let i = 0; i < lookupRecords.length; i++) {\n            const lookupRecord = lookupRecords[i];\n            for (let j = 0; j < inputLookups.length; j++) {\n                const inputContext = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"]([contextParams.get(j)], 0);\n                let lookupIndex = lookupRecord.lookupListIndex;\n                const lookupTable = new LookupTable(lookupIndex, this.lookups);\n                let lookup = lookupTable.lookup(inputContext);\n                substitutions = substitutions.concat(lookup);\n            }\n        }\n    }\n    return substitutions;\n}\n\n/**\n * Handle ligature substitution - format 1\n * @param {any} contextParams context params to lookup\n */\nfunction ligatureSubstitutionFormat1(contextParams) {\n    // COVERAGE LOOKUP //\n    let glyphIndex = contextParams.current.activeState.value;\n    let ligSetIndex = this.coverage.lookup(glyphIndex);\n    if (ligSetIndex === -1) return [];\n    // COMPONENTS LOOKUP * note that components is logically ordered\n    let ligGlyphs = this.ligatureSets.lookup(contextParams, ligSetIndex);\n    return ligGlyphs ? [ligGlyphs] : [];\n}\n\n/**\n * [ LOOKUP TYPES ]\n * -------------------------------\n * Single                        1;\n * Multiple                      2;\n * Alternate                     3;\n * Ligature                      4;\n * Context                       5;\n * ChainingContext               6;\n * ExtensionSubstitution         7;\n * ReverseChainingContext        8;\n * -------------------------------\n * @param {any} contextParams context params to lookup\n */\nSubstitution.prototype.lookup = function (contextParams) {\n    const substitutions = [];\n    const lookupType = this.lookupTable.lookupType;\n    const substFormat = this.subtable.substFormat;\n    if (lookupType === 1 && substFormat === 2) {\n        let substitution = singleSubstitutionFormat2.call(this, contextParams);\n        if (substitution.length > 0) {\n            substitutions.push({ id: 12, substitution });\n        }\n    }\n    if (lookupType === 6 && substFormat === 3) {\n        const substitution = chainingSubstitutionFormat3.call(this, contextParams);\n        if (substitution.length > 0) {\n            substitutions.push({ id: 63, substitution });\n        }\n    }\n    if (lookupType === 4 && substFormat === 1) {\n        const substitution = ligatureSubstitutionFormat1.call(this, contextParams);\n        if (substitution.length > 0) {\n            substitutions.push({ id: 41, substitution });\n        }\n    }\n    return substitutions;\n};\n\n/**\n * Lookup a coverage table\n * @param {number} glyphIndex to lookup\n */\nCoverage.prototype.lookup = function (glyphIndex) {\n    if (!glyphIndex) return -1;\n    switch (this.table.format) {\n        case 1:\n            return this.table.glyphs.indexOf(glyphIndex);\n\n        case 2:\n            let ranges = this.table.ranges;\n            for (let i = 0; i < ranges.length; i++) {\n                const range = ranges[i];\n                if (glyphIndex >= range.start && glyphIndex <= range.end) {\n                    let offset = glyphIndex - range.start;\n                    return range.index + offset;\n                }\n            }\n            break;\n        default:\n            return -1; // not found\n    }\n    return -1;\n};\n\n/**\n * Lookup a feature for a substitution or more\n * @param {any} contextParams context params to lookup\n */\nFeature.prototype.lookup = function(contextParams) {\n    let lookups = [];\n    for (let i = 0; i < this.lookups.length; i++) {\n        const lookupTable = this.lookups[i];\n        let lookup = lookupTable.lookup(contextParams);\n        if (lookup !== null || lookup.length) {\n            lookups = lookups.concat(lookup);\n        }\n    }\n    return lookups;\n};\n\n/**\n * Get feature indexes of a specific script\n * @param {string} scriptTag script tag\n */\nFeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {\n    if (!scriptTag) return [];\n    const tables = this.font.tables;\n    if (!tables.gsub) return [];\n    const scripts = this.font.tables.gsub.scripts;\n    for (let i = 0; i < scripts.length; i++) {\n        const script = scripts[i];\n        if (script.tag === scriptTag) {\n            let defaultLangSys = script.script.defaultLangSys;\n            return defaultLangSys.featureIndexes;\n        } else {\n            let langSysRecords = script.langSysRecords;\n            if (!!langSysRecords) {\n                for (let j = 0; j < langSysRecords.length; j++) {\n                    const langSysRecord = langSysRecords[j];\n                    if (langSysRecord.tag === scriptTag) {\n                        let langSys = langSysRecord.langSys;\n                        return langSys.featureIndexes;\n                    }\n                }\n            }\n        }\n    }\n    return [];\n};\n\n/**\n * Map a feature tag to a gsub feature\n * @param {any} features gsub features\n * @param {*} scriptTag script tag\n */\nFeatureQuery.prototype.mapTagsToFeatures = function (features, scriptTag) {\n    let tags = {};\n    for (let i = 0; i < features.length; i++) {\n        const feature = features[i].feature;\n        const tag = features[i].tag;\n        const lookups = this.font.tables.gsub.lookups;\n        const featureLookups = new FeatureLookups(lookups, feature.lookupListIndexes);\n        tags[tag] = new Feature(tag, feature, featureLookups, scriptTag);\n    }\n    this.features[scriptTag].tags = tags;\n};\n\n/**\n * Get features of a specific script\n * @param {string} scriptTag script tag\n */\nFeatureQuery.prototype.getScriptFeatures = function (scriptTag) {\n    let features = this.features[scriptTag];\n    if (this.features.hasOwnProperty(scriptTag)) return features;\n    const featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);\n    if (!featuresIndexes) return null;\n    const gsub = this.font.tables.gsub;\n    features = featuresIndexes.map(index => gsub.features[index]);\n    this.features[scriptTag] = features;\n    this.mapTagsToFeatures(features, scriptTag);\n    return features;\n};\n\n/**\n * Query a feature by it's properties\n * @param {any} query an object that describes the properties of a query\n */\nFeatureQuery.prototype.getFeature = function (query) {\n    if (!this.font) return { FAIL: `No font was found`};\n    if (!this.features.hasOwnProperty(query.script)) {\n        this.getScriptFeatures(query.script);\n    }\n    return this.features[query.script].tags[query.tag] || null;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (FeatureQuery);\n\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/featureQuery.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/font.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/font.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./path */ \"../../node_modules/opentype.js/src/path.js\");\n/* harmony import */ var _tables_sfnt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables/sfnt */ \"../../node_modules/opentype.js/src/tables/sfnt.js\");\n/* harmony import */ var _encoding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding */ \"../../node_modules/opentype.js/src/encoding.js\");\n/* harmony import */ var _glyphset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyphset */ \"../../node_modules/opentype.js/src/glyphset.js\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./position */ \"../../node_modules/opentype.js/src/position.js\");\n/* harmony import */ var _substitution__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./substitution */ \"../../node_modules/opentype.js/src/substitution.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util */ \"../../node_modules/opentype.js/src/util.js\");\n/* harmony import */ var _hintingtt__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hintingtt */ \"../../node_modules/opentype.js/src/hintingtt.js\");\n/* harmony import */ var _bidi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bidi */ \"../../node_modules/opentype.js/src/bidi.js\");\n/* harmony import */ var _features_featureQuery__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./features/featureQuery */ \"../../node_modules/opentype.js/src/features/featureQuery.js\");\n// The Font object\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @typedef FontOptions\n * @type Object\n * @property {Boolean} empty - whether to create a new empty font\n * @property {string} familyName\n * @property {string} styleName\n * @property {string=} fullName\n * @property {string=} postScriptName\n * @property {string=} designer\n * @property {string=} designerURL\n * @property {string=} manufacturer\n * @property {string=} manufacturerURL\n * @property {string=} license\n * @property {string=} licenseURL\n * @property {string=} version\n * @property {string=} description\n * @property {string=} copyright\n * @property {string=} trademark\n * @property {Number} unitsPerEm\n * @property {Number} ascender\n * @property {Number} descender\n * @property {Number} createdTimestamp\n * @property {string=} weightClass\n * @property {string=} widthClass\n * @property {string=} fsSelection\n */\n\n/**\n * A Font represents a loaded OpenType font file.\n * It contains a set of glyphs and methods to draw text on a drawing context,\n * or to get a path representing the text.\n * @exports opentype.Font\n * @class\n * @param {FontOptions}\n * @constructor\n */\nfunction Font(options) {\n    options = options || {};\n\n    if (!options.empty) {\n        // Check that we've provided the minimum set of names.\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.familyName, 'When creating a new Font object, familyName is required.');\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.styleName, 'When creating a new Font object, styleName is required.');\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.ascender, 'When creating a new Font object, ascender is required.');\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.descender, 'When creating a new Font object, descender is required.');\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.descender < 0, 'Descender should be negative (e.g. -512).');\n\n        // OS X will complain if the names are empty, so we put a single space everywhere by default.\n        this.names = {\n            fontFamily: {en: options.familyName || ' '},\n            fontSubfamily: {en: options.styleName || ' '},\n            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},\n            // postScriptName may not contain any whitespace\n            postScriptName: {en: options.postScriptName || (options.familyName + options.styleName).replace(/\\s/g, '')},\n            designer: {en: options.designer || ' '},\n            designerURL: {en: options.designerURL || ' '},\n            manufacturer: {en: options.manufacturer || ' '},\n            manufacturerURL: {en: options.manufacturerURL || ' '},\n            license: {en: options.license || ' '},\n            licenseURL: {en: options.licenseURL || ' '},\n            version: {en: options.version || 'Version 0.1'},\n            description: {en: options.description || ' '},\n            copyright: {en: options.copyright || ' '},\n            trademark: {en: options.trademark || ' '}\n        };\n        this.unitsPerEm = options.unitsPerEm || 1000;\n        this.ascender = options.ascender;\n        this.descender = options.descender;\n        this.createdTimestamp = options.createdTimestamp;\n        this.tables = { os2: {\n            usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n            usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n            fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n        } };\n    }\n\n    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n    this.glyphs = new _glyphset__WEBPACK_IMPORTED_MODULE_3__[\"default\"].GlyphSet(this, options.glyphs || []);\n    this.encoding = new _encoding__WEBPACK_IMPORTED_MODULE_2__[\"DefaultEncoding\"](this);\n    this.position = new _position__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this);\n    this.substitution = new _substitution__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this);\n    this.tables = this.tables || {};\n\n    Object.defineProperty(this, 'hinting', {\n        get: function() {\n            if (this._hinting) return this._hinting;\n            if (this.outlinesFormat === 'truetype') {\n                return (this._hinting = new _hintingtt__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this));\n            }\n        }\n    });\n}\n\n/**\n * Check if the font has a glyph for the given character.\n * @param  {string}\n * @return {Boolean}\n */\nFont.prototype.hasChar = function(c) {\n    return this.encoding.charToGlyphIndex(c) !== null;\n};\n\n/**\n * Convert the given character to a single glyph index.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.charToGlyphIndex = function(s) {\n    return this.encoding.charToGlyphIndex(s);\n};\n\n/**\n * Convert the given character to a single Glyph object.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.charToGlyph = function(c) {\n    const glyphIndex = this.charToGlyphIndex(c);\n    let glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * Convert the given text to a list of Glyph objects.\n * Note that there is no strict one-to-one mapping between characters and\n * glyphs, so the list of returned glyphs can be larger or smaller than the\n * length of the given string.\n * @param  {string}\n * @param  {GlyphRenderOptions} [options]\n * @return {opentype.Glyph[]}\n */\nFont.prototype.stringToGlyphs = function(s, options) {\n    options = options || this.defaultRenderOptions;\n\n    const bidi = new _bidi__WEBPACK_IMPORTED_MODULE_8__[\"default\"]();\n\n    // Create and register 'glyphIndex' state modifier\n    const charToGlyphIndexMod = token => this.charToGlyphIndex(token.char);\n    bidi.registerModifier('glyphIndex', null, charToGlyphIndexMod);\n\n    const arabFeatureQuery = new _features_featureQuery__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this);\n    const arabFeatures = ['init', 'medi', 'fina', 'rlig'];\n    bidi.applyFeatures(\n        arabFeatures.map(tag => {\n            let query = { tag, script: 'arab' };\n            let feature = arabFeatureQuery.getFeature(query);\n            if (!!feature) return feature;\n        })\n    );\n    const indexes = bidi.getTextGlyphs(s);\n\n    let length = indexes.length;\n\n    // Apply substitutions on glyph indexes\n    if (options.features) {\n        const script = options.script || this.substitution.getDefaultScriptName();\n        let manyToOne = [];\n        if (options.features.liga) manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language));\n        if (options.features.rlig) manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language));\n        for (let i = 0; i < length; i += 1) {\n            for (let j = 0; j < manyToOne.length; j++) {\n                const ligature = manyToOne[j];\n                const components = ligature.sub;\n                const compCount = components.length;\n                let k = 0;\n                while (k < compCount && components[k] === indexes[i + k]) k++;\n                if (k === compCount) {\n                    indexes.splice(i, compCount, ligature.by);\n                    length = length - compCount + 1;\n                }\n            }\n        }\n    }\n\n    // convert glyph indexes to glyph objects\n    const glyphs = new Array(length);\n    const notdef = this.glyphs.get(0);\n    for (let i = 0; i < length; i += 1) {\n        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n    }\n    return glyphs;\n};\n\n/**\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.nameToGlyphIndex = function(name) {\n    return this.glyphNames.nameToGlyphIndex(name);\n};\n\n/**\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.nameToGlyph = function(name) {\n    const glyphIndex = this.nameToGlyphIndex(name);\n    let glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * @param  {Number}\n * @return {String}\n */\nFont.prototype.glyphIndexToName = function(gid) {\n    if (!this.glyphNames.glyphIndexToName) {\n        return '';\n    }\n\n    return this.glyphNames.glyphIndexToName(gid);\n};\n\n/**\n * Retrieve the value of the kerning pair between the left glyph (or its index)\n * and the right glyph (or its index). If no kerning pair is found, return 0.\n * The kerning value gets added to the advance width when calculating the spacing\n * between glyphs.\n * For GPOS kerning, this method uses the default script and language, which covers\n * most use cases. To have greater control, use font.position.getKerningValue .\n * @param  {opentype.Glyph} leftGlyph\n * @param  {opentype.Glyph} rightGlyph\n * @return {Number}\n */\nFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n    leftGlyph = leftGlyph.index || leftGlyph;\n    rightGlyph = rightGlyph.index || rightGlyph;\n    const gposKerning = this.position.defaultKerningTables;\n    if (gposKerning) {\n        return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);\n    }\n    // \"kern\" table\n    return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;\n};\n\n/**\n * @typedef GlyphRenderOptions\n * @type Object\n * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n * @property {string} [language='dflt'] - language system used to determine which features to apply.\n *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n * @property {boolean} [kerning=true] - whether to include kerning values\n * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n */\nFont.prototype.defaultRenderOptions = {\n    kerning: true,\n    features: {\n        liga: true,\n        rlig: true\n    }\n};\n\n/**\n * Helper function that invokes the given callback for each glyph in the given text.\n * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n * @param {string} text - The text to apply.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @param  {Function} callback\n */\nFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    options = options || this.defaultRenderOptions;\n    const fontScale = 1 / this.unitsPerEm * fontSize;\n    const glyphs = this.stringToGlyphs(text, options);\n    let kerningLookups;\n    if (options.kerning) {\n        const script = options.script || this.position.getDefaultScriptName();\n        kerningLookups = this.position.getKerningTables(script, options.language);\n    }\n    for (let i = 0; i < glyphs.length; i += 1) {\n        const glyph = glyphs[i];\n        callback.call(this, glyph, x, y, fontSize, options);\n        if (glyph.advanceWidth) {\n            x += glyph.advanceWidth * fontScale;\n        }\n\n        if (options.kerning && i < glyphs.length - 1) {\n            // We should apply position adjustment lookups in a more generic way.\n            // Here we only use the xAdvance value.\n            const kerningValue = kerningLookups ?\n                  this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) :\n                  this.getKerningValue(glyph, glyphs[i + 1]);\n            x += kerningValue * fontScale;\n        }\n\n        if (options.letterSpacing) {\n            x += options.letterSpacing * fontSize;\n        } else if (options.tracking) {\n            x += (options.tracking / 1000) * fontSize;\n        }\n    }\n    return x;\n};\n\n/**\n * Create a Path object that represents the given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path}\n */\nFont.prototype.getPath = function(text, x, y, fontSize, options) {\n    const fullPath = new _path__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        fullPath.extend(glyphPath);\n    });\n    return fullPath;\n};\n\n/**\n * Create an array of Path objects that represent the glyphs of a given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path[]}\n */\nFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n    const glyphPaths = [];\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        glyphPaths.push(glyphPath);\n    });\n\n    return glyphPaths;\n};\n\n/**\n * Returns the advance width of a text.\n *\n * This is something different than Path.getBoundingBox() as for example a\n * suffixed whitespace increases the advanceWidth but not the bounding box\n * or an overhanging letter like a calligraphic 'f' might have a quite larger\n * bounding box than its advance width.\n *\n * This corresponds to canvas2dContext.measureText(text).width\n *\n * @param  {string} text - The text to create.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return advance width\n */\nFont.prototype.getAdvanceWidth = function(text, fontSize, options) {\n    return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});\n};\n\n/**\n * Draw the text on the given drawing context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n */\nFont.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n    this.getPath(text, x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of all glyphs in the text.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawPoints(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * Draw lines indicating important font measurements for all glyphs in the text.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawMetrics(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * @param  {string}\n * @return {string}\n */\nFont.prototype.getEnglishName = function(name) {\n    const translations = this.names[name];\n    if (translations) {\n        return translations.en;\n    }\n};\n\n/**\n * Validate\n */\nFont.prototype.validate = function() {\n    const warnings = [];\n    const _this = this;\n\n    function assert(predicate, message) {\n        if (!predicate) {\n            warnings.push(message);\n        }\n    }\n\n    function assertNamePresent(name) {\n        const englishName = _this.getEnglishName(name);\n        assert(englishName && englishName.trim().length > 0,\n               'No English ' + name + ' specified.');\n    }\n\n    // Identification information\n    assertNamePresent('fontFamily');\n    assertNamePresent('weightName');\n    assertNamePresent('manufacturer');\n    assertNamePresent('copyright');\n    assertNamePresent('version');\n\n    // Dimension information\n    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n};\n\n/**\n * Convert the font object to a SFNT data structure.\n * This structure contains all the necessary tables and metadata to create a binary OTF file.\n * @return {opentype.Table}\n */\nFont.prototype.toTables = function() {\n    return _tables_sfnt__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fontToTable(this);\n};\n/**\n * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n */\nFont.prototype.toBuffer = function() {\n    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');\n    return this.toArrayBuffer();\n};\n/**\n * Converts a `opentype.Font` into an `ArrayBuffer`\n * @return {ArrayBuffer}\n */\nFont.prototype.toArrayBuffer = function() {\n    const sfntTable = this.toTables();\n    const bytes = sfntTable.encode();\n    const buffer = new ArrayBuffer(bytes.length);\n    const intArray = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.length; i++) {\n        intArray[i] = bytes[i];\n    }\n\n    return buffer;\n};\n\n/**\n * Initiate a download of the OpenType font.\n */\nFont.prototype.download = function(fileName) {\n    const familyName = this.getEnglishName('fontFamily');\n    const styleName = this.getEnglishName('fontSubfamily');\n    fileName = fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n    const arrayBuffer = this.toArrayBuffer();\n\n    if (Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"isBrowser\"])()) {\n        window.URL = window.URL || window.webkitURL;\n\n        if (window.URL) {\n            const dataView = new DataView(arrayBuffer);\n            const blob = new Blob([dataView], {type: 'font/opentype'});\n\n            let link = document.createElement('a');\n            link.href = window.URL.createObjectURL(blob);\n            link.download = fileName;\n\n            let event = document.createEvent('MouseEvents');\n            event.initEvent('click', true, false);\n            link.dispatchEvent(event);\n        } else {\n            console.warn('Font file could not be downloaded. Try using a different browser.');\n        }\n    } else {\n        const fs = __webpack_require__(/*! fs */ 0);\n        const buffer = Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"arrayBufferToNodeBuffer\"])(arrayBuffer);\n        fs.writeFileSync(fileName, buffer);\n    }\n};\n/**\n * @private\n */\nFont.prototype.fsSelectionValues = {\n    ITALIC:              0x001, //1\n    UNDERSCORE:          0x002, //2\n    NEGATIVE:            0x004, //4\n    OUTLINED:            0x008, //8\n    STRIKEOUT:           0x010, //16\n    BOLD:                0x020, //32\n    REGULAR:             0x040, //64\n    USER_TYPO_METRICS:   0x080, //128\n    WWS:                 0x100, //256\n    OBLIQUE:             0x200  //512\n};\n\n/**\n * @private\n */\nFont.prototype.usWidthClasses = {\n    ULTRA_CONDENSED: 1,\n    EXTRA_CONDENSED: 2,\n    CONDENSED: 3,\n    SEMI_CONDENSED: 4,\n    MEDIUM: 5,\n    SEMI_EXPANDED: 6,\n    EXPANDED: 7,\n    EXTRA_EXPANDED: 8,\n    ULTRA_EXPANDED: 9\n};\n\n/**\n * @private\n */\nFont.prototype.usWeightClasses = {\n    THIN: 100,\n    EXTRA_LIGHT: 200,\n    LIGHT: 300,\n    NORMAL: 400,\n    MEDIUM: 500,\n    SEMI_BOLD: 600,\n    BOLD: 700,\n    EXTRA_BOLD: 800,\n    BLACK:    900\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Font);\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/font.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/glyph.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/glyph.js ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _draw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./draw */ \"../../node_modules/opentype.js/src/draw.js\");\n/* harmony import */ var _path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./path */ \"../../node_modules/opentype.js/src/path.js\");\n// The Glyph object\n\n\n\n\n// import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency\n\nfunction getPathDefinition(glyph, path) {\n    let _path = path || new _path__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    return {\n        configurable: true,\n\n        get: function() {\n            if (typeof _path === 'function') {\n                _path = _path();\n            }\n\n            return _path;\n        },\n\n        set: function(p) {\n            _path = p;\n        }\n    };\n}\n/**\n * @typedef GlyphOptions\n * @type Object\n * @property {string} [name] - The glyph name\n * @property {number} [unicode]\n * @property {Array} [unicodes]\n * @property {number} [xMin]\n * @property {number} [yMin]\n * @property {number} [xMax]\n * @property {number} [yMax]\n * @property {number} [advanceWidth]\n */\n\n// A Glyph is an individual mark that often corresponds to a character.\n// Some glyphs, such as ligatures, are a combination of many characters.\n// Glyphs are the basic building blocks of a font.\n//\n// The `Glyph` class contains utility methods for drawing the path and its points.\n/**\n * @exports opentype.Glyph\n * @class\n * @param {GlyphOptions}\n * @constructor\n */\nfunction Glyph(options) {\n    // By putting all the code on a prototype function (which is only declared once)\n    // we reduce the memory requirements for larger fonts by some 2%\n    this.bindConstructorValues(options);\n}\n\n/**\n * @param  {GlyphOptions}\n */\nGlyph.prototype.bindConstructorValues = function(options) {\n    this.index = options.index || 0;\n\n    // These three values cannot be deferred for memory optimization:\n    this.name = options.name || null;\n    this.unicode = options.unicode || undefined;\n    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];\n\n    // But by binding these values only when necessary, we reduce can\n    // the memory requirements by almost 3% for larger fonts.\n    if (options.xMin) {\n        this.xMin = options.xMin;\n    }\n\n    if (options.yMin) {\n        this.yMin = options.yMin;\n    }\n\n    if (options.xMax) {\n        this.xMax = options.xMax;\n    }\n\n    if (options.yMax) {\n        this.yMax = options.yMax;\n    }\n\n    if (options.advanceWidth) {\n        this.advanceWidth = options.advanceWidth;\n    }\n\n    // The path for a glyph is the most memory intensive, and is bound as a value\n    // with a getter/setter to ensure we actually do path parsing only once the\n    // path is actually needed by anything.\n    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n};\n\n/**\n * @param {number}\n */\nGlyph.prototype.addUnicode = function(unicode) {\n    if (this.unicodes.length === 0) {\n        this.unicode = unicode;\n    }\n\n    this.unicodes.push(unicode);\n};\n\n/**\n * Calculate the minimum bounding box for this glyph.\n * @return {opentype.BoundingBox}\n */\nGlyph.prototype.getBoundingBox = function() {\n    return this.path.getBoundingBox();\n};\n\n/**\n * Convert the glyph to a Path we can draw on a drawing context.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {Object=} options - xScale, yScale to stretch the glyph.\n * @param  {opentype.Font} if hinting is to be used, the font\n * @return {opentype.Path}\n */\nGlyph.prototype.getPath = function(x, y, fontSize, options, font) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    let commands;\n    let hPoints;\n    if (!options) options = { };\n    let xScale = options.xScale;\n    let yScale = options.yScale;\n\n    if (options.hinting && font && font.hinting) {\n        // in case of hinting, the hinting engine takes care\n        // of scaling the points (not the path) before hinting.\n        hPoints = this.path && font.hinting.exec(this, fontSize);\n        // in case the hinting engine failed hPoints is undefined\n        // and thus reverts to plain rending\n    }\n\n    if (hPoints) {\n        // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency\n        commands = font.hinting.getCommands(hPoints);\n        x = Math.round(x);\n        y = Math.round(y);\n        // TODO in case of hinting xyScaling is not yet supported\n        xScale = yScale = 1;\n    } else {\n        commands = this.path.commands;\n        const scale = 1 / this.path.unitsPerEm * fontSize;\n        if (xScale === undefined) xScale = scale;\n        if (yScale === undefined) yScale = scale;\n    }\n\n    const p = new _path__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    for (let i = 0; i < commands.length; i += 1) {\n        const cmd = commands[i];\n        if (cmd.type === 'M') {\n            p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'L') {\n            p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'Q') {\n            p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n                               x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'C') {\n            p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n                      x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),\n                      x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'Z') {\n            p.closePath();\n        }\n    }\n\n    return p;\n};\n\n/**\n * Split the glyph into contours.\n * This function is here for backwards compatibility, and to\n * provide raw access to the TrueType glyph outlines.\n * @return {Array}\n */\nGlyph.prototype.getContours = function() {\n    if (this.points === undefined) {\n        return [];\n    }\n\n    const contours = [];\n    let currentContour = [];\n    for (let i = 0; i < this.points.length; i += 1) {\n        const pt = this.points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n};\n\n/**\n * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n * @return {Object}\n */\nGlyph.prototype.getMetrics = function() {\n    const commands = this.path.commands;\n    const xCoords = [];\n    const yCoords = [];\n    for (let i = 0; i < commands.length; i += 1) {\n        const cmd = commands[i];\n        if (cmd.type !== 'Z') {\n            xCoords.push(cmd.x);\n            yCoords.push(cmd.y);\n        }\n\n        if (cmd.type === 'Q' || cmd.type === 'C') {\n            xCoords.push(cmd.x1);\n            yCoords.push(cmd.y1);\n        }\n\n        if (cmd.type === 'C') {\n            xCoords.push(cmd.x2);\n            yCoords.push(cmd.y2);\n        }\n    }\n\n    const metrics = {\n        xMin: Math.min.apply(null, xCoords),\n        yMin: Math.min.apply(null, yCoords),\n        xMax: Math.max.apply(null, xCoords),\n        yMax: Math.max.apply(null, yCoords),\n        leftSideBearing: this.leftSideBearing\n    };\n\n    if (!isFinite(metrics.xMin)) {\n        metrics.xMin = 0;\n    }\n\n    if (!isFinite(metrics.xMax)) {\n        metrics.xMax = this.advanceWidth;\n    }\n\n    if (!isFinite(metrics.yMin)) {\n        metrics.yMin = 0;\n    }\n\n    if (!isFinite(metrics.yMax)) {\n        metrics.yMax = 0;\n    }\n\n    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n    return metrics;\n};\n\n/**\n * Draw the glyph on the given context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {Object=} options - xScale, yScale to stretch the glyph.\n */\nGlyph.prototype.draw = function(ctx, x, y, fontSize, options) {\n    this.getPath(x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of the glyph.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n */\nGlyph.prototype.drawPoints = function(ctx, x, y, fontSize) {\n    function drawCircles(l, x, y, scale) {\n        const PI_SQ = Math.PI * 2;\n        ctx.beginPath();\n        for (let j = 0; j < l.length; j += 1) {\n            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));\n            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);\n        }\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 24;\n    const scale = 1 / this.path.unitsPerEm * fontSize;\n\n    const blueCircles = [];\n    const redCircles = [];\n    const path = this.path;\n    for (let i = 0; i < path.commands.length; i += 1) {\n        const cmd = path.commands[i];\n        if (cmd.x !== undefined) {\n            blueCircles.push({x: cmd.x, y: -cmd.y});\n        }\n\n        if (cmd.x1 !== undefined) {\n            redCircles.push({x: cmd.x1, y: -cmd.y1});\n        }\n\n        if (cmd.x2 !== undefined) {\n            redCircles.push({x: cmd.x2, y: -cmd.y2});\n        }\n    }\n\n    ctx.fillStyle = 'blue';\n    drawCircles(blueCircles, x, y, scale);\n    ctx.fillStyle = 'red';\n    drawCircles(redCircles, x, y, scale);\n};\n\n/**\n * Draw lines indicating important font measurements.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n */\nGlyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {\n    let scale;\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 24;\n    scale = 1 / this.path.unitsPerEm * fontSize;\n    ctx.lineWidth = 1;\n\n    // Draw the origin\n    ctx.strokeStyle = 'black';\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, x, -10000, x, 10000);\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, -10000, y, 10000, y);\n\n    // This code is here due to memory optimization: by not using\n    // defaults in the constructor, we save a notable amount of memory.\n    const xMin = this.xMin || 0;\n    let yMin = this.yMin || 0;\n    const xMax = this.xMax || 0;\n    let yMax = this.yMax || 0;\n    const advanceWidth = this.advanceWidth || 0;\n\n    // Draw the glyph box\n    ctx.strokeStyle = 'blue';\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));\n\n    // Draw the advance width\n    ctx.strokeStyle = 'green';\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Glyph);\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/glyph.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/glyphset.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/glyphset.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph */ \"../../node_modules/opentype.js/src/glyph.js\");\n// The GlyphSet object\n\n\n\n// Define a property on the glyph that depends on the path being loaded.\nfunction defineDependentProperty(glyph, externalName, internalName) {\n    Object.defineProperty(glyph, externalName, {\n        get: function() {\n            // Request the path property to make sure the path is loaded.\n            glyph.path; // jshint ignore:line\n            return glyph[internalName];\n        },\n        set: function(newValue) {\n            glyph[internalName] = newValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n}\n\n/**\n * A GlyphSet represents all glyphs available in the font, but modelled using\n * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n * necessary, to keep the memory footprint down.\n * @exports opentype.GlyphSet\n * @class\n * @param {opentype.Font}\n * @param {Array}\n */\nfunction GlyphSet(font, glyphs) {\n    this.font = font;\n    this.glyphs = {};\n    if (Array.isArray(glyphs)) {\n        for (let i = 0; i < glyphs.length; i++) {\n            this.glyphs[i] = glyphs[i];\n        }\n    }\n\n    this.length = (glyphs && glyphs.length) || 0;\n}\n\n/**\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nGlyphSet.prototype.get = function(index) {\n    if (typeof this.glyphs[index] === 'function') {\n        this.glyphs[index] = this.glyphs[index]();\n    }\n\n    return this.glyphs[index];\n};\n\n/**\n * @param  {number} index\n * @param  {Object}\n */\nGlyphSet.prototype.push = function(index, loader) {\n    this.glyphs[index] = loader;\n    this.length++;\n};\n\n/**\n * @alias opentype.glyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nfunction glyphLoader(font, index) {\n    return new _glyph__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({index: index, font: font});\n}\n\n/**\n * Generate a stub glyph that can be filled with all metadata *except*\n * the \"points\" and \"path\" properties, which must be loaded only once\n * the glyph's path is actually requested for text shaping.\n * @alias opentype.ttfGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseGlyph\n * @param  {Object} data\n * @param  {number} position\n * @param  {Function} buildPath\n * @return {opentype.Glyph}\n */\nfunction ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n    return function() {\n        const glyph = new _glyph__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({index: index, font: font});\n\n        glyph.path = function() {\n            parseGlyph(glyph, data, position);\n            const path = buildPath(font.glyphs, glyph);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n\n        defineDependentProperty(glyph, 'xMin', '_xMin');\n        defineDependentProperty(glyph, 'xMax', '_xMax');\n        defineDependentProperty(glyph, 'yMin', '_yMin');\n        defineDependentProperty(glyph, 'yMax', '_yMax');\n\n        return glyph;\n    };\n}\n/**\n * @alias opentype.cffGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseCFFCharstring\n * @param  {string} charstring\n * @return {opentype.Glyph}\n */\nfunction cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n    return function() {\n        const glyph = new _glyph__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({index: index, font: font});\n\n        glyph.path = function() {\n            const path = parseCFFCharstring(font, glyph, charstring);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n\n        return glyph;\n    };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ GlyphSet, glyphLoader, ttfGlyphLoader, cffGlyphLoader });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/glyphset.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/hintingtt.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/hintingtt.js ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tables_glyf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tables/glyf */ \"../../node_modules/opentype.js/src/tables/glyf.js\");\n/* A TrueType font hinting interpreter.\n*\n* (c) 2017 Axel Kittenberger\n*\n* This interpreter has been implemented according to this documentation:\n* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html\n*\n* According to the documentation F24DOT6 values are used for pixels.\n* That means calculation is 1/64 pixel accurate and uses integer operations.\n* However, Javascript has floating point operations by default and only\n* those are available. One could make a case to simulate the 1/64 accuracy\n* exactly by truncating after every division operation\n* (for example with << 0) to get pixel exactly results as other TrueType\n* implementations. It may make sense since some fonts are pixel optimized\n* by hand using DELTAP instructions. The current implementation doesn't\n* and rather uses full floating point precision.\n*\n* xScale, yScale and rotation is currently ignored.\n*\n* A few non-trivial instructions are missing as I didn't encounter yet\n* a font that used them to test a possible implementation.\n*\n* Some fonts seem to use undocumented features regarding the twilight zone.\n* Only some of them are implemented as they were encountered.\n*\n* The exports.DEBUG statements are removed on the minified distribution file.\n*/\n\n\n\n\nlet instructionTable;\nlet exec;\nlet execGlyph;\nlet execComponent;\n\n/*\n* Creates a hinting object.\n*\n* There ought to be exactly one\n* for each truetype font that is used for hinting.\n*/\nfunction Hinting(font) {\n    // the font this hinting object is for\n    this.font = font;\n\n    this.getCommands = function (hPoints) {\n        return _tables_glyf__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getPath(hPoints).commands;\n    };\n\n    // cached states\n    this._fpgmState  =\n    this._prepState  =\n        undefined;\n\n    // errorState\n    // 0 ... all okay\n    // 1 ... had an error in a glyf,\n    //       continue working but stop spamming\n    //       the console\n    // 2 ... error at prep, stop hinting at this ppem\n    // 3 ... error at fpeg, stop hinting for this font at all\n    this._errorState = 0;\n}\n\n/*\n* Not rounding.\n*/\nfunction roundOff(v) {\n    return v;\n}\n\n/*\n* Rounding to grid.\n*/\nfunction roundToGrid(v) {\n    //Rounding in TT is supposed to \"symmetrical around zero\"\n    return Math.sign(v) * Math.round(Math.abs(v));\n}\n\n/*\n* Rounding to double grid.\n*/\nfunction roundToDoubleGrid(v) {\n    return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n}\n\n/*\n* Rounding to half grid.\n*/\nfunction roundToHalfGrid(v) {\n    return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n}\n\n/*\n* Rounding to up to grid.\n*/\nfunction roundUpToGrid(v) {\n    return Math.sign(v) * Math.ceil(Math.abs(v));\n}\n\n/*\n* Rounding to down to grid.\n*/\nfunction roundDownToGrid(v) {\n    return Math.sign(v) * Math.floor(Math.abs(v));\n}\n\n/*\n* Super rounding.\n*/\nconst roundSuper = function (v) {\n    const period = this.srPeriod;\n    let phase = this.srPhase;\n    const threshold = this.srThreshold;\n    let sign = 1;\n\n    if (v < 0) {\n        v = -v;\n        sign = -1;\n    }\n\n    v += threshold - phase;\n\n    v = Math.trunc(v / period) * period;\n\n    v += phase;\n\n    // according to http://xgridfit.sourceforge.net/round.html\n    if (v < 0) return phase * sign;\n\n    return v * sign;\n};\n\n/*\n* Unit vector of x-axis.\n*/\nconst xUnitVector = {\n    x: 1,\n\n    y: 0,\n\n    axis: 'x',\n\n    // Gets the projected distance between two points.\n    // o1/o2 ... if true, respective original position is used.\n    distance: function (p1, p2, o1, o2) {\n        return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n    },\n\n    // Moves point p so the moved position has the same relative\n    // position to the moved positions of rp1 and rp2 than the\n    // original positions had.\n    //\n    // See APPENDIX on INTERPOLATE at the bottom of this file.\n    interpolate: function (p, rp1, rp2, pv) {\n        let do1;\n        let do2;\n        let doa1;\n        let doa2;\n        let dm1;\n        let dm2;\n        let dt;\n\n        if (!pv || pv === this) {\n            do1 = p.xo - rp1.xo;\n            do2 = p.xo - rp2.xo;\n            dm1 = rp1.x - rp1.xo;\n            dm2 = rp2.x - rp2.xo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n\n            if (dt === 0) {\n                p.x = p.xo + (dm1 + dm2) / 2;\n                return;\n            }\n\n            p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;\n            return;\n        }\n\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt = doa1 + doa2;\n\n        if (dt === 0) {\n            xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n\n        xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n    },\n\n    // Slope of line normal to this\n    normalSlope: Number.NEGATIVE_INFINITY,\n\n    // Sets the point 'p' relative to point 'rp'\n    // by the distance 'd'.\n    //\n    // See APPENDIX on SETRELATIVE at the bottom of this file.\n    //\n    // p   ... point to set\n    // rp  ... reference point\n    // d   ... distance on projection vector\n    // pv  ... projection vector (undefined = this)\n    // org ... if true, uses the original position of rp as reference.\n    setRelative: function (p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.x = (org ? rp.xo : rp.x) + d;\n            return;\n        }\n\n        const rpx = org ? rp.xo : rp.x;\n        const rpy = org ? rp.yo : rp.y;\n        const rpdx = rpx + d * pv.x;\n        const rpdy = rpy + d * pv.y;\n\n        p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n    },\n\n    // Slope of vector line.\n    slope: 0,\n\n    // Touches the point p.\n    touch: function (p) {\n        p.xTouched = true;\n    },\n\n    // Tests if a point p is touched.\n    touched: function (p) {\n        return p.xTouched;\n    },\n\n    // Untouches the point p.\n    untouch: function (p) {\n        p.xTouched = false;\n    }\n};\n\n/*\n* Unit vector of y-axis.\n*/\nconst yUnitVector = {\n    x: 0,\n\n    y: 1,\n\n    axis: 'y',\n\n    // Gets the projected distance between two points.\n    // o1/o2 ... if true, respective original position is used.\n    distance: function (p1, p2, o1, o2) {\n        return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n    },\n\n    // Moves point p so the moved position has the same relative\n    // position to the moved positions of rp1 and rp2 than the\n    // original positions had.\n    //\n    // See APPENDIX on INTERPOLATE at the bottom of this file.\n    interpolate: function (p, rp1, rp2, pv) {\n        let do1;\n        let do2;\n        let doa1;\n        let doa2;\n        let dm1;\n        let dm2;\n        let dt;\n\n        if (!pv || pv === this) {\n            do1 = p.yo - rp1.yo;\n            do2 = p.yo - rp2.yo;\n            dm1 = rp1.y - rp1.yo;\n            dm2 = rp2.y - rp2.yo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n\n            if (dt === 0) {\n                p.y = p.yo + (dm1 + dm2) / 2;\n                return;\n            }\n\n            p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;\n            return;\n        }\n\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt = doa1 + doa2;\n\n        if (dt === 0) {\n            yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n\n        yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n    },\n\n    // Slope of line normal to this.\n    normalSlope: 0,\n\n    // Sets the point 'p' relative to point 'rp'\n    // by the distance 'd'\n    //\n    // See APPENDIX on SETRELATIVE at the bottom of this file.\n    //\n    // p   ... point to set\n    // rp  ... reference point\n    // d   ... distance on projection vector\n    // pv  ... projection vector (undefined = this)\n    // org ... if true, uses the original position of rp as reference.\n    setRelative: function (p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.y = (org ? rp.yo : rp.y) + d;\n            return;\n        }\n\n        const rpx = org ? rp.xo : rp.x;\n        const rpy = org ? rp.yo : rp.y;\n        const rpdx = rpx + d * pv.x;\n        const rpdy = rpy + d * pv.y;\n\n        p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n    },\n\n    // Slope of vector line.\n    slope: Number.POSITIVE_INFINITY,\n\n    // Touches the point p.\n    touch: function (p) {\n        p.yTouched = true;\n    },\n\n    // Tests if a point p is touched.\n    touched: function (p) {\n        return p.yTouched;\n    },\n\n    // Untouches the point p.\n    untouch: function (p) {\n        p.yTouched = false;\n    }\n};\n\nObject.freeze(xUnitVector);\nObject.freeze(yUnitVector);\n\n/*\n* Creates a unit vector that is not x- or y-axis.\n*/\nfunction UnitVector(x, y) {\n    this.x = x;\n    this.y = y;\n    this.axis = undefined;\n    this.slope = y / x;\n    this.normalSlope = -x / y;\n    Object.freeze(this);\n}\n\n/*\n* Gets the projected distance between two points.\n* o1/o2 ... if true, respective original position is used.\n*/\nUnitVector.prototype.distance = function(p1, p2, o1, o2) {\n    return (\n        this.x * xUnitVector.distance(p1, p2, o1, o2) +\n        this.y * yUnitVector.distance(p1, p2, o1, o2)\n    );\n};\n\n/*\n* Moves point p so the moved position has the same relative\n* position to the moved positions of rp1 and rp2 than the\n* original positions had.\n*\n* See APPENDIX on INTERPOLATE at the bottom of this file.\n*/\nUnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n    let dm1;\n    let dm2;\n    let do1;\n    let do2;\n    let doa1;\n    let doa2;\n    let dt;\n\n    do1 = pv.distance(p, rp1, true, true);\n    do2 = pv.distance(p, rp2, true, true);\n    dm1 = pv.distance(rp1, rp1, false, true);\n    dm2 = pv.distance(rp2, rp2, false, true);\n    doa1 = Math.abs(do1);\n    doa2 = Math.abs(do2);\n    dt = doa1 + doa2;\n\n    if (dt === 0) {\n        this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n        return;\n    }\n\n    this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n};\n\n/*\n* Sets the point 'p' relative to point 'rp'\n* by the distance 'd'\n*\n* See APPENDIX on SETRELATIVE at the bottom of this file.\n*\n* p   ...  point to set\n* rp  ... reference point\n* d   ... distance on projection vector\n* pv  ... projection vector (undefined = this)\n* org ... if true, uses the original position of rp as reference.\n*/\nUnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n    pv = pv || this;\n\n    const rpx = org ? rp.xo : rp.x;\n    const rpy = org ? rp.yo : rp.y;\n    const rpdx = rpx + d * pv.x;\n    const rpdy = rpy + d * pv.y;\n\n    const pvns = pv.normalSlope;\n    const fvs = this.slope;\n\n    const px = p.x;\n    const py = p.y;\n\n    p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n    p.y = fvs * (p.x - px) + py;\n};\n\n/*\n* Touches the point p.\n*/\nUnitVector.prototype.touch = function(p) {\n    p.xTouched = true;\n    p.yTouched = true;\n};\n\n/*\n* Returns a unit vector with x/y coordinates.\n*/\nfunction getUnitVector(x, y) {\n    const d = Math.sqrt(x * x + y * y);\n\n    x /= d;\n    y /= d;\n\n    if (x === 1 && y === 0) return xUnitVector;\n    else if (x === 0 && y === 1) return yUnitVector;\n    else return new UnitVector(x, y);\n}\n\n/*\n* Creates a point in the hinting engine.\n*/\nfunction HPoint(\n    x,\n    y,\n    lastPointOfContour,\n    onCurve\n) {\n    this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value\n    this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value\n\n    this.lastPointOfContour = lastPointOfContour;\n    this.onCurve = onCurve;\n    this.prevPointOnContour = undefined;\n    this.nextPointOnContour = undefined;\n    this.xTouched = false;\n    this.yTouched = false;\n\n    Object.preventExtensions(this);\n}\n\n/*\n* Returns the next touched point on the contour.\n*\n* v  ... unit vector to test touch axis.\n*/\nHPoint.prototype.nextTouched = function(v) {\n    let p = this.nextPointOnContour;\n\n    while (!v.touched(p) && p !== this) p = p.nextPointOnContour;\n\n    return p;\n};\n\n/*\n* Returns the previous touched point on the contour\n*\n* v  ... unit vector to test touch axis.\n*/\nHPoint.prototype.prevTouched = function(v) {\n    let p = this.prevPointOnContour;\n\n    while (!v.touched(p) && p !== this) p = p.prevPointOnContour;\n\n    return p;\n};\n\n/*\n* The zero point.\n*/\nconst HPZero = Object.freeze(new HPoint(0, 0));\n\n/*\n* The default state of the interpreter.\n*\n* Note: Freezing the defaultState and then deriving from it\n* makes the V8 Javascript engine going awkward,\n* so this is avoided, albeit the defaultState shouldn't\n* ever change.\n*/\nconst defaultState = {\n    cvCutIn: 17 / 16,    // control value cut in\n    deltaBase: 9,\n    deltaShift: 0.125,\n    loop: 1,             // loops some instructions\n    minDis: 1,           // minimum distance\n    autoFlip: true\n};\n\n/*\n* The current state of the interpreter.\n*\n* env  ... 'fpgm' or 'prep' or 'glyf'\n* prog ... the program\n*/\nfunction State(env, prog) {\n    this.env = env;\n    this.stack = [];\n    this.prog = prog;\n\n    switch (env) {\n        case 'glyf' :\n            this.zp0 = this.zp1 = this.zp2 = 1;\n            this.rp0 = this.rp1 = this.rp2 = 0;\n            /* fall through */\n        case 'prep' :\n            this.fv = this.pv = this.dpv = xUnitVector;\n            this.round = roundToGrid;\n    }\n}\n\n/*\n* Executes a glyph program.\n*\n* This does the hinting for each glyph.\n*\n* Returns an array of moved points.\n*\n* glyph: the glyph to hint\n* ppem: the size the glyph is rendered for\n*/\nHinting.prototype.exec = function(glyph, ppem) {\n    if (typeof ppem !== 'number') {\n        throw new Error('Point size is not a number!');\n    }\n\n    // Received a fatal error, don't do any hinting anymore.\n    if (this._errorState > 2) return;\n\n    const font = this.font;\n    let prepState = this._prepState;\n\n    if (!prepState || prepState.ppem !== ppem) {\n        let fpgmState = this._fpgmState;\n\n        if (!fpgmState) {\n            // Executes the fpgm state.\n            // This is used by fonts to define functions.\n            State.prototype = defaultState;\n\n            fpgmState =\n            this._fpgmState =\n                new State('fpgm', font.tables.fpgm);\n\n            fpgmState.funcs = [ ];\n            fpgmState.font = font;\n\n            if (exports.DEBUG) {\n                console.log('---EXEC FPGM---');\n                fpgmState.step = -1;\n            }\n\n            try {\n                exec(fpgmState);\n            } catch (e) {\n                console.log('Hinting error in FPGM:' + e);\n                this._errorState = 3;\n                return;\n            }\n        }\n\n        // Executes the prep program for this ppem setting.\n        // This is used by fonts to set cvt values\n        // depending on to be rendered font size.\n\n        State.prototype = fpgmState;\n        prepState =\n        this._prepState =\n            new State('prep', font.tables.prep);\n\n        prepState.ppem = ppem;\n\n        // Creates a copy of the cvt table\n        // and scales it to the current ppem setting.\n        const oCvt = font.tables.cvt;\n        if (oCvt) {\n            const cvt = prepState.cvt = new Array(oCvt.length);\n            const scale = ppem / font.unitsPerEm;\n            for (let c = 0; c < oCvt.length; c++) {\n                cvt[c] = oCvt[c] * scale;\n            }\n        } else {\n            prepState.cvt = [];\n        }\n\n        if (exports.DEBUG) {\n            console.log('---EXEC PREP---');\n            prepState.step = -1;\n        }\n\n        try {\n            exec(prepState);\n        } catch (e) {\n            if (this._errorState < 2) {\n                console.log('Hinting error in PREP:' + e);\n            }\n            this._errorState = 2;\n        }\n    }\n\n    if (this._errorState > 1) return;\n\n    try {\n        return execGlyph(glyph, prepState);\n    } catch (e) {\n        if (this._errorState < 1) {\n            console.log('Hinting error:' + e);\n            console.log('Note: further hinting errors are silenced');\n        }\n        this._errorState = 1;\n        return undefined;\n    }\n};\n\n/*\n* Executes the hinting program for a glyph.\n*/\nexecGlyph = function(glyph, prepState) {\n    // original point positions\n    const xScale = prepState.ppem / prepState.font.unitsPerEm;\n    const yScale = xScale;\n    let components = glyph.components;\n    let contours;\n    let gZone;\n    let state;\n\n    State.prototype = prepState;\n    if (!components) {\n        state = new State('glyf', glyph.instructions);\n        if (exports.DEBUG) {\n            console.log('---EXEC GLYPH---');\n            state.step = -1;\n        }\n        execComponent(glyph, state, xScale, yScale);\n        gZone = state.gZone;\n    } else {\n        const font = prepState.font;\n        gZone = [];\n        contours = [];\n        for (let i = 0; i < components.length; i++) {\n            const c = components[i];\n            const cg = font.glyphs.get(c.glyphIndex);\n\n            state = new State('glyf', cg.instructions);\n\n            if (exports.DEBUG) {\n                console.log('---EXEC COMP ' + i + '---');\n                state.step = -1;\n            }\n\n            execComponent(cg, state, xScale, yScale);\n            // appends the computed points to the result array\n            // post processes the component points\n            const dx = Math.round(c.dx * xScale);\n            const dy = Math.round(c.dy * yScale);\n            const gz = state.gZone;\n            const cc = state.contours;\n            for (let pi = 0; pi < gz.length; pi++) {\n                const p = gz[pi];\n                p.xTouched = p.yTouched = false;\n                p.xo = p.x = p.x + dx;\n                p.yo = p.y = p.y + dy;\n            }\n\n            const gLen = gZone.length;\n            gZone.push.apply(gZone, gz);\n            for (let j = 0; j < cc.length; j++) {\n                contours.push(cc[j] + gLen);\n            }\n        }\n\n        if (glyph.instructions && !state.inhibitGridFit) {\n            // the composite has instructions on its own\n            state = new State('glyf', glyph.instructions);\n\n            state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n\n            state.contours = contours;\n\n            // note: HPZero cannot be used here, since\n            //       the point might be modified\n            gZone.push(\n                new HPoint(0, 0),\n                new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n            );\n\n            if (exports.DEBUG) {\n                console.log('---EXEC COMPOSITE---');\n                state.step = -1;\n            }\n\n            exec(state);\n\n            gZone.length -= 2;\n        }\n    }\n\n    return gZone;\n};\n\n/*\n* Executes the hinting program for a component of a multi-component glyph\n* or of the glyph itself for a non-component glyph.\n*/\nexecComponent = function(glyph, state, xScale, yScale)\n{\n    const points = glyph.points || [];\n    const pLen = points.length;\n    const gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];\n    const contours = state.contours = [];\n\n    // Scales the original points and\n    // makes copies for the hinted points.\n    let cp; // current point\n    for (let i = 0; i < pLen; i++) {\n        cp = points[i];\n\n        gZone[i] = new HPoint(\n            cp.x * xScale,\n            cp.y * yScale,\n            cp.lastPointOfContour,\n            cp.onCurve\n        );\n    }\n\n    // Chain links the contours.\n    let sp; // start point\n    let np; // next point\n\n    for (let i = 0; i < pLen; i++) {\n        cp = gZone[i];\n\n        if (!sp) {\n            sp = cp;\n            contours.push(i);\n        }\n\n        if (cp.lastPointOfContour) {\n            cp.nextPointOnContour = sp;\n            sp.prevPointOnContour = cp;\n            sp = undefined;\n        } else {\n            np = gZone[i + 1];\n            cp.nextPointOnContour = np;\n            np.prevPointOnContour = cp;\n        }\n    }\n\n    if (state.inhibitGridFit) return;\n\n    if (exports.DEBUG) {\n        console.log('PROCESSING GLYPH', state.stack);\n        for (let i = 0; i < pLen; i++) {\n            console.log(i, gZone[i].x, gZone[i].y);\n        }\n    }\n\n    gZone.push(\n        new HPoint(0, 0),\n        new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n    );\n\n    exec(state);\n\n    // Removes the extra points.\n    gZone.length -= 2;\n\n    if (exports.DEBUG) {\n        console.log('FINISHED GLYPH', state.stack);\n        for (let i = 0; i < pLen; i++) {\n            console.log(i, gZone[i].x, gZone[i].y);\n        }\n    }\n};\n\n/*\n* Executes the program loaded in state.\n*/\nexec = function(state) {\n    let prog = state.prog;\n\n    if (!prog) return;\n\n    const pLen = prog.length;\n    let ins;\n\n    for (state.ip = 0; state.ip < pLen; state.ip++) {\n        if (exports.DEBUG) state.step++;\n        ins = instructionTable[prog[state.ip]];\n\n        if (!ins) {\n            throw new Error(\n                'unknown instruction: 0x' +\n                Number(prog[state.ip]).toString(16)\n            );\n        }\n\n        ins(state);\n\n        // very extensive debugging for each step\n        /*\n        if (exports.DEBUG) {\n            var da;\n            if (state.gZone) {\n                da = [];\n                for (let i = 0; i < state.gZone.length; i++)\n                {\n                    da.push(i + ' ' +\n                        state.gZone[i].x * 64 + ' ' +\n                        state.gZone[i].y * 64 + ' ' +\n                        (state.gZone[i].xTouched ? 'x' : '') +\n                        (state.gZone[i].yTouched ? 'y' : '')\n                    );\n                }\n                console.log('GZ', da);\n            }\n\n            if (state.tZone) {\n                da = [];\n                for (let i = 0; i < state.tZone.length; i++) {\n                    da.push(i + ' ' +\n                        state.tZone[i].x * 64 + ' ' +\n                        state.tZone[i].y * 64 + ' ' +\n                        (state.tZone[i].xTouched ? 'x' : '') +\n                        (state.tZone[i].yTouched ? 'y' : '')\n                    );\n                }\n                console.log('TZ', da);\n            }\n\n            if (state.stack.length > 10) {\n                console.log(\n                    state.stack.length,\n                    '...', state.stack.slice(state.stack.length - 10)\n                );\n            } else {\n                console.log(state.stack.length, state.stack);\n            }\n        }\n        */\n    }\n};\n\n/*\n* Initializes the twilight zone.\n*\n* This is only done if a SZPx instruction\n* refers to the twilight zone.\n*/\nfunction initTZone(state)\n{\n    const tZone = state.tZone = new Array(state.gZone.length);\n\n    // no idea if this is actually correct...\n    for (let i = 0; i < tZone.length; i++)\n    {\n        tZone[i] = new HPoint(0, 0);\n    }\n}\n\n/*\n* Skips the instruction pointer ahead over an IF/ELSE block.\n* handleElse .. if true breaks on matching ELSE\n*/\nfunction skip(state, handleElse)\n{\n    const prog = state.prog;\n    let ip = state.ip;\n    let nesting = 1;\n    let ins;\n\n    do {\n        ins = prog[++ip];\n        if (ins === 0x58) // IF\n            nesting++;\n        else if (ins === 0x59) // EIF\n            nesting--;\n        else if (ins === 0x40) // NPUSHB\n            ip += prog[ip + 1] + 1;\n        else if (ins === 0x41) // NPUSHW\n            ip += 2 * prog[ip + 1] + 1;\n        else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB\n            ip += ins - 0xB0 + 1;\n        else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW\n            ip += (ins - 0xB8 + 1) * 2;\n        else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE\n            break;\n    } while (nesting > 0);\n\n    state.ip = ip;\n}\n\n/*----------------------------------------------------------*\n*          And then a lot of instructions...                *\n*----------------------------------------------------------*/\n\n// SVTCA[a] Set freedom and projection Vectors To Coordinate Axis\n// 0x00-0x01\nfunction SVTCA(v, state) {\n    if (exports.DEBUG) console.log(state.step, 'SVTCA[' + v.axis + ']');\n\n    state.fv = state.pv = state.dpv = v;\n}\n\n// SPVTCA[a] Set Projection Vector to Coordinate Axis\n// 0x02-0x03\nfunction SPVTCA(v, state) {\n    if (exports.DEBUG) console.log(state.step, 'SPVTCA[' + v.axis + ']');\n\n    state.pv = state.dpv = v;\n}\n\n// SFVTCA[a] Set Freedom Vector to Coordinate Axis\n// 0x04-0x05\nfunction SFVTCA(v, state) {\n    if (exports.DEBUG) console.log(state.step, 'SFVTCA[' + v.axis + ']');\n\n    state.fv = v;\n}\n\n// SPVTL[a] Set Projection Vector To Line\n// 0x06-0x07\nfunction SPVTL(a, state) {\n    const stack = state.stack;\n    const p2i = stack.pop();\n    const p1i = stack.pop();\n    const p2 = state.z2[p2i];\n    const p1 = state.z1[p1i];\n\n    if (exports.DEBUG) console.log('SPVTL[' + a + ']', p2i, p1i);\n\n    let dx;\n    let dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.pv = state.dpv = getUnitVector(dx, dy);\n}\n\n// SFVTL[a] Set Freedom Vector To Line\n// 0x08-0x09\nfunction SFVTL(a, state) {\n    const stack = state.stack;\n    const p2i = stack.pop();\n    const p1i = stack.pop();\n    const p2 = state.z2[p2i];\n    const p1 = state.z1[p1i];\n\n    if (exports.DEBUG) console.log('SFVTL[' + a + ']', p2i, p1i);\n\n    let dx;\n    let dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.fv = getUnitVector(dx, dy);\n}\n\n// SPVFS[] Set Projection Vector From Stack\n// 0x0A\nfunction SPVFS(state) {\n    const stack = state.stack;\n    const y = stack.pop();\n    const x = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SPVFS[]', y, x);\n\n    state.pv = state.dpv = getUnitVector(x, y);\n}\n\n// SFVFS[] Set Freedom Vector From Stack\n// 0x0B\nfunction SFVFS(state) {\n    const stack = state.stack;\n    const y = stack.pop();\n    const x = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SPVFS[]', y, x);\n\n    state.fv = getUnitVector(x, y);\n}\n\n// GPV[] Get Projection Vector\n// 0x0C\nfunction GPV(state) {\n    const stack = state.stack;\n    const pv = state.pv;\n\n    if (exports.DEBUG) console.log(state.step, 'GPV[]');\n\n    stack.push(pv.x * 0x4000);\n    stack.push(pv.y * 0x4000);\n}\n\n// GFV[] Get Freedom Vector\n// 0x0C\nfunction GFV(state) {\n    const stack = state.stack;\n    const fv = state.fv;\n\n    if (exports.DEBUG) console.log(state.step, 'GFV[]');\n\n    stack.push(fv.x * 0x4000);\n    stack.push(fv.y * 0x4000);\n}\n\n// SFVTPV[] Set Freedom Vector To Projection Vector\n// 0x0E\nfunction SFVTPV(state) {\n    state.fv = state.pv;\n\n    if (exports.DEBUG) console.log(state.step, 'SFVTPV[]');\n}\n\n// ISECT[] moves point p to the InterSECTion of two lines\n// 0x0F\nfunction ISECT(state)\n{\n    const stack = state.stack;\n    const pa0i = stack.pop();\n    const pa1i = stack.pop();\n    const pb0i = stack.pop();\n    const pb1i = stack.pop();\n    const pi = stack.pop();\n    const z0 = state.z0;\n    const z1 = state.z1;\n    const pa0 = z0[pa0i];\n    const pa1 = z0[pa1i];\n    const pb0 = z1[pb0i];\n    const pb1 = z1[pb1i];\n    const p = state.z2[pi];\n\n    if (exports.DEBUG) console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi);\n\n    // math from\n    // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n\n    const x1 = pa0.x;\n    const y1 = pa0.y;\n    const x2 = pa1.x;\n    const y2 = pa1.y;\n    const x3 = pb0.x;\n    const y3 = pb0.y;\n    const x4 = pb1.x;\n    const y4 = pb1.y;\n\n    const div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    const f1 = x1 * y2 - y1 * x2;\n    const f2 = x3 * y4 - y3 * x4;\n\n    p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n    p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n}\n\n// SRP0[] Set Reference Point 0\n// 0x10\nfunction SRP0(state) {\n    state.rp0 = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SRP0[]', state.rp0);\n}\n\n// SRP1[] Set Reference Point 1\n// 0x11\nfunction SRP1(state) {\n    state.rp1 = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SRP1[]', state.rp1);\n}\n\n// SRP1[] Set Reference Point 2\n// 0x12\nfunction SRP2(state) {\n    state.rp2 = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SRP2[]', state.rp2);\n}\n\n// SZP0[] Set Zone Pointer 0\n// 0x13\nfunction SZP0(state) {\n    const n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SZP0[]', n);\n\n    state.zp0 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) initTZone(state);\n            state.z0 = state.tZone;\n            break;\n        case 1 :\n            state.z0 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZP1[] Set Zone Pointer 1\n// 0x14\nfunction SZP1(state) {\n    const n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SZP1[]', n);\n\n    state.zp1 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) initTZone(state);\n            state.z1 = state.tZone;\n            break;\n        case 1 :\n            state.z1 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZP2[] Set Zone Pointer 2\n// 0x15\nfunction SZP2(state) {\n    const n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SZP2[]', n);\n\n    state.zp2 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) initTZone(state);\n            state.z2 = state.tZone;\n            break;\n        case 1 :\n            state.z2 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZPS[] Set Zone PointerS\n// 0x16\nfunction SZPS(state) {\n    const n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SZPS[]', n);\n\n    state.zp0 = state.zp1 = state.zp2 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) initTZone(state);\n            state.z0 = state.z1 = state.z2 = state.tZone;\n            break;\n        case 1 :\n            state.z0 = state.z1 = state.z2 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SLOOP[] Set LOOP variable\n// 0x17\nfunction SLOOP(state) {\n    state.loop = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SLOOP[]', state.loop);\n}\n\n// RTG[] Round To Grid\n// 0x18\nfunction RTG(state) {\n    if (exports.DEBUG) console.log(state.step, 'RTG[]');\n\n    state.round = roundToGrid;\n}\n\n// RTHG[] Round To Half Grid\n// 0x19\nfunction RTHG(state) {\n    if (exports.DEBUG) console.log(state.step, 'RTHG[]');\n\n    state.round = roundToHalfGrid;\n}\n\n// SMD[] Set Minimum Distance\n// 0x1A\nfunction SMD(state) {\n    const d = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SMD[]', d);\n\n    state.minDis = d / 0x40;\n}\n\n// ELSE[] ELSE clause\n// 0x1B\nfunction ELSE(state) {\n    // This instruction has been reached by executing a then branch\n    // so it just skips ahead until matching EIF.\n    //\n    // In case the IF was negative the IF[] instruction already\n    // skipped forward over the ELSE[]\n\n    if (exports.DEBUG) console.log(state.step, 'ELSE[]');\n\n    skip(state, false);\n}\n\n// JMPR[] JuMP Relative\n// 0x1C\nfunction JMPR(state) {\n    const o = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'JMPR[]', o);\n\n    // A jump by 1 would do nothing.\n    state.ip += o - 1;\n}\n\n// SCVTCI[] Set Control Value Table Cut-In\n// 0x1D\nfunction SCVTCI(state) {\n    const n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SCVTCI[]', n);\n\n    state.cvCutIn = n / 0x40;\n}\n\n// DUP[] DUPlicate top stack element\n// 0x20\nfunction DUP(state) {\n    const stack = state.stack;\n\n    if (exports.DEBUG) console.log(state.step, 'DUP[]');\n\n    stack.push(stack[stack.length - 1]);\n}\n\n// POP[] POP top stack element\n// 0x21\nfunction POP(state) {\n    if (exports.DEBUG) console.log(state.step, 'POP[]');\n\n    state.stack.pop();\n}\n\n// CLEAR[] CLEAR the stack\n// 0x22\nfunction CLEAR(state) {\n    if (exports.DEBUG) console.log(state.step, 'CLEAR[]');\n\n    state.stack.length = 0;\n}\n\n// SWAP[] SWAP the top two elements on the stack\n// 0x23\nfunction SWAP(state) {\n    const stack = state.stack;\n\n    const a = stack.pop();\n    const b = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SWAP[]');\n\n    stack.push(a);\n    stack.push(b);\n}\n\n// DEPTH[] DEPTH of the stack\n// 0x24\nfunction DEPTH(state) {\n    const stack = state.stack;\n\n    if (exports.DEBUG) console.log(state.step, 'DEPTH[]');\n\n    stack.push(stack.length);\n}\n\n// LOOPCALL[] LOOPCALL function\n// 0x2A\nfunction LOOPCALL(state) {\n    const stack = state.stack;\n    const fn = stack.pop();\n    const c = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'LOOPCALL[]', fn, c);\n\n    // saves callers program\n    const cip = state.ip;\n    const cprog = state.prog;\n\n    state.prog = state.funcs[fn];\n\n    // executes the function\n    for (let i = 0; i < c; i++) {\n        exec(state);\n\n        if (exports.DEBUG) console.log(\n            ++state.step,\n            i + 1 < c ? 'next loopcall' : 'done loopcall',\n            i\n        );\n    }\n\n    // restores the callers program\n    state.ip = cip;\n    state.prog = cprog;\n}\n\n// CALL[] CALL function\n// 0x2B\nfunction CALL(state) {\n    const fn = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'CALL[]', fn);\n\n    // saves callers program\n    const cip = state.ip;\n    const cprog = state.prog;\n\n    state.prog = state.funcs[fn];\n\n    // executes the function\n    exec(state);\n\n    // restores the callers program\n    state.ip = cip;\n    state.prog = cprog;\n\n    if (exports.DEBUG) console.log(++state.step, 'returning from', fn);\n}\n\n// CINDEX[] Copy the INDEXed element to the top of the stack\n// 0x25\nfunction CINDEX(state) {\n    const stack = state.stack;\n    const k = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'CINDEX[]', k);\n\n    // In case of k == 1, it copies the last element after popping\n    // thus stack.length - k.\n    stack.push(stack[stack.length - k]);\n}\n\n// MINDEX[] Move the INDEXed element to the top of the stack\n// 0x26\nfunction MINDEX(state) {\n    const stack = state.stack;\n    const k = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'MINDEX[]', k);\n\n    stack.push(stack.splice(stack.length - k, 1)[0]);\n}\n\n// FDEF[] Function DEFinition\n// 0x2C\nfunction FDEF(state) {\n    if (state.env !== 'fpgm') throw new Error('FDEF not allowed here');\n    const stack = state.stack;\n    const prog = state.prog;\n    let ip = state.ip;\n\n    const fn = stack.pop();\n    const ipBegin = ip;\n\n    if (exports.DEBUG) console.log(state.step, 'FDEF[]', fn);\n\n    while (prog[++ip] !== 0x2D);\n\n    state.ip = ip;\n    state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n}\n\n// MDAP[a] Move Direct Absolute Point\n// 0x2E-0x2F\nfunction MDAP(round, state) {\n    const pi = state.stack.pop();\n    const p = state.z0[pi];\n    const fv = state.fv;\n    const pv = state.pv;\n\n    if (exports.DEBUG) console.log(state.step, 'MDAP[' + round + ']', pi);\n\n    let d = pv.distance(p, HPZero);\n\n    if (round) d = state.round(d);\n\n    fv.setRelative(p, HPZero, d, pv);\n    fv.touch(p);\n\n    state.rp0 = state.rp1 = pi;\n}\n\n// IUP[a] Interpolate Untouched Points through the outline\n// 0x30\nfunction IUP(v, state) {\n    const z2 = state.z2;\n    const pLen = z2.length - 2;\n    let cp;\n    let pp;\n    let np;\n\n    if (exports.DEBUG) console.log(state.step, 'IUP[' + v.axis + ']');\n\n    for (let i = 0; i < pLen; i++) {\n        cp = z2[i]; // current point\n\n        // if this point has been touched go on\n        if (v.touched(cp)) continue;\n\n        pp = cp.prevTouched(v);\n\n        // no point on the contour has been touched?\n        if (pp === cp) continue;\n\n        np = cp.nextTouched(v);\n\n        if (pp === np) {\n            // only one point on the contour has been touched\n            // so simply moves the point like that\n\n            v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n        }\n\n        v.interpolate(cp, pp, np, v);\n    }\n}\n\n// SHP[] SHift Point using reference point\n// 0x32-0x33\nfunction SHP(a, state) {\n    const stack = state.stack;\n    const rpi = a ? state.rp1 : state.rp2;\n    const rp = (a ? state.z0 : state.z1)[rpi];\n    const fv = state.fv;\n    const pv = state.pv;\n    let loop = state.loop;\n    const z2 = state.z2;\n\n    while (loop--)\n    {\n        const pi = stack.pop();\n        const p = z2[pi];\n\n        const d = pv.distance(rp, rp, false, true);\n        fv.setRelative(p, p, d, pv);\n        fv.touch(p);\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ?\n                   'loop ' + (state.loop - loop) + ': ' :\n                   ''\n                ) +\n                'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi\n            );\n        }\n    }\n\n    state.loop = 1;\n}\n\n// SHC[] SHift Contour using reference point\n// 0x36-0x37\nfunction SHC(a, state) {\n    const stack = state.stack;\n    const rpi = a ? state.rp1 : state.rp2;\n    const rp = (a ? state.z0 : state.z1)[rpi];\n    const fv = state.fv;\n    const pv = state.pv;\n    const ci = stack.pop();\n    const sp = state.z2[state.contours[ci]];\n    let p = sp;\n\n    if (exports.DEBUG) console.log(state.step, 'SHC[' + a + ']', ci);\n\n    const d = pv.distance(rp, rp, false, true);\n\n    do {\n        if (p !== rp) fv.setRelative(p, p, d, pv);\n        p = p.nextPointOnContour;\n    } while (p !== sp);\n}\n\n// SHZ[] SHift Zone using reference point\n// 0x36-0x37\nfunction SHZ(a, state) {\n    const stack = state.stack;\n    const rpi = a ? state.rp1 : state.rp2;\n    const rp = (a ? state.z0 : state.z1)[rpi];\n    const fv = state.fv;\n    const pv = state.pv;\n\n    const e = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SHZ[' + a + ']', e);\n\n    let z;\n    switch (e) {\n        case 0 : z = state.tZone; break;\n        case 1 : z = state.gZone; break;\n        default : throw new Error('Invalid zone');\n    }\n\n    let p;\n    const d = pv.distance(rp, rp, false, true);\n    const pLen = z.length - 2;\n    for (let i = 0; i < pLen; i++)\n    {\n        p = z[i];\n        fv.setRelative(p, p, d, pv);\n        //if (p !== rp) fv.setRelative(p, p, d, pv);\n    }\n}\n\n// SHPIX[] SHift point by a PIXel amount\n// 0x38\nfunction SHPIX(state) {\n    const stack = state.stack;\n    let loop = state.loop;\n    const fv = state.fv;\n    const d = stack.pop() / 0x40;\n    const z2 = state.z2;\n\n    while (loop--) {\n        const pi = stack.pop();\n        const p = z2[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'SHPIX[]', pi, d\n            );\n        }\n\n        fv.setRelative(p, p, d);\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// IP[] Interpolate Point\n// 0x39\nfunction IP(state) {\n    const stack = state.stack;\n    const rp1i = state.rp1;\n    const rp2i = state.rp2;\n    let loop = state.loop;\n    const rp1 = state.z0[rp1i];\n    const rp2 = state.z1[rp2i];\n    const fv = state.fv;\n    const pv = state.dpv;\n    const z2 = state.z2;\n\n    while (loop--) {\n        const pi = stack.pop();\n        const p = z2[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'IP[]', pi, rp1i, '<->', rp2i\n            );\n        }\n\n        fv.interpolate(p, rp1, rp2, pv);\n\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// MSIRP[a] Move Stack Indirect Relative Point\n// 0x3A-0x3B\nfunction MSIRP(a, state) {\n    const stack = state.stack;\n    const d = stack.pop() / 64;\n    const pi = stack.pop();\n    const p = state.z1[pi];\n    const rp0 = state.z0[state.rp0];\n    const fv = state.fv;\n    const pv = state.pv;\n\n    fv.setRelative(p, rp0, d, pv);\n    fv.touch(p);\n\n    if (exports.DEBUG) console.log(state.step, 'MSIRP[' + a + ']', d, pi);\n\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (a) state.rp0 = pi;\n}\n\n// ALIGNRP[] Align to reference point.\n// 0x3C\nfunction ALIGNRP(state) {\n    const stack = state.stack;\n    const rp0i = state.rp0;\n    const rp0 = state.z0[rp0i];\n    let loop = state.loop;\n    const fv = state.fv;\n    const pv = state.pv;\n    const z1 = state.z1;\n\n    while (loop--) {\n        const pi = stack.pop();\n        const p = z1[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'ALIGNRP[]', pi\n            );\n        }\n\n        fv.setRelative(p, rp0, 0, pv);\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// RTG[] Round To Double Grid\n// 0x3D\nfunction RTDG(state) {\n    if (exports.DEBUG) console.log(state.step, 'RTDG[]');\n\n    state.round = roundToDoubleGrid;\n}\n\n// MIAP[a] Move Indirect Absolute Point\n// 0x3E-0x3F\nfunction MIAP(round, state) {\n    const stack = state.stack;\n    const n = stack.pop();\n    const pi = stack.pop();\n    const p = state.z0[pi];\n    const fv = state.fv;\n    const pv = state.pv;\n    let cv = state.cvt[n];\n\n    if (exports.DEBUG) {\n        console.log(\n            state.step,\n            'MIAP[' + round + ']',\n            n, '(', cv, ')', pi\n        );\n    }\n\n    let d = pv.distance(p, HPZero);\n\n    if (round) {\n        if (Math.abs(d - cv) < state.cvCutIn) d = cv;\n\n        d = state.round(d);\n    }\n\n    fv.setRelative(p, HPZero, d, pv);\n\n    if (state.zp0 === 0) {\n        p.xo = p.x;\n        p.yo = p.y;\n    }\n\n    fv.touch(p);\n\n    state.rp0 = state.rp1 = pi;\n}\n\n// NPUSB[] PUSH N Bytes\n// 0x40\nfunction NPUSHB(state) {\n    const prog = state.prog;\n    let ip = state.ip;\n    const stack = state.stack;\n\n    const n = prog[++ip];\n\n    if (exports.DEBUG) console.log(state.step, 'NPUSHB[]', n);\n\n    for (let i = 0; i < n; i++) stack.push(prog[++ip]);\n\n    state.ip = ip;\n}\n\n// NPUSHW[] PUSH N Words\n// 0x41\nfunction NPUSHW(state) {\n    let ip = state.ip;\n    const prog = state.prog;\n    const stack = state.stack;\n    const n = prog[++ip];\n\n    if (exports.DEBUG) console.log(state.step, 'NPUSHW[]', n);\n\n    for (let i = 0; i < n; i++) {\n        let w = (prog[++ip] << 8) | prog[++ip];\n        if (w & 0x8000) w = -((w ^ 0xffff) + 1);\n        stack.push(w);\n    }\n\n    state.ip = ip;\n}\n\n// WS[] Write Store\n// 0x42\nfunction WS(state) {\n    const stack = state.stack;\n    let store = state.store;\n\n    if (!store) store = state.store = [];\n\n    const v = stack.pop();\n    const l = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'WS', v, l);\n\n    store[l] = v;\n}\n\n// RS[] Read Store\n// 0x43\nfunction RS(state) {\n    const stack = state.stack;\n    const store = state.store;\n\n    const l = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'RS', l);\n\n    const v = (store && store[l]) || 0;\n\n    stack.push(v);\n}\n\n// WCVTP[] Write Control Value Table in Pixel units\n// 0x44\nfunction WCVTP(state) {\n    const stack = state.stack;\n\n    const v = stack.pop();\n    const l = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'WCVTP', v, l);\n\n    state.cvt[l] = v / 0x40;\n}\n\n// RCVT[] Read Control Value Table entry\n// 0x45\nfunction RCVT(state) {\n    const stack = state.stack;\n    const cvte = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'RCVT', cvte);\n\n    stack.push(state.cvt[cvte] * 0x40);\n}\n\n// GC[] Get Coordinate projected onto the projection vector\n// 0x46-0x47\nfunction GC(a, state) {\n    const stack = state.stack;\n    const pi = stack.pop();\n    const p = state.z2[pi];\n\n    if (exports.DEBUG) console.log(state.step, 'GC[' + a + ']', pi);\n\n    stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);\n}\n\n// MD[a] Measure Distance\n// 0x49-0x4A\nfunction MD(a, state) {\n    const stack = state.stack;\n    const pi2 = stack.pop();\n    const pi1 = stack.pop();\n    const p2 = state.z1[pi2];\n    const p1 = state.z0[pi1];\n    const d = state.dpv.distance(p1, p2, a, a);\n\n    if (exports.DEBUG) console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d);\n\n    state.stack.push(Math.round(d * 64));\n}\n\n// MPPEM[] Measure Pixels Per EM\n// 0x4B\nfunction MPPEM(state) {\n    if (exports.DEBUG) console.log(state.step, 'MPPEM[]');\n    state.stack.push(state.ppem);\n}\n\n// FLIPON[] set the auto FLIP Boolean to ON\n// 0x4D\nfunction FLIPON(state) {\n    if (exports.DEBUG) console.log(state.step, 'FLIPON[]');\n    state.autoFlip = true;\n}\n\n// LT[] Less Than\n// 0x50\nfunction LT(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'LT[]', e2, e1);\n\n    stack.push(e1 < e2 ? 1 : 0);\n}\n\n// LTEQ[] Less Than or EQual\n// 0x53\nfunction LTEQ(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'LTEQ[]', e2, e1);\n\n    stack.push(e1 <= e2 ? 1 : 0);\n}\n\n// GTEQ[] Greater Than\n// 0x52\nfunction GT(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'GT[]', e2, e1);\n\n    stack.push(e1 > e2 ? 1 : 0);\n}\n\n// GTEQ[] Greater Than or EQual\n// 0x53\nfunction GTEQ(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'GTEQ[]', e2, e1);\n\n    stack.push(e1 >= e2 ? 1 : 0);\n}\n\n// EQ[] EQual\n// 0x54\nfunction EQ(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'EQ[]', e2, e1);\n\n    stack.push(e2 === e1 ? 1 : 0);\n}\n\n// NEQ[] Not EQual\n// 0x55\nfunction NEQ(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'NEQ[]', e2, e1);\n\n    stack.push(e2 !== e1 ? 1 : 0);\n}\n\n// ODD[] ODD\n// 0x56\nfunction ODD(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'ODD[]', n);\n\n    stack.push(Math.trunc(n) % 2 ? 1 : 0);\n}\n\n// EVEN[] EVEN\n// 0x57\nfunction EVEN(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'EVEN[]', n);\n\n    stack.push(Math.trunc(n) % 2 ? 0 : 1);\n}\n\n// IF[] IF test\n// 0x58\nfunction IF(state) {\n    let test = state.stack.pop();\n    let ins;\n\n    if (exports.DEBUG) console.log(state.step, 'IF[]', test);\n\n    // if test is true it just continues\n    // if not the ip is skipped until matching ELSE or EIF\n    if (!test) {\n        skip(state, true);\n\n        if (exports.DEBUG) console.log(state.step, ins === 0x1B ? 'ELSE[]' : 'EIF[]');\n    }\n}\n\n// EIF[] End IF\n// 0x59\nfunction EIF(state) {\n    // this can be reached normally when\n    // executing an else branch.\n    // -> just ignore it\n\n    if (exports.DEBUG) console.log(state.step, 'EIF[]');\n}\n\n// AND[] logical AND\n// 0x5A\nfunction AND(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'AND[]', e2, e1);\n\n    stack.push(e2 && e1 ? 1 : 0);\n}\n\n// OR[] logical OR\n// 0x5B\nfunction OR(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'OR[]', e2, e1);\n\n    stack.push(e2 || e1 ? 1 : 0);\n}\n\n// NOT[] logical NOT\n// 0x5C\nfunction NOT(state) {\n    const stack = state.stack;\n    const e = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'NOT[]', e);\n\n    stack.push(e ? 0 : 1);\n}\n\n// DELTAP1[] DELTA exception P1\n// DELTAP2[] DELTA exception P2\n// DELTAP3[] DELTA exception P3\n// 0x5D, 0x71, 0x72\nfunction DELTAP123(b, state) {\n    const stack = state.stack;\n    const n = stack.pop();\n    const fv = state.fv;\n    const pv = state.pv;\n    const ppem = state.ppem;\n    const base = state.deltaBase + (b - 1) * 16;\n    const ds = state.deltaShift;\n    const z0 = state.z0;\n\n    if (exports.DEBUG) console.log(state.step, 'DELTAP[' + b + ']', n, stack);\n\n    for (let i = 0; i < n; i++) {\n        const pi = stack.pop();\n        const arg = stack.pop();\n        const appem = base + ((arg & 0xF0) >> 4);\n        if (appem !== ppem) continue;\n\n        let mag = (arg & 0x0F) - 8;\n        if (mag >= 0) mag++;\n        if (exports.DEBUG) console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds);\n\n        const p = z0[pi];\n        fv.setRelative(p, p, mag * ds, pv);\n    }\n}\n\n// SDB[] Set Delta Base in the graphics state\n// 0x5E\nfunction SDB(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SDB[]', n);\n\n    state.deltaBase = n;\n}\n\n// SDS[] Set Delta Shift in the graphics state\n// 0x5F\nfunction SDS(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SDS[]', n);\n\n    state.deltaShift = Math.pow(0.5, n);\n}\n\n// ADD[] ADD\n// 0x60\nfunction ADD(state) {\n    const stack = state.stack;\n    const n2 = stack.pop();\n    const n1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'ADD[]', n2, n1);\n\n    stack.push(n1 + n2);\n}\n\n// SUB[] SUB\n// 0x61\nfunction SUB(state) {\n    const stack = state.stack;\n    const n2 = stack.pop();\n    const n1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SUB[]', n2, n1);\n\n    stack.push(n1 - n2);\n}\n\n// DIV[] DIV\n// 0x62\nfunction DIV(state) {\n    const stack = state.stack;\n    const n2 = stack.pop();\n    const n1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'DIV[]', n2, n1);\n\n    stack.push(n1 * 64 / n2);\n}\n\n// MUL[] MUL\n// 0x63\nfunction MUL(state) {\n    const stack = state.stack;\n    const n2 = stack.pop();\n    const n1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'MUL[]', n2, n1);\n\n    stack.push(n1 * n2 / 64);\n}\n\n// ABS[] ABSolute value\n// 0x64\nfunction ABS(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'ABS[]', n);\n\n    stack.push(Math.abs(n));\n}\n\n// NEG[] NEGate\n// 0x65\nfunction NEG(state) {\n    const stack = state.stack;\n    let n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'NEG[]', n);\n\n    stack.push(-n);\n}\n\n// FLOOR[] FLOOR\n// 0x66\nfunction FLOOR(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'FLOOR[]', n);\n\n    stack.push(Math.floor(n / 0x40) * 0x40);\n}\n\n// CEILING[] CEILING\n// 0x67\nfunction CEILING(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'CEILING[]', n);\n\n    stack.push(Math.ceil(n / 0x40) * 0x40);\n}\n\n// ROUND[ab] ROUND value\n// 0x68-0x6B\nfunction ROUND(dt, state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'ROUND[]');\n\n    stack.push(state.round(n / 0x40) * 0x40);\n}\n\n// WCVTF[] Write Control Value Table in Funits\n// 0x70\nfunction WCVTF(state) {\n    const stack = state.stack;\n    const v = stack.pop();\n    const l = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'WCVTF[]', v, l);\n\n    state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n}\n\n// DELTAC1[] DELTA exception C1\n// DELTAC2[] DELTA exception C2\n// DELTAC3[] DELTA exception C3\n// 0x73, 0x74, 0x75\nfunction DELTAC123(b, state) {\n    const stack = state.stack;\n    const n = stack.pop();\n    const ppem = state.ppem;\n    const base = state.deltaBase + (b - 1) * 16;\n    const ds = state.deltaShift;\n\n    if (exports.DEBUG) console.log(state.step, 'DELTAC[' + b + ']', n, stack);\n\n    for (let i = 0; i < n; i++) {\n        const c = stack.pop();\n        const arg = stack.pop();\n        const appem = base + ((arg & 0xF0) >> 4);\n        if (appem !== ppem) continue;\n\n        let mag = (arg & 0x0F) - 8;\n        if (mag >= 0) mag++;\n\n        const delta = mag * ds;\n\n        if (exports.DEBUG) console.log(state.step, 'DELTACFIX', c, 'by', delta);\n\n        state.cvt[c] += delta;\n    }\n}\n\n// SROUND[] Super ROUND\n// 0x76\nfunction SROUND(state) {\n    let n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SROUND[]', n);\n\n    state.round = roundSuper;\n\n    let period;\n\n    switch (n & 0xC0) {\n        case 0x00:\n            period = 0.5;\n            break;\n        case 0x40:\n            period = 1;\n            break;\n        case 0x80:\n            period = 2;\n            break;\n        default:\n            throw new Error('invalid SROUND value');\n    }\n\n    state.srPeriod = period;\n\n    switch (n & 0x30) {\n        case 0x00:\n            state.srPhase = 0;\n            break;\n        case 0x10:\n            state.srPhase = 0.25 * period;\n            break;\n        case 0x20:\n            state.srPhase = 0.5  * period;\n            break;\n        case 0x30:\n            state.srPhase = 0.75 * period;\n            break;\n        default: throw new Error('invalid SROUND value');\n    }\n\n    n &= 0x0F;\n\n    if (n === 0) state.srThreshold = 0;\n    else state.srThreshold = (n / 8 - 0.5) * period;\n}\n\n// S45ROUND[] Super ROUND 45 degrees\n// 0x77\nfunction S45ROUND(state) {\n    let n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'S45ROUND[]', n);\n\n    state.round = roundSuper;\n\n    let period;\n\n    switch (n & 0xC0) {\n        case 0x00:\n            period = Math.sqrt(2) / 2;\n            break;\n        case 0x40:\n            period = Math.sqrt(2);\n            break;\n        case 0x80:\n            period = 2 * Math.sqrt(2);\n            break;\n        default:\n            throw new Error('invalid S45ROUND value');\n    }\n\n    state.srPeriod = period;\n\n    switch (n & 0x30) {\n        case 0x00:\n            state.srPhase = 0;\n            break;\n        case 0x10:\n            state.srPhase = 0.25 * period;\n            break;\n        case 0x20:\n            state.srPhase = 0.5  * period;\n            break;\n        case 0x30:\n            state.srPhase = 0.75 * period;\n            break;\n        default:\n            throw new Error('invalid S45ROUND value');\n    }\n\n    n &= 0x0F;\n\n    if (n === 0) state.srThreshold = 0;\n    else state.srThreshold = (n / 8 - 0.5) * period;\n}\n\n// ROFF[] Round Off\n// 0x7A\nfunction ROFF(state) {\n    if (exports.DEBUG) console.log(state.step, 'ROFF[]');\n\n    state.round = roundOff;\n}\n\n// RUTG[] Round Up To Grid\n// 0x7C\nfunction RUTG(state) {\n    if (exports.DEBUG) console.log(state.step, 'RUTG[]');\n\n    state.round = roundUpToGrid;\n}\n\n// RDTG[] Round Down To Grid\n// 0x7D\nfunction RDTG(state) {\n    if (exports.DEBUG) console.log(state.step, 'RDTG[]');\n\n    state.round = roundDownToGrid;\n}\n\n// SCANCTRL[] SCAN conversion ConTRoL\n// 0x85\nfunction SCANCTRL(state) {\n    const n = state.stack.pop();\n\n    // ignored by opentype.js\n\n    if (exports.DEBUG) console.log(state.step, 'SCANCTRL[]', n);\n}\n\n// SDPVTL[a] Set Dual Projection Vector To Line\n// 0x86-0x87\nfunction SDPVTL(a, state) {\n    const stack = state.stack;\n    const p2i = stack.pop();\n    const p1i = stack.pop();\n    const p2 = state.z2[p2i];\n    const p1 = state.z1[p1i];\n\n    if (exports.DEBUG) console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i);\n\n    let dx;\n    let dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.dpv = getUnitVector(dx, dy);\n}\n\n// GETINFO[] GET INFOrmation\n// 0x88\nfunction GETINFO(state) {\n    const stack = state.stack;\n    const sel = stack.pop();\n    let r = 0;\n\n    if (exports.DEBUG) console.log(state.step, 'GETINFO[]', sel);\n\n    // v35 as in no subpixel hinting\n    if (sel & 0x01) r = 35;\n\n    // TODO rotation and stretch currently not supported\n    // and thus those GETINFO are always 0.\n\n    // opentype.js is always gray scaling\n    if (sel & 0x20) r |= 0x1000;\n\n    stack.push(r);\n}\n\n// ROLL[] ROLL the top three stack elements\n// 0x8A\nfunction ROLL(state) {\n    const stack = state.stack;\n    const a = stack.pop();\n    const b = stack.pop();\n    const c = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'ROLL[]');\n\n    stack.push(b);\n    stack.push(a);\n    stack.push(c);\n}\n\n// MAX[] MAXimum of top two stack elements\n// 0x8B\nfunction MAX(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'MAX[]', e2, e1);\n\n    stack.push(Math.max(e1, e2));\n}\n\n// MIN[] MINimum of top two stack elements\n// 0x8C\nfunction MIN(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'MIN[]', e2, e1);\n\n    stack.push(Math.min(e1, e2));\n}\n\n// SCANTYPE[] SCANTYPE\n// 0x8D\nfunction SCANTYPE(state) {\n    const n = state.stack.pop();\n    // ignored by opentype.js\n    if (exports.DEBUG) console.log(state.step, 'SCANTYPE[]', n);\n}\n\n// INSTCTRL[] INSTCTRL\n// 0x8D\nfunction INSTCTRL(state) {\n    const s = state.stack.pop();\n    let v = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'INSTCTRL[]', s, v);\n\n    switch (s) {\n        case 1 : state.inhibitGridFit = !!v; return;\n        case 2 : state.ignoreCvt = !!v; return;\n        default: throw new Error('invalid INSTCTRL[] selector');\n    }\n}\n\n// PUSHB[abc] PUSH Bytes\n// 0xB0-0xB7\nfunction PUSHB(n, state) {\n    const stack = state.stack;\n    const prog = state.prog;\n    let ip = state.ip;\n\n    if (exports.DEBUG) console.log(state.step, 'PUSHB[' + n + ']');\n\n    for (let i = 0; i < n; i++) stack.push(prog[++ip]);\n\n    state.ip = ip;\n}\n\n// PUSHW[abc] PUSH Words\n// 0xB8-0xBF\nfunction PUSHW(n, state) {\n    let ip = state.ip;\n    const prog = state.prog;\n    const stack = state.stack;\n\n    if (exports.DEBUG) console.log(state.ip, 'PUSHW[' + n + ']');\n\n    for (let i = 0; i < n; i++) {\n        let w = (prog[++ip] << 8) | prog[++ip];\n        if (w & 0x8000) w = -((w ^ 0xffff) + 1);\n        stack.push(w);\n    }\n\n    state.ip = ip;\n}\n\n// MDRP[abcde] Move Direct Relative Point\n// 0xD0-0xEF\n// (if indirect is 0)\n//\n// and\n//\n// MIRP[abcde] Move Indirect Relative Point\n// 0xE0-0xFF\n// (if indirect is 1)\n\nfunction MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {\n    const stack = state.stack;\n    const cvte = indirect && stack.pop();\n    const pi = stack.pop();\n    const rp0i = state.rp0;\n    const rp = state.z0[rp0i];\n    const p = state.z1[pi];\n\n    const md = state.minDis;\n    const fv = state.fv;\n    const pv = state.dpv;\n    let od; // original distance\n    let d; // moving distance\n    let sign; // sign of distance\n    let cv;\n\n    d = od = pv.distance(p, rp, true, true);\n    sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0\n\n    // TODO consider autoFlip\n    d = Math.abs(d);\n\n    if (indirect) {\n        cv = state.cvt[cvte];\n\n        if (ro && Math.abs(d - cv) < state.cvCutIn) d = cv;\n    }\n\n    if (keepD && d < md) d = md;\n\n    if (ro) d = state.round(d);\n\n    fv.setRelative(p, rp, sign * d, pv);\n    fv.touch(p);\n\n    if (exports.DEBUG) {\n        console.log(\n            state.step,\n            (indirect ? 'MIRP[' : 'MDRP[') +\n            (setRp0 ? 'M' : 'm') +\n            (keepD ? '>' : '_') +\n            (ro ? 'R' : '_') +\n            (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +\n            ']',\n            indirect ?\n                cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :\n                '',\n            pi,\n            '(d =', od, '->', sign * d, ')'\n        );\n    }\n\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (setRp0) state.rp0 = pi;\n}\n\n/*\n* The instruction table.\n*/\ninstructionTable = [\n    /* 0x00 */ SVTCA.bind(undefined, yUnitVector),\n    /* 0x01 */ SVTCA.bind(undefined, xUnitVector),\n    /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),\n    /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),\n    /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),\n    /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),\n    /* 0x06 */ SPVTL.bind(undefined, 0),\n    /* 0x07 */ SPVTL.bind(undefined, 1),\n    /* 0x08 */ SFVTL.bind(undefined, 0),\n    /* 0x09 */ SFVTL.bind(undefined, 1),\n    /* 0x0A */ SPVFS,\n    /* 0x0B */ SFVFS,\n    /* 0x0C */ GPV,\n    /* 0x0D */ GFV,\n    /* 0x0E */ SFVTPV,\n    /* 0x0F */ ISECT,\n    /* 0x10 */ SRP0,\n    /* 0x11 */ SRP1,\n    /* 0x12 */ SRP2,\n    /* 0x13 */ SZP0,\n    /* 0x14 */ SZP1,\n    /* 0x15 */ SZP2,\n    /* 0x16 */ SZPS,\n    /* 0x17 */ SLOOP,\n    /* 0x18 */ RTG,\n    /* 0x19 */ RTHG,\n    /* 0x1A */ SMD,\n    /* 0x1B */ ELSE,\n    /* 0x1C */ JMPR,\n    /* 0x1D */ SCVTCI,\n    /* 0x1E */ undefined,   // TODO SSWCI\n    /* 0x1F */ undefined,   // TODO SSW\n    /* 0x20 */ DUP,\n    /* 0x21 */ POP,\n    /* 0x22 */ CLEAR,\n    /* 0x23 */ SWAP,\n    /* 0x24 */ DEPTH,\n    /* 0x25 */ CINDEX,\n    /* 0x26 */ MINDEX,\n    /* 0x27 */ undefined,   // TODO ALIGNPTS\n    /* 0x28 */ undefined,\n    /* 0x29 */ undefined,   // TODO UTP\n    /* 0x2A */ LOOPCALL,\n    /* 0x2B */ CALL,\n    /* 0x2C */ FDEF,\n    /* 0x2D */ undefined,   // ENDF (eaten by FDEF)\n    /* 0x2E */ MDAP.bind(undefined, 0),\n    /* 0x2F */ MDAP.bind(undefined, 1),\n    /* 0x30 */ IUP.bind(undefined, yUnitVector),\n    /* 0x31 */ IUP.bind(undefined, xUnitVector),\n    /* 0x32 */ SHP.bind(undefined, 0),\n    /* 0x33 */ SHP.bind(undefined, 1),\n    /* 0x34 */ SHC.bind(undefined, 0),\n    /* 0x35 */ SHC.bind(undefined, 1),\n    /* 0x36 */ SHZ.bind(undefined, 0),\n    /* 0x37 */ SHZ.bind(undefined, 1),\n    /* 0x38 */ SHPIX,\n    /* 0x39 */ IP,\n    /* 0x3A */ MSIRP.bind(undefined, 0),\n    /* 0x3B */ MSIRP.bind(undefined, 1),\n    /* 0x3C */ ALIGNRP,\n    /* 0x3D */ RTDG,\n    /* 0x3E */ MIAP.bind(undefined, 0),\n    /* 0x3F */ MIAP.bind(undefined, 1),\n    /* 0x40 */ NPUSHB,\n    /* 0x41 */ NPUSHW,\n    /* 0x42 */ WS,\n    /* 0x43 */ RS,\n    /* 0x44 */ WCVTP,\n    /* 0x45 */ RCVT,\n    /* 0x46 */ GC.bind(undefined, 0),\n    /* 0x47 */ GC.bind(undefined, 1),\n    /* 0x48 */ undefined,   // TODO SCFS\n    /* 0x49 */ MD.bind(undefined, 0),\n    /* 0x4A */ MD.bind(undefined, 1),\n    /* 0x4B */ MPPEM,\n    /* 0x4C */ undefined,   // TODO MPS\n    /* 0x4D */ FLIPON,\n    /* 0x4E */ undefined,   // TODO FLIPOFF\n    /* 0x4F */ undefined,   // TODO DEBUG\n    /* 0x50 */ LT,\n    /* 0x51 */ LTEQ,\n    /* 0x52 */ GT,\n    /* 0x53 */ GTEQ,\n    /* 0x54 */ EQ,\n    /* 0x55 */ NEQ,\n    /* 0x56 */ ODD,\n    /* 0x57 */ EVEN,\n    /* 0x58 */ IF,\n    /* 0x59 */ EIF,\n    /* 0x5A */ AND,\n    /* 0x5B */ OR,\n    /* 0x5C */ NOT,\n    /* 0x5D */ DELTAP123.bind(undefined, 1),\n    /* 0x5E */ SDB,\n    /* 0x5F */ SDS,\n    /* 0x60 */ ADD,\n    /* 0x61 */ SUB,\n    /* 0x62 */ DIV,\n    /* 0x63 */ MUL,\n    /* 0x64 */ ABS,\n    /* 0x65 */ NEG,\n    /* 0x66 */ FLOOR,\n    /* 0x67 */ CEILING,\n    /* 0x68 */ ROUND.bind(undefined, 0),\n    /* 0x69 */ ROUND.bind(undefined, 1),\n    /* 0x6A */ ROUND.bind(undefined, 2),\n    /* 0x6B */ ROUND.bind(undefined, 3),\n    /* 0x6C */ undefined,   // TODO NROUND[ab]\n    /* 0x6D */ undefined,   // TODO NROUND[ab]\n    /* 0x6E */ undefined,   // TODO NROUND[ab]\n    /* 0x6F */ undefined,   // TODO NROUND[ab]\n    /* 0x70 */ WCVTF,\n    /* 0x71 */ DELTAP123.bind(undefined, 2),\n    /* 0x72 */ DELTAP123.bind(undefined, 3),\n    /* 0x73 */ DELTAC123.bind(undefined, 1),\n    /* 0x74 */ DELTAC123.bind(undefined, 2),\n    /* 0x75 */ DELTAC123.bind(undefined, 3),\n    /* 0x76 */ SROUND,\n    /* 0x77 */ S45ROUND,\n    /* 0x78 */ undefined,   // TODO JROT[]\n    /* 0x79 */ undefined,   // TODO JROF[]\n    /* 0x7A */ ROFF,\n    /* 0x7B */ undefined,\n    /* 0x7C */ RUTG,\n    /* 0x7D */ RDTG,\n    /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though\n    /* 0x7F */ POP, // actually AA, supposed to do only a pop though\n    /* 0x80 */ undefined,   // TODO FLIPPT\n    /* 0x81 */ undefined,   // TODO FLIPRGON\n    /* 0x82 */ undefined,   // TODO FLIPRGOFF\n    /* 0x83 */ undefined,\n    /* 0x84 */ undefined,\n    /* 0x85 */ SCANCTRL,\n    /* 0x86 */ SDPVTL.bind(undefined, 0),\n    /* 0x87 */ SDPVTL.bind(undefined, 1),\n    /* 0x88 */ GETINFO,\n    /* 0x89 */ undefined,   // TODO IDEF\n    /* 0x8A */ ROLL,\n    /* 0x8B */ MAX,\n    /* 0x8C */ MIN,\n    /* 0x8D */ SCANTYPE,\n    /* 0x8E */ INSTCTRL,\n    /* 0x8F */ undefined,\n    /* 0x90 */ undefined,\n    /* 0x91 */ undefined,\n    /* 0x92 */ undefined,\n    /* 0x93 */ undefined,\n    /* 0x94 */ undefined,\n    /* 0x95 */ undefined,\n    /* 0x96 */ undefined,\n    /* 0x97 */ undefined,\n    /* 0x98 */ undefined,\n    /* 0x99 */ undefined,\n    /* 0x9A */ undefined,\n    /* 0x9B */ undefined,\n    /* 0x9C */ undefined,\n    /* 0x9D */ undefined,\n    /* 0x9E */ undefined,\n    /* 0x9F */ undefined,\n    /* 0xA0 */ undefined,\n    /* 0xA1 */ undefined,\n    /* 0xA2 */ undefined,\n    /* 0xA3 */ undefined,\n    /* 0xA4 */ undefined,\n    /* 0xA5 */ undefined,\n    /* 0xA6 */ undefined,\n    /* 0xA7 */ undefined,\n    /* 0xA8 */ undefined,\n    /* 0xA9 */ undefined,\n    /* 0xAA */ undefined,\n    /* 0xAB */ undefined,\n    /* 0xAC */ undefined,\n    /* 0xAD */ undefined,\n    /* 0xAE */ undefined,\n    /* 0xAF */ undefined,\n    /* 0xB0 */ PUSHB.bind(undefined, 1),\n    /* 0xB1 */ PUSHB.bind(undefined, 2),\n    /* 0xB2 */ PUSHB.bind(undefined, 3),\n    /* 0xB3 */ PUSHB.bind(undefined, 4),\n    /* 0xB4 */ PUSHB.bind(undefined, 5),\n    /* 0xB5 */ PUSHB.bind(undefined, 6),\n    /* 0xB6 */ PUSHB.bind(undefined, 7),\n    /* 0xB7 */ PUSHB.bind(undefined, 8),\n    /* 0xB8 */ PUSHW.bind(undefined, 1),\n    /* 0xB9 */ PUSHW.bind(undefined, 2),\n    /* 0xBA */ PUSHW.bind(undefined, 3),\n    /* 0xBB */ PUSHW.bind(undefined, 4),\n    /* 0xBC */ PUSHW.bind(undefined, 5),\n    /* 0xBD */ PUSHW.bind(undefined, 6),\n    /* 0xBE */ PUSHW.bind(undefined, 7),\n    /* 0xBF */ PUSHW.bind(undefined, 8),\n    /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),\n    /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),\n    /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),\n    /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),\n    /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),\n    /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),\n    /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),\n    /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),\n    /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),\n    /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),\n    /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),\n    /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),\n    /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),\n    /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),\n    /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),\n    /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),\n    /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),\n    /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),\n    /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),\n    /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),\n    /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),\n    /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),\n    /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),\n    /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),\n    /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),\n    /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),\n    /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),\n    /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),\n    /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),\n    /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),\n    /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),\n    /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),\n    /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),\n    /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),\n    /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),\n    /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),\n    /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),\n    /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),\n    /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),\n    /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),\n    /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),\n    /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),\n    /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),\n    /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),\n    /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),\n    /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),\n    /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),\n    /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),\n    /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),\n    /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),\n    /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),\n    /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),\n    /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),\n    /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),\n    /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),\n    /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),\n    /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),\n    /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),\n    /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),\n    /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),\n    /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),\n    /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),\n    /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),\n    /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)\n];\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Hinting);\n\n/*****************************\n  Mathematical Considerations\n******************************\n\nfv ... refers to freedom vector\npv ... refers to projection vector\nrp ... refers to reference point\np  ... refers to to point being operated on\nd  ... refers to distance\n\nSETRELATIVE:\n============\n\ncase freedom vector == x-axis:\n------------------------------\n\n                        (pv)\n                     .-'\n              rpd .-'\n               .-*\n          d .-'90°'\n         .-'       '\n      .-'           '\n   *-'               ' b\n  rp                  '\n                       '\n                        '\n            p *----------*-------------- (fv)\n                          pm\n\n  rpdx = rpx + d * pv.x\n  rpdy = rpy + d * pv.y\n\n  equation of line b\n\n   y - rpdy = pvns * (x- rpdx)\n\n   y = p.y\n\n   x = rpdx + ( p.y - rpdy ) / pvns\n\n\ncase freedom vector == y-axis:\n------------------------------\n\n    * pm\n    |\\\n    | \\\n    |  \\\n    |   \\\n    |    \\\n    |     \\\n    |      \\\n    |       \\\n    |        \\\n    |         \\ b\n    |          \\\n    |           \\\n    |            \\    .-' (pv)\n    |         90° \\.-'\n    |           .-'* rpd\n    |        .-'\n    *     *-'  d\n    p     rp\n\n  rpdx = rpx + d * pv.x\n  rpdy = rpy + d * pv.y\n\n  equation of line b:\n           pvns ... normal slope to pv\n\n   y - rpdy = pvns * (x - rpdx)\n\n   x = p.x\n\n   y = rpdy +  pvns * (p.x - rpdx)\n\n\n\ngeneric case:\n-------------\n\n\n                              .'(fv)\n                            .'\n                          .* pm\n                        .' !\n                      .'    .\n                    .'      !\n                  .'         . b\n                .'           !\n               *              .\n              p               !\n                         90°   .    ... (pv)\n                           ...-*-'''\n                  ...---'''    rpd\n         ...---'''   d\n   *--'''\n  rp\n\n    rpdx = rpx + d * pv.x\n    rpdy = rpy + d * pv.y\n\n equation of line b:\n    pvns... normal slope to pv\n\n    y - rpdy = pvns * (x - rpdx)\n\n equation of freedom vector line:\n    fvs ... slope of freedom vector (=fy/fx)\n\n    y - py = fvs * (x - px)\n\n\n  on pm both equations are true for same x/y\n\n    y - rpdy = pvns * (x - rpdx)\n\n    y - py = fvs * (x - px)\n\n  form to y and set equal:\n\n    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n\n  expand:\n\n    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n\n  switch:\n\n    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n\n  solve for x:\n\n    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n\n\n\n          fvs * px - pvns * rpdx + rpdy - py\n    x =  -----------------------------------\n                 fvs - pvns\n\n  and:\n\n    y = fvs * (x - px) + py\n\n\n\nINTERPOLATE:\n============\n\nExamples of point interpolation.\n\nThe weight of the movement of the reference point gets bigger\nthe further the other reference point is away, thus the safest\noption (that is avoiding 0/0 divisions) is to weight the\noriginal distance of the other point by the sum of both distances.\n\nIf the sum of both distances is 0, then move the point by the\narithmetic average of the movement of both reference points.\n\n\n\n\n           (+6)\n    rp1o *---->*rp1\n         .     .                          (+12)\n         .     .                  rp2o *---------->* rp2\n         .     .                       .           .\n         .     .                       .           .\n         .    10          20           .           .\n         |.........|...................|           .\n               .   .                               .\n               .   . (+8)                          .\n                po *------>*p                      .\n               .           .                       .\n               .    12     .          24           .\n               |...........|.......................|\n                                  36\n\n\n-------\n\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .                      (-10)\n         .         .              rp2 *<---------* rpo2\n         .         .                   .         .\n         .         .                   .         .\n         .    10   .          30       .         .\n         |.........|.............................|\n                   .                   .\n                   . (+5)              .\n                po *--->* p            .\n                   .    .              .\n                   .    .   20         .\n                   |....|..............|\n                     5        15\n\n\n-------\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .\n         .         .\n    rp2o *-------->*rp2\n\n\n                               (+10)\n                          po *-------->* p\n\n-------\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .\n         .         .(+30)\n    rp2o *---------------------------->*rp2\n\n\n                                        (+25)\n                          po *----------------------->* p\n\n\n\nvim: set ts=4 sw=4 expandtab:\n*****/\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/hintingtt.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/layout.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/layout.js ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n// The Layout object is the prototype of Substitution objects, and provides\n// utility methods to manipulate common layout tables (GPOS, GSUB, GDEF...)\n\n\n\nfunction searchTag(arr, tag) {\n    /* jshint bitwise: false */\n    let imin = 0;\n    let imax = arr.length - 1;\n    while (imin <= imax) {\n        const imid = (imin + imax) >>> 1;\n        const val = arr[imid].tag;\n        if (val === tag) {\n            return imid;\n        } else if (val < tag) {\n            imin = imid + 1;\n        } else { imax = imid - 1; }\n    }\n    // Not found: return -1-insertion point\n    return -imin - 1;\n}\n\nfunction binSearch(arr, value) {\n    /* jshint bitwise: false */\n    let imin = 0;\n    let imax = arr.length - 1;\n    while (imin <= imax) {\n        const imid = (imin + imax) >>> 1;\n        const val = arr[imid];\n        if (val === value) {\n            return imid;\n        } else if (val < value) {\n            imin = imid + 1;\n        } else { imax = imid - 1; }\n    }\n    // Not found: return -1-insertion point\n    return -imin - 1;\n}\n\n// binary search in a list of ranges (coverage, class definition)\nfunction searchRange(ranges, value) {\n    // jshint bitwise: false\n    let range;\n    let imin = 0;\n    let imax = ranges.length - 1;\n    while (imin <= imax) {\n        const imid = (imin + imax) >>> 1;\n        range = ranges[imid];\n        const start = range.start;\n        if (start === value) {\n            return range;\n        } else if (start < value) {\n            imin = imid + 1;\n        } else { imax = imid - 1; }\n    }\n    if (imin > 0) {\n        range = ranges[imin - 1];\n        if (value > range.end) return 0;\n        return range;\n    }\n}\n\n/**\n * @exports opentype.Layout\n * @class\n */\nfunction Layout(font, tableName) {\n    this.font = font;\n    this.tableName = tableName;\n}\n\nLayout.prototype = {\n\n    /**\n     * Binary search an object by \"tag\" property\n     * @instance\n     * @function searchTag\n     * @memberof opentype.Layout\n     * @param  {Array} arr\n     * @param  {string} tag\n     * @return {number}\n     */\n    searchTag: searchTag,\n\n    /**\n     * Binary search in a list of numbers\n     * @instance\n     * @function binSearch\n     * @memberof opentype.Layout\n     * @param  {Array} arr\n     * @param  {number} value\n     * @return {number}\n     */\n    binSearch: binSearch,\n\n    /**\n     * Get or create the Layout table (GSUB, GPOS etc).\n     * @param  {boolean} create - Whether to create a new one.\n     * @return {Object} The GSUB or GPOS table.\n     */\n    getTable: function(create) {\n        let layout = this.font.tables[this.tableName];\n        if (!layout && create) {\n            layout = this.font.tables[this.tableName] = this.createDefaultTable();\n        }\n        return layout;\n    },\n\n    /**\n     * Returns all scripts in the substitution table.\n     * @instance\n     * @return {Array}\n     */\n    getScriptNames: function() {\n        let layout = this.getTable();\n        if (!layout) { return []; }\n        return layout.scripts.map(function(script) {\n            return script.tag;\n        });\n    },\n\n    /**\n     * Returns the best bet for a script name.\n     * Returns 'DFLT' if it exists.\n     * If not, returns 'latn' if it exists.\n     * If neither exist, returns undefined.\n     */\n    getDefaultScriptName: function() {\n        let layout = this.getTable();\n        if (!layout) { return; }\n        let hasLatn = false;\n        for (let i = 0; i < layout.scripts.length; i++) {\n            const name = layout.scripts[i].tag;\n            if (name === 'DFLT') return name;\n            if (name === 'latn') hasLatn = true;\n        }\n        if (hasLatn) return 'latn';\n    },\n\n    /**\n     * Returns all LangSysRecords in the given script.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {boolean} create - forces the creation of this script table if it doesn't exist.\n     * @return {Object} An object with tag and script properties.\n     */\n    getScriptTable: function(script, create) {\n        const layout = this.getTable(create);\n        if (layout) {\n            script = script || 'DFLT';\n            const scripts = layout.scripts;\n            const pos = searchTag(layout.scripts, script);\n            if (pos >= 0) {\n                return scripts[pos].script;\n            } else if (create) {\n                const scr = {\n                    tag: script,\n                    script: {\n                        defaultLangSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []},\n                        langSysRecords: []\n                    }\n                };\n                scripts.splice(-1 - pos, 0, scr);\n                return scr.script;\n            }\n        }\n    },\n\n    /**\n     * Returns a language system table\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.\n     * @return {Object}\n     */\n    getLangSysTable: function(script, language, create) {\n        const scriptTable = this.getScriptTable(script, create);\n        if (scriptTable) {\n            if (!language || language === 'dflt' || language === 'DFLT') {\n                return scriptTable.defaultLangSys;\n            }\n            const pos = searchTag(scriptTable.langSysRecords, language);\n            if (pos >= 0) {\n                return scriptTable.langSysRecords[pos].langSys;\n            } else if (create) {\n                const langSysRecord = {\n                    tag: language,\n                    langSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []}\n                };\n                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n                return langSysRecord.langSys;\n            }\n        }\n    },\n\n    /**\n     * Get a specific feature table.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm\n     * @param {boolean} create - forces the creation of the feature table if it doesn't exist.\n     * @return {Object}\n     */\n    getFeatureTable: function(script, language, feature, create) {\n        const langSysTable = this.getLangSysTable(script, language, create);\n        if (langSysTable) {\n            let featureRecord;\n            const featIndexes = langSysTable.featureIndexes;\n            const allFeatures = this.font.tables[this.tableName].features;\n            // The FeatureIndex array of indices is in arbitrary order,\n            // even if allFeatures is sorted alphabetically by feature tag.\n            for (let i = 0; i < featIndexes.length; i++) {\n                featureRecord = allFeatures[featIndexes[i]];\n                if (featureRecord.tag === feature) {\n                    return featureRecord.feature;\n                }\n            }\n            if (create) {\n                const index = allFeatures.length;\n                // Automatic ordering of features would require to shift feature indexes in the script list.\n                _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');\n                featureRecord = {\n                    tag: feature,\n                    feature: { params: 0, lookupListIndexes: [] }\n                };\n                allFeatures.push(featureRecord);\n                featIndexes.push(index);\n                return featureRecord.feature;\n            }\n        }\n    },\n\n    /**\n     * Get the lookup tables of a given type for a script/language/feature.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {string} feature - 4-letter feature code\n     * @param {number} lookupType - 1 to 9\n     * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.\n     * @return {Object[]}\n     */\n    getLookupTables: function(script, language, feature, lookupType, create) {\n        const featureTable = this.getFeatureTable(script, language, feature, create);\n        const tables = [];\n        if (featureTable) {\n            let lookupTable;\n            const lookupListIndexes = featureTable.lookupListIndexes;\n            const allLookups = this.font.tables[this.tableName].lookups;\n            // lookupListIndexes are in no particular order, so use naive search.\n            for (let i = 0; i < lookupListIndexes.length; i++) {\n                lookupTable = allLookups[lookupListIndexes[i]];\n                if (lookupTable.lookupType === lookupType) {\n                    tables.push(lookupTable);\n                }\n            }\n            if (tables.length === 0 && create) {\n                lookupTable = {\n                    lookupType: lookupType,\n                    lookupFlag: 0,\n                    subtables: [],\n                    markFilteringSet: undefined\n                };\n                const index = allLookups.length;\n                allLookups.push(lookupTable);\n                lookupListIndexes.push(index);\n                return [lookupTable];\n            }\n        }\n        return tables;\n    },\n\n    /**\n     * Find a glyph in a class definition table\n     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table\n     * @param {object} classDefTable - an OpenType Layout class definition table\n     * @param {number} glyphIndex - the index of the glyph to find\n     * @returns {number} -1 if not found\n     */\n    getGlyphClass: function(classDefTable, glyphIndex) {\n        switch (classDefTable.format) {\n            case 1:\n                if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {\n                    return classDefTable.classes[glyphIndex - classDefTable.startGlyph];\n                }\n                return 0;\n            case 2:\n                const range = searchRange(classDefTable.ranges, glyphIndex);\n                return range ? range.classId : 0;\n        }\n    },\n\n    /**\n     * Find a glyph in a coverage table\n     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table\n     * @param {object} coverageTable - an OpenType Layout coverage table\n     * @param {number} glyphIndex - the index of the glyph to find\n     * @returns {number} -1 if not found\n     */\n    getCoverageIndex: function(coverageTable, glyphIndex) {\n        switch (coverageTable.format) {\n            case 1:\n                const index = binSearch(coverageTable.glyphs, glyphIndex);\n                return index >= 0 ? index : -1;\n            case 2:\n                const range = searchRange(coverageTable.ranges, glyphIndex);\n                return range ? range.index + glyphIndex - range.start : -1;\n        }\n    },\n\n    /**\n     * Returns the list of glyph indexes of a coverage table.\n     * Format 1: the list is stored raw\n     * Format 2: compact list as range records.\n     * @instance\n     * @param  {Object} coverageTable\n     * @return {Array}\n     */\n    expandCoverage: function(coverageTable) {\n        if (coverageTable.format === 1) {\n            return coverageTable.glyphs;\n        } else {\n            const glyphs = [];\n            const ranges = coverageTable.ranges;\n            for (let i = 0; i < ranges.length; i++) {\n                const range = ranges[i];\n                const start = range.start;\n                const end = range.end;\n                for (let j = start; j <= end; j++) {\n                    glyphs.push(j);\n                }\n            }\n            return glyphs;\n        }\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Layout);\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/layout.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/opentype.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/opentype.js ***!
  \*************************************************************************************/
/*! exports provided: Font, Glyph, Path, BoundingBox, _parse, parse, load, loadSync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return parseBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"load\", function() { return load; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadSync\", function() { return loadSync; });\n/* harmony import */ var string_prototype_codepointat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! string.prototype.codepointat */ \"../../node_modules/string.prototype.codepointat/codepointat.js\");\n/* harmony import */ var string_prototype_codepointat__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(string_prototype_codepointat__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var tiny_inflate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tiny-inflate */ \"../../node_modules/tiny-inflate/index.js\");\n/* harmony import */ var tiny_inflate__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tiny_inflate__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./font */ \"../../node_modules/opentype.js/src/font.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Font\", function() { return _font__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ \"../../node_modules/opentype.js/src/glyph.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Glyph\", function() { return _glyph__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _encoding__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./encoding */ \"../../node_modules/opentype.js/src/encoding.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"_parse\", function() { return _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _bbox__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bbox */ \"../../node_modules/opentype.js/src/bbox.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BoundingBox\", function() { return _bbox__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony import */ var _path__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./path */ \"../../node_modules/opentype.js/src/path.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Path\", function() { return _path__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; });\n\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util */ \"../../node_modules/opentype.js/src/util.js\");\n/* harmony import */ var _tables_cmap__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tables/cmap */ \"../../node_modules/opentype.js/src/tables/cmap.js\");\n/* harmony import */ var _tables_cff__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tables/cff */ \"../../node_modules/opentype.js/src/tables/cff.js\");\n/* harmony import */ var _tables_fvar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./tables/fvar */ \"../../node_modules/opentype.js/src/tables/fvar.js\");\n/* harmony import */ var _tables_glyf__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tables/glyf */ \"../../node_modules/opentype.js/src/tables/glyf.js\");\n/* harmony import */ var _tables_gpos__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./tables/gpos */ \"../../node_modules/opentype.js/src/tables/gpos.js\");\n/* harmony import */ var _tables_gsub__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./tables/gsub */ \"../../node_modules/opentype.js/src/tables/gsub.js\");\n/* harmony import */ var _tables_head__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./tables/head */ \"../../node_modules/opentype.js/src/tables/head.js\");\n/* harmony import */ var _tables_hhea__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./tables/hhea */ \"../../node_modules/opentype.js/src/tables/hhea.js\");\n/* harmony import */ var _tables_hmtx__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./tables/hmtx */ \"../../node_modules/opentype.js/src/tables/hmtx.js\");\n/* harmony import */ var _tables_kern__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./tables/kern */ \"../../node_modules/opentype.js/src/tables/kern.js\");\n/* harmony import */ var _tables_ltag__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./tables/ltag */ \"../../node_modules/opentype.js/src/tables/ltag.js\");\n/* harmony import */ var _tables_loca__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./tables/loca */ \"../../node_modules/opentype.js/src/tables/loca.js\");\n/* harmony import */ var _tables_maxp__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./tables/maxp */ \"../../node_modules/opentype.js/src/tables/maxp.js\");\n/* harmony import */ var _tables_name__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./tables/name */ \"../../node_modules/opentype.js/src/tables/name.js\");\n/* harmony import */ var _tables_os2__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./tables/os2 */ \"../../node_modules/opentype.js/src/tables/os2.js\");\n/* harmony import */ var _tables_post__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./tables/post */ \"../../node_modules/opentype.js/src/tables/post.js\");\n/* harmony import */ var _tables_meta__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./tables/meta */ \"../../node_modules/opentype.js/src/tables/meta.js\");\n// opentype.js\n// https://github.com/opentypejs/opentype.js\n// (c) 2015 Frederik De Bleser\n// opentype.js may be freely distributed under the MIT license.\n\n/* global DataView, Uint8Array, XMLHttpRequest  */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The opentype library.\n * @namespace opentype\n */\n\n// File loaders /////////////////////////////////////////////////////////\n/**\n * Loads a font from a file. The callback throws an error message as the first parameter if it fails\n * and the font as an ArrayBuffer in the second parameter if it succeeds.\n * @param  {string} path - The path of the file\n * @param  {Function} callback - The function to call when the font load completes\n */\nfunction loadFromFile(path, callback) {\n    const fs = __webpack_require__(/*! fs */ 0);\n    fs.readFile(path, function(err, buffer) {\n        if (err) {\n            return callback(err.message);\n        }\n\n        callback(null, Object(_util__WEBPACK_IMPORTED_MODULE_8__[\"nodeBufferToArrayBuffer\"])(buffer));\n    });\n}\n/**\n * Loads a font from a URL. The callback throws an error message as the first parameter if it fails\n * and the font as an ArrayBuffer in the second parameter if it succeeds.\n * @param  {string} url - The URL of the font file.\n * @param  {Function} callback - The function to call when the font load completes\n */\nfunction loadFromUrl(url, callback) {\n    const request = new XMLHttpRequest();\n    request.open('get', url, true);\n    request.responseType = 'arraybuffer';\n    request.onload = function() {\n        if (request.response) {\n            return callback(null, request.response);\n        } else {\n            return callback('Font could not be loaded: ' + request.statusText);\n        }\n    };\n\n    request.onerror = function () {\n        callback('Font could not be loaded');\n    };\n\n    request.send();\n}\n\n// Table Directory Entries //////////////////////////////////////////////\n/**\n * Parses OpenType table entries.\n * @param  {DataView}\n * @param  {Number}\n * @return {Object[]}\n */\nfunction parseOpenTypeTableEntries(data, numTables) {\n    const tableEntries = [];\n    let p = 12;\n    for (let i = 0; i < numTables; i += 1) {\n        const tag = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getTag(data, p);\n        const checksum = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 4);\n        const offset = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 8);\n        const length = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 12);\n        tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});\n        p += 16;\n    }\n\n    return tableEntries;\n}\n\n/**\n * Parses WOFF table entries.\n * @param  {DataView}\n * @param  {Number}\n * @return {Object[]}\n */\nfunction parseWOFFTableEntries(data, numTables) {\n    const tableEntries = [];\n    let p = 44; // offset to the first table directory entry.\n    for (let i = 0; i < numTables; i += 1) {\n        const tag = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getTag(data, p);\n        const offset = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 4);\n        const compLength = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 8);\n        const origLength = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 12);\n        let compression;\n        if (compLength < origLength) {\n            compression = 'WOFF';\n        } else {\n            compression = false;\n        }\n\n        tableEntries.push({tag: tag, offset: offset, compression: compression,\n            compressedLength: compLength, length: origLength});\n        p += 20;\n    }\n\n    return tableEntries;\n}\n\n/**\n * @typedef TableData\n * @type Object\n * @property {DataView} data - The DataView\n * @property {number} offset - The data offset.\n */\n\n/**\n * @param  {DataView}\n * @param  {Object}\n * @return {TableData}\n */\nfunction uncompressTable(data, tableEntry) {\n    if (tableEntry.compression === 'WOFF') {\n        const inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);\n        const outBuffer = new Uint8Array(tableEntry.length);\n        tiny_inflate__WEBPACK_IMPORTED_MODULE_1___default()(inBuffer, outBuffer);\n        if (outBuffer.byteLength !== tableEntry.length) {\n            throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\\'t match recorded length');\n        }\n\n        const view = new DataView(outBuffer.buffer, 0);\n        return {data: view, offset: 0};\n    } else {\n        return {data: data, offset: tableEntry.offset};\n    }\n}\n\n// Public API ///////////////////////////////////////////////////////////\n\n/**\n * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n * Throws an error if the font could not be parsed.\n * @param  {ArrayBuffer}\n * @return {opentype.Font}\n */\nfunction parseBuffer(buffer) {\n    let indexToLocFormat;\n    let ltagTable;\n\n    // Since the constructor can also be called to create new fonts from scratch, we indicate this\n    // should be an empty font that we'll fill with our own data.\n    const font = new _font__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({empty: true});\n\n    // OpenType fonts use big endian byte ordering.\n    // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n    // Instead we use DataViews where we can specify endianness.\n    const data = new DataView(buffer, 0);\n    let numTables;\n    let tableEntries = [];\n    const signature = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getTag(data, 0);\n    if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {\n        font.outlinesFormat = 'truetype';\n        numTables = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === 'OTTO') {\n        font.outlinesFormat = 'cff';\n        numTables = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === 'wOFF') {\n        const flavor = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getTag(data, 4);\n        if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n            font.outlinesFormat = 'truetype';\n        } else if (flavor === 'OTTO') {\n            font.outlinesFormat = 'cff';\n        } else {\n            throw new Error('Unsupported OpenType flavor ' + signature);\n        }\n\n        numTables = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getUShort(data, 12);\n        tableEntries = parseWOFFTableEntries(data, numTables);\n    } else {\n        throw new Error('Unsupported OpenType signature ' + signature);\n    }\n\n    let cffTableEntry;\n    let fvarTableEntry;\n    let glyfTableEntry;\n    let gposTableEntry;\n    let gsubTableEntry;\n    let hmtxTableEntry;\n    let kernTableEntry;\n    let locaTableEntry;\n    let nameTableEntry;\n    let metaTableEntry;\n    let p;\n\n    for (let i = 0; i < numTables; i += 1) {\n        const tableEntry = tableEntries[i];\n        let table;\n        switch (tableEntry.tag) {\n            case 'cmap':\n                table = uncompressTable(data, tableEntry);\n                font.tables.cmap = _tables_cmap__WEBPACK_IMPORTED_MODULE_9__[\"default\"].parse(table.data, table.offset);\n                font.encoding = new _encoding__WEBPACK_IMPORTED_MODULE_4__[\"CmapEncoding\"](font.tables.cmap);\n                break;\n            case 'cvt ' :\n                table = uncompressTable(data, tableEntry);\n                p = new _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Parser(table.data, table.offset);\n                font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n                break;\n            case 'fvar':\n                fvarTableEntry = tableEntry;\n                break;\n            case 'fpgm' :\n                table = uncompressTable(data, tableEntry);\n                p = new _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Parser(table.data, table.offset);\n                font.tables.fpgm = p.parseByteList(tableEntry.length);\n                break;\n            case 'head':\n                table = uncompressTable(data, tableEntry);\n                font.tables.head = _tables_head__WEBPACK_IMPORTED_MODULE_15__[\"default\"].parse(table.data, table.offset);\n                font.unitsPerEm = font.tables.head.unitsPerEm;\n                indexToLocFormat = font.tables.head.indexToLocFormat;\n                break;\n            case 'hhea':\n                table = uncompressTable(data, tableEntry);\n                font.tables.hhea = _tables_hhea__WEBPACK_IMPORTED_MODULE_16__[\"default\"].parse(table.data, table.offset);\n                font.ascender = font.tables.hhea.ascender;\n                font.descender = font.tables.hhea.descender;\n                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n                break;\n            case 'hmtx':\n                hmtxTableEntry = tableEntry;\n                break;\n            case 'ltag':\n                table = uncompressTable(data, tableEntry);\n                ltagTable = _tables_ltag__WEBPACK_IMPORTED_MODULE_19__[\"default\"].parse(table.data, table.offset);\n                break;\n            case 'maxp':\n                table = uncompressTable(data, tableEntry);\n                font.tables.maxp = _tables_maxp__WEBPACK_IMPORTED_MODULE_21__[\"default\"].parse(table.data, table.offset);\n                font.numGlyphs = font.tables.maxp.numGlyphs;\n                break;\n            case 'name':\n                nameTableEntry = tableEntry;\n                break;\n            case 'OS/2':\n                table = uncompressTable(data, tableEntry);\n                font.tables.os2 = _tables_os2__WEBPACK_IMPORTED_MODULE_23__[\"default\"].parse(table.data, table.offset);\n                break;\n            case 'post':\n                table = uncompressTable(data, tableEntry);\n                font.tables.post = _tables_post__WEBPACK_IMPORTED_MODULE_24__[\"default\"].parse(table.data, table.offset);\n                font.glyphNames = new _encoding__WEBPACK_IMPORTED_MODULE_4__[\"GlyphNames\"](font.tables.post);\n                break;\n            case 'prep' :\n                table = uncompressTable(data, tableEntry);\n                p = new _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Parser(table.data, table.offset);\n                font.tables.prep = p.parseByteList(tableEntry.length);\n                break;\n            case 'glyf':\n                glyfTableEntry = tableEntry;\n                break;\n            case 'loca':\n                locaTableEntry = tableEntry;\n                break;\n            case 'CFF ':\n                cffTableEntry = tableEntry;\n                break;\n            case 'kern':\n                kernTableEntry = tableEntry;\n                break;\n            case 'GPOS':\n                gposTableEntry = tableEntry;\n                break;\n            case 'GSUB':\n                gsubTableEntry = tableEntry;\n                break;\n            case 'meta':\n                metaTableEntry = tableEntry;\n                break;\n        }\n    }\n\n    const nameTable = uncompressTable(data, nameTableEntry);\n    font.tables.name = _tables_name__WEBPACK_IMPORTED_MODULE_22__[\"default\"].parse(nameTable.data, nameTable.offset, ltagTable);\n    font.names = font.tables.name;\n\n    if (glyfTableEntry && locaTableEntry) {\n        const shortVersion = indexToLocFormat === 0;\n        const locaTable = uncompressTable(data, locaTableEntry);\n        const locaOffsets = _tables_loca__WEBPACK_IMPORTED_MODULE_20__[\"default\"].parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);\n        const glyfTable = uncompressTable(data, glyfTableEntry);\n        font.glyphs = _tables_glyf__WEBPACK_IMPORTED_MODULE_12__[\"default\"].parse(glyfTable.data, glyfTable.offset, locaOffsets, font);\n    } else if (cffTableEntry) {\n        const cffTable = uncompressTable(data, cffTableEntry);\n        _tables_cff__WEBPACK_IMPORTED_MODULE_10__[\"default\"].parse(cffTable.data, cffTable.offset, font);\n    } else {\n        throw new Error('Font doesn\\'t contain TrueType or CFF outlines.');\n    }\n\n    const hmtxTable = uncompressTable(data, hmtxTableEntry);\n    _tables_hmtx__WEBPACK_IMPORTED_MODULE_17__[\"default\"].parse(hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);\n    Object(_encoding__WEBPACK_IMPORTED_MODULE_4__[\"addGlyphNames\"])(font);\n\n    if (kernTableEntry) {\n        const kernTable = uncompressTable(data, kernTableEntry);\n        font.kerningPairs = _tables_kern__WEBPACK_IMPORTED_MODULE_18__[\"default\"].parse(kernTable.data, kernTable.offset);\n    } else {\n        font.kerningPairs = {};\n    }\n\n    if (gposTableEntry) {\n        const gposTable = uncompressTable(data, gposTableEntry);\n        font.tables.gpos = _tables_gpos__WEBPACK_IMPORTED_MODULE_13__[\"default\"].parse(gposTable.data, gposTable.offset);\n        font.position.init();\n    }\n\n    if (gsubTableEntry) {\n        const gsubTable = uncompressTable(data, gsubTableEntry);\n        font.tables.gsub = _tables_gsub__WEBPACK_IMPORTED_MODULE_14__[\"default\"].parse(gsubTable.data, gsubTable.offset);\n    }\n\n    if (fvarTableEntry) {\n        const fvarTable = uncompressTable(data, fvarTableEntry);\n        font.tables.fvar = _tables_fvar__WEBPACK_IMPORTED_MODULE_11__[\"default\"].parse(fvarTable.data, fvarTable.offset, font.names);\n    }\n\n    if (metaTableEntry) {\n        const metaTable = uncompressTable(data, metaTableEntry);\n        font.tables.meta = _tables_meta__WEBPACK_IMPORTED_MODULE_25__[\"default\"].parse(metaTable.data, metaTable.offset);\n        font.metas = font.tables.meta;\n    }\n\n    return font;\n}\n\n/**\n * Asynchronously load the font from a URL or a filesystem. When done, call the callback\n * with two arguments `(err, font)`. The `err` will be null on success,\n * the `font` is a Font object.\n * We use the node.js callback convention so that\n * opentype.js can integrate with frameworks like async.js.\n * @alias opentype.load\n * @param  {string} url - The URL of the font to load.\n * @param  {Function} callback - The callback.\n */\nfunction load(url, callback) {\n    const isNode = typeof window === 'undefined';\n    const loadFn = isNode ? loadFromFile : loadFromUrl;\n    loadFn(url, function(err, arrayBuffer) {\n        if (err) {\n            return callback(err);\n        }\n        let font;\n        try {\n            font = parseBuffer(arrayBuffer);\n        } catch (e) {\n            return callback(e, null);\n        }\n        return callback(null, font);\n    });\n}\n\n/**\n * Synchronously load the font from a URL or file.\n * When done, returns the font object or throws an error.\n * @alias opentype.loadSync\n * @param  {string} url - The URL of the font to load.\n * @return {opentype.Font}\n */\nfunction loadSync(url) {\n    const fs = __webpack_require__(/*! fs */ 0);\n    const buffer = fs.readFileSync(url);\n    return parseBuffer(Object(_util__WEBPACK_IMPORTED_MODULE_8__[\"nodeBufferToArrayBuffer\"])(buffer));\n}\n\n\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/opentype.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/parse.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/parse.js ***!
  \**********************************************************************************/
/*! exports provided: default, Parser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return Parser; });\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n// Parsing utility functions\n\n\n\n// Retrieve an unsigned byte from the DataView.\nfunction getByte(dataView, offset) {\n    return dataView.getUint8(offset);\n}\n\n// Retrieve an unsigned 16-bit short from the DataView.\n// The value is stored in big endian.\nfunction getUShort(dataView, offset) {\n    return dataView.getUint16(offset, false);\n}\n\n// Retrieve a signed 16-bit short from the DataView.\n// The value is stored in big endian.\nfunction getShort(dataView, offset) {\n    return dataView.getInt16(offset, false);\n}\n\n// Retrieve an unsigned 32-bit long from the DataView.\n// The value is stored in big endian.\nfunction getULong(dataView, offset) {\n    return dataView.getUint32(offset, false);\n}\n\n// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n// The value is stored in big endian.\nfunction getFixed(dataView, offset) {\n    const decimal = dataView.getInt16(offset, false);\n    const fraction = dataView.getUint16(offset + 2, false);\n    return decimal + fraction / 65535;\n}\n\n// Retrieve a 4-character tag from the DataView.\n// Tags are used to identify tables.\nfunction getTag(dataView, offset) {\n    let tag = '';\n    for (let i = offset; i < offset + 4; i += 1) {\n        tag += String.fromCharCode(dataView.getInt8(i));\n    }\n\n    return tag;\n}\n\n// Retrieve an offset from the DataView.\n// Offsets are 1 to 4 bytes in length, depending on the offSize argument.\nfunction getOffset(dataView, offset, offSize) {\n    let v = 0;\n    for (let i = 0; i < offSize; i += 1) {\n        v <<= 8;\n        v += dataView.getUint8(offset + i);\n    }\n\n    return v;\n}\n\n// Retrieve a number of bytes from start offset to the end offset from the DataView.\nfunction getBytes(dataView, startOffset, endOffset) {\n    const bytes = [];\n    for (let i = startOffset; i < endOffset; i += 1) {\n        bytes.push(dataView.getUint8(i));\n    }\n\n    return bytes;\n}\n\n// Convert the list of bytes to a string.\nfunction bytesToString(bytes) {\n    let s = '';\n    for (let i = 0; i < bytes.length; i += 1) {\n        s += String.fromCharCode(bytes[i]);\n    }\n\n    return s;\n}\n\nconst typeOffsets = {\n    byte: 1,\n    uShort: 2,\n    short: 2,\n    uLong: 4,\n    fixed: 4,\n    longDateTime: 8,\n    tag: 4\n};\n\n// A stateful parser that changes the offset whenever a value is retrieved.\n// The data is a DataView.\nfunction Parser(data, offset) {\n    this.data = data;\n    this.offset = offset;\n    this.relativeOffset = 0;\n}\n\nParser.prototype.parseByte = function() {\n    const v = this.data.getUint8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\n\nParser.prototype.parseChar = function() {\n    const v = this.data.getInt8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\n\nParser.prototype.parseCard8 = Parser.prototype.parseByte;\n\nParser.prototype.parseUShort = function() {\n    const v = this.data.getUint16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseCard16 = Parser.prototype.parseUShort;\nParser.prototype.parseSID = Parser.prototype.parseUShort;\nParser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\nParser.prototype.parseShort = function() {\n    const v = this.data.getInt16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseF2Dot14 = function() {\n    const v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseULong = function() {\n    const v = getULong(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\n\nParser.prototype.parseOffset32 = Parser.prototype.parseULong;\n\nParser.prototype.parseFixed = function() {\n    const v = getFixed(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\n\nParser.prototype.parseString = function(length) {\n    const dataView = this.data;\n    const offset = this.offset + this.relativeOffset;\n    let string = '';\n    this.relativeOffset += length;\n    for (let i = 0; i < length; i++) {\n        string += String.fromCharCode(dataView.getUint8(offset + i));\n    }\n\n    return string;\n};\n\nParser.prototype.parseTag = function() {\n    return this.parseString(4);\n};\n\n// LONGDATETIME is a 64-bit integer.\n// JavaScript and unix timestamps traditionally use 32 bits, so we\n// only take the last 32 bits.\n// + Since until 2038 those bits will be filled by zeros we can ignore them.\nParser.prototype.parseLongDateTime = function() {\n    let v = getULong(this.data, this.offset + this.relativeOffset + 4);\n    // Subtract seconds between 01/01/1904 and 01/01/1970\n    // to convert Apple Mac timestamp to Standard Unix timestamp\n    v -= 2082844800;\n    this.relativeOffset += 8;\n    return v;\n};\n\nParser.prototype.parseVersion = function(minorBase) {\n    const major = getUShort(this.data, this.offset + this.relativeOffset);\n\n    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n    // Default returns the correct number if minor = 0xN000 where N is 0-9\n    // Set minorBase to 1 for tables that use minor = N where N is 0-9\n    const minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n    this.relativeOffset += 4;\n    if (minorBase === undefined) minorBase = 0x1000;\n    return major + minor / minorBase / 10;\n};\n\nParser.prototype.skip = function(type, amount) {\n    if (amount === undefined) {\n        amount = 1;\n    }\n\n    this.relativeOffset += typeOffsets[type] * amount;\n};\n\n///// Parsing lists and records ///////////////////////////////\n\n// Parse a list of 32 bit unsigned integers.\nParser.prototype.parseULongList = function(count) {\n    if (count === undefined) { count = this.parseULong(); }\n    const offsets = new Array(count);\n    const dataView = this.data;\n    let offset = this.offset + this.relativeOffset;\n    for (let i = 0; i < count; i++) {\n        offsets[i] = dataView.getUint32(offset);\n        offset += 4;\n    }\n\n    this.relativeOffset += count * 4;\n    return offsets;\n};\n\n// Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream\n// or provided as an argument.\nParser.prototype.parseOffset16List =\nParser.prototype.parseUShortList = function(count) {\n    if (count === undefined) { count = this.parseUShort(); }\n    const offsets = new Array(count);\n    const dataView = this.data;\n    let offset = this.offset + this.relativeOffset;\n    for (let i = 0; i < count; i++) {\n        offsets[i] = dataView.getUint16(offset);\n        offset += 2;\n    }\n\n    this.relativeOffset += count * 2;\n    return offsets;\n};\n\n// Parses a list of 16 bit signed integers.\nParser.prototype.parseShortList = function(count) {\n    const list = new Array(count);\n    const dataView = this.data;\n    let offset = this.offset + this.relativeOffset;\n    for (let i = 0; i < count; i++) {\n        list[i] = dataView.getInt16(offset);\n        offset += 2;\n    }\n\n    this.relativeOffset += count * 2;\n    return list;\n};\n\n// Parses a list of bytes.\nParser.prototype.parseByteList = function(count) {\n    const list = new Array(count);\n    const dataView = this.data;\n    let offset = this.offset + this.relativeOffset;\n    for (let i = 0; i < count; i++) {\n        list[i] = dataView.getUint8(offset++);\n    }\n\n    this.relativeOffset += count;\n    return list;\n};\n\n/**\n * Parse a list of items.\n * Record count is optional, if omitted it is read from the stream.\n * itemCallback is one of the Parser methods.\n */\nParser.prototype.parseList = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseUShort();\n    }\n    const list = new Array(count);\n    for (let i = 0; i < count; i++) {\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\n\nParser.prototype.parseList32 = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseULong();\n    }\n    const list = new Array(count);\n    for (let i = 0; i < count; i++) {\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\n\n/**\n * Parse a list of records.\n * Record count is optional, if omitted it is read from the stream.\n * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n */\nParser.prototype.parseRecordList = function(count, recordDescription) {\n    // If the count argument is absent, read it in the stream.\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseUShort();\n    }\n    const records = new Array(count);\n    const fields = Object.keys(recordDescription);\n    for (let i = 0; i < count; i++) {\n        const rec = {};\n        for (let j = 0; j < fields.length; j++) {\n            const fieldName = fields[j];\n            const fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\n\nParser.prototype.parseRecordList32 = function(count, recordDescription) {\n    // If the count argument is absent, read it in the stream.\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseULong();\n    }\n    const records = new Array(count);\n    const fields = Object.keys(recordDescription);\n    for (let i = 0; i < count; i++) {\n        const rec = {};\n        for (let j = 0; j < fields.length; j++) {\n            const fieldName = fields[j];\n            const fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\n\n// Parse a data structure into an object\n// Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\nParser.prototype.parseStruct = function(description) {\n    if (typeof description === 'function') {\n        return description.call(this);\n    } else {\n        const fields = Object.keys(description);\n        const struct = {};\n        for (let j = 0; j < fields.length; j++) {\n            const fieldName = fields[j];\n            const fieldType = description[fieldName];\n            struct[fieldName] = fieldType.call(this);\n        }\n        return struct;\n    }\n};\n\n/**\n * Parse a GPOS valueRecord\n * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n * valueFormat is optional, if omitted it is read from the stream.\n */\nParser.prototype.parseValueRecord = function(valueFormat) {\n    if (valueFormat === undefined) {\n        valueFormat = this.parseUShort();\n    }\n    if (valueFormat === 0) {\n        // valueFormat2 in kerning pairs is most often 0\n        // in this case return undefined instead of an empty object, to save space\n        return;\n    }\n    const valueRecord = {};\n\n    if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }\n    if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }\n    if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }\n    if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }\n\n    // Device table (non-variable font) / VariationIndex table (variable font) not supported\n    // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls\n    if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }\n\n    return valueRecord;\n};\n\n/**\n * Parse a list of GPOS valueRecords\n * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n * valueFormat and valueCount are read from the stream.\n */\nParser.prototype.parseValueRecordList = function() {\n    const valueFormat = this.parseUShort();\n    const valueCount = this.parseUShort();\n    const values = new Array(valueCount);\n    for (let i = 0; i < valueCount; i++) {\n        values[i] = this.parseValueRecord(valueFormat);\n    }\n    return values;\n};\n\nParser.prototype.parsePointer = function(description) {\n    const structOffset = this.parseOffset16();\n    if (structOffset > 0) {\n        // NULL offset => return undefined\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return undefined;\n};\n\nParser.prototype.parsePointer32 = function(description) {\n    const structOffset = this.parseOffset32();\n    if (structOffset > 0) {\n        // NULL offset => return undefined\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return undefined;\n};\n\n/**\n * Parse a list of offsets to lists of 16-bit integers,\n * or a list of offsets to lists of offsets to any kind of items.\n * If itemCallback is not provided, a list of list of UShort is assumed.\n * If provided, itemCallback is called on each item and must parse the item.\n * See examples in tables/gsub.js\n */\nParser.prototype.parseListOfLists = function(itemCallback) {\n    const offsets = this.parseOffset16List();\n    const count = offsets.length;\n    const relativeOffset = this.relativeOffset;\n    const list = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const start = offsets[i];\n        if (start === 0) {\n            // NULL offset\n            // Add i as owned property to list. Convenient with assert.\n            list[i] = undefined;\n            continue;\n        }\n        this.relativeOffset = start;\n        if (itemCallback) {\n            const subOffsets = this.parseOffset16List();\n            const subList = new Array(subOffsets.length);\n            for (let j = 0; j < subOffsets.length; j++) {\n                this.relativeOffset = start + subOffsets[j];\n                subList[j] = itemCallback.call(this);\n            }\n            list[i] = subList;\n        } else {\n            list[i] = this.parseUShortList();\n        }\n    }\n    this.relativeOffset = relativeOffset;\n    return list;\n};\n\n///// Complex tables parsing //////////////////////////////////\n\n// Parse a coverage table in a GSUB, GPOS or GDEF table.\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n// parser.offset must point to the start of the table containing the coverage.\nParser.prototype.parseCoverage = function() {\n    const startOffset = this.offset + this.relativeOffset;\n    const format = this.parseUShort();\n    const count = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            glyphs: this.parseUShortList(count)\n        };\n    } else if (format === 2) {\n        const ranges = new Array(count);\n        for (let i = 0; i < count; i++) {\n            ranges[i] = {\n                start: this.parseUShort(),\n                end: this.parseUShort(),\n                index: this.parseUShort()\n            };\n        }\n        return {\n            format: 2,\n            ranges: ranges\n        };\n    }\n    throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');\n};\n\n// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\nParser.prototype.parseClassDef = function() {\n    const startOffset = this.offset + this.relativeOffset;\n    const format = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            startGlyph: this.parseUShort(),\n            classes: this.parseUShortList()\n        };\n    } else if (format === 2) {\n        return {\n            format: 2,\n            ranges: this.parseRecordList({\n                start: Parser.uShort,\n                end: Parser.uShort,\n                classId: Parser.uShort\n            })\n        };\n    }\n    throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');\n};\n\n///// Static methods ///////////////////////////////////\n// These convenience methods can be used as callbacks and should be called with \"this\" context set to a Parser instance.\n\nParser.list = function(count, itemCallback) {\n    return function() {\n        return this.parseList(count, itemCallback);\n    };\n};\n\nParser.list32 = function(count, itemCallback) {\n    return function() {\n        return this.parseList32(count, itemCallback);\n    };\n};\n\nParser.recordList = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList(count, recordDescription);\n    };\n};\n\nParser.recordList32 = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList32(count, recordDescription);\n    };\n};\n\nParser.pointer = function(description) {\n    return function() {\n        return this.parsePointer(description);\n    };\n};\n\nParser.pointer32 = function(description) {\n    return function() {\n        return this.parsePointer32(description);\n    };\n};\n\nParser.tag = Parser.prototype.parseTag;\nParser.byte = Parser.prototype.parseByte;\nParser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\nParser.uShortList = Parser.prototype.parseUShortList;\nParser.uLong = Parser.offset32 = Parser.prototype.parseULong;\nParser.uLongList = Parser.prototype.parseULongList;\nParser.struct = Parser.prototype.parseStruct;\nParser.coverage = Parser.prototype.parseCoverage;\nParser.classDef = Parser.prototype.parseClassDef;\n\n///// Script, Feature, Lookup lists ///////////////////////////////////////////////\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\nconst langSysTable = {\n    reserved: Parser.uShort,\n    reqFeatureIndex: Parser.uShort,\n    featureIndexes: Parser.uShortList\n};\n\nParser.prototype.parseScriptList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        script: Parser.pointer({\n            defaultLangSys: Parser.pointer(langSysTable),\n            langSysRecords: Parser.recordList({\n                tag: Parser.tag,\n                langSys: Parser.pointer(langSysTable)\n            })\n        })\n    })) || [];\n};\n\nParser.prototype.parseFeatureList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        feature: Parser.pointer({\n            featureParams: Parser.offset16,\n            lookupListIndexes: Parser.uShortList\n        })\n    })) || [];\n};\n\nParser.prototype.parseLookupList = function(lookupTableParsers) {\n    return this.parsePointer(Parser.list(Parser.pointer(function() {\n        const lookupType = this.parseUShort();\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');\n        const lookupFlag = this.parseUShort();\n        const useMarkFilteringSet = lookupFlag & 0x10;\n        return {\n            lookupType: lookupType,\n            lookupFlag: lookupFlag,\n            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined\n        };\n    }))) || [];\n};\n\nParser.prototype.parseFeatureVariationsList = function() {\n    return this.parsePointer32(function() {\n        const majorVersion = this.parseUShort();\n        const minorVersion = this.parseUShort();\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');\n        const featureVariations = this.parseRecordList32({\n            conditionSetOffset: Parser.offset32,\n            featureTableSubstitutionOffset: Parser.offset32\n        });\n        return featureVariations;\n    }) || [];\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    getByte,\n    getCard8: getByte,\n    getUShort,\n    getCard16: getUShort,\n    getShort,\n    getULong,\n    getFixed,\n    getTag,\n    getOffset,\n    getBytes,\n    bytesToString,\n    Parser,\n});\n\n\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/parse.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/path.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/path.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bbox */ \"../../node_modules/opentype.js/src/bbox.js\");\n// Geometric objects\n\n\n\n/**\n * A bézier path containing a set of path commands similar to a SVG path.\n * Paths can be drawn on a context using `draw`.\n * @exports opentype.Path\n * @class\n * @constructor\n */\nfunction Path() {\n    this.commands = [];\n    this.fill = 'black';\n    this.stroke = null;\n    this.strokeWidth = 1;\n}\n\n/**\n * @param  {number} x\n * @param  {number} y\n */\nPath.prototype.moveTo = function(x, y) {\n    this.commands.push({\n        type: 'M',\n        x: x,\n        y: y\n    });\n};\n\n/**\n * @param  {number} x\n * @param  {number} y\n */\nPath.prototype.lineTo = function(x, y) {\n    this.commands.push({\n        type: 'L',\n        x: x,\n        y: y\n    });\n};\n\n/**\n * Draws cubic curve\n * @function\n * curveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control 1\n * @param  {number} y1 - y of control 1\n * @param  {number} x2 - x of control 2\n * @param  {number} y2 - y of control 2\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\n\n/**\n * Draws cubic curve\n * @function\n * bezierCurveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control 1\n * @param  {number} y1 - y of control 1\n * @param  {number} x2 - x of control 2\n * @param  {number} y2 - y of control 2\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n * @see curveTo\n */\nPath.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {\n    this.commands.push({\n        type: 'C',\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        x: x,\n        y: y\n    });\n};\n\n/**\n * Draws quadratic curve\n * @function\n * quadraticCurveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control\n * @param  {number} y1 - y of control\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\n\n/**\n * Draws quadratic curve\n * @function\n * quadTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control\n * @param  {number} y1 - y of control\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\nPath.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {\n    this.commands.push({\n        type: 'Q',\n        x1: x1,\n        y1: y1,\n        x: x,\n        y: y\n    });\n};\n\n/**\n * Closes the path\n * @function closePath\n * @memberof opentype.Path.prototype\n */\n\n/**\n * Close the path\n * @function close\n * @memberof opentype.Path.prototype\n */\nPath.prototype.close = Path.prototype.closePath = function() {\n    this.commands.push({\n        type: 'Z'\n    });\n};\n\n/**\n * Add the given path or list of commands to the commands of this path.\n * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.\n */\nPath.prototype.extend = function(pathOrCommands) {\n    if (pathOrCommands.commands) {\n        pathOrCommands = pathOrCommands.commands;\n    } else if (pathOrCommands instanceof _bbox__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n        const box = pathOrCommands;\n        this.moveTo(box.x1, box.y1);\n        this.lineTo(box.x2, box.y1);\n        this.lineTo(box.x2, box.y2);\n        this.lineTo(box.x1, box.y2);\n        this.close();\n        return;\n    }\n\n    Array.prototype.push.apply(this.commands, pathOrCommands);\n};\n\n/**\n * Calculate the bounding box of the path.\n * @returns {opentype.BoundingBox}\n */\nPath.prototype.getBoundingBox = function() {\n    const box = new _bbox__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n    let startX = 0;\n    let startY = 0;\n    let prevX = 0;\n    let prevY = 0;\n    for (let i = 0; i < this.commands.length; i++) {\n        const cmd = this.commands[i];\n        switch (cmd.type) {\n            case 'M':\n                box.addPoint(cmd.x, cmd.y);\n                startX = prevX = cmd.x;\n                startY = prevY = cmd.y;\n                break;\n            case 'L':\n                box.addPoint(cmd.x, cmd.y);\n                prevX = cmd.x;\n                prevY = cmd.y;\n                break;\n            case 'Q':\n                box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);\n                prevX = cmd.x;\n                prevY = cmd.y;\n                break;\n            case 'C':\n                box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n                prevX = cmd.x;\n                prevY = cmd.y;\n                break;\n            case 'Z':\n                prevX = startX;\n                prevY = startY;\n                break;\n            default:\n                throw new Error('Unexpected path command ' + cmd.type);\n        }\n    }\n    if (box.isEmpty()) {\n        box.addPoint(0, 0);\n    }\n    return box;\n};\n\n/**\n * Draw the path to a 2D context.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.\n */\nPath.prototype.draw = function(ctx) {\n    ctx.beginPath();\n    for (let i = 0; i < this.commands.length; i += 1) {\n        const cmd = this.commands[i];\n        if (cmd.type === 'M') {\n            ctx.moveTo(cmd.x, cmd.y);\n        } else if (cmd.type === 'L') {\n            ctx.lineTo(cmd.x, cmd.y);\n        } else if (cmd.type === 'C') {\n            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === 'Q') {\n            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === 'Z') {\n            ctx.closePath();\n        }\n    }\n\n    if (this.fill) {\n        ctx.fillStyle = this.fill;\n        ctx.fill();\n    }\n\n    if (this.stroke) {\n        ctx.strokeStyle = this.stroke;\n        ctx.lineWidth = this.strokeWidth;\n        ctx.stroke();\n    }\n};\n\n/**\n * Convert the Path to a string of path data instructions\n * See http://www.w3.org/TR/SVG/paths.html#PathData\n * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n * @return {string}\n */\nPath.prototype.toPathData = function(decimalPlaces) {\n    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\n    function floatToString(v) {\n        if (Math.round(v) === v) {\n            return '' + Math.round(v);\n        } else {\n            return v.toFixed(decimalPlaces);\n        }\n    }\n\n    function packValues() {\n        let s = '';\n        for (let i = 0; i < arguments.length; i += 1) {\n            const v = arguments[i];\n            if (v >= 0 && i > 0) {\n                s += ' ';\n            }\n\n            s += floatToString(v);\n        }\n\n        return s;\n    }\n\n    let d = '';\n    for (let i = 0; i < this.commands.length; i += 1) {\n        const cmd = this.commands[i];\n        if (cmd.type === 'M') {\n            d += 'M' + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === 'L') {\n            d += 'L' + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === 'C') {\n            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === 'Q') {\n            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === 'Z') {\n            d += 'Z';\n        }\n    }\n\n    return d;\n};\n\n/**\n * Convert the path to an SVG <path> element, as a string.\n * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n * @return {string}\n */\nPath.prototype.toSVG = function(decimalPlaces) {\n    let svg = '<path d=\"';\n    svg += this.toPathData(decimalPlaces);\n    svg += '\"';\n    if (this.fill && this.fill !== 'black') {\n        if (this.fill === null) {\n            svg += ' fill=\"none\"';\n        } else {\n            svg += ' fill=\"' + this.fill + '\"';\n        }\n    }\n\n    if (this.stroke) {\n        svg += ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"';\n    }\n\n    svg += '/>';\n    return svg;\n};\n\n/**\n * Convert the path to a DOM element.\n * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n * @return {SVGPathElement}\n */\nPath.prototype.toDOMElement = function(decimalPlaces) {\n    const temporaryPath = this.toPathData(decimalPlaces);\n    const newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n    newPath.setAttribute('d', temporaryPath);\n\n    return newPath;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Path);\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/path.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/position.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/position.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layout */ \"../../node_modules/opentype.js/src/layout.js\");\n// The Position object provides utility methods to manipulate\n// the GPOS position table.\n\n\n\n/**\n * @exports opentype.Position\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nfunction Position(font) {\n    _layout__WEBPACK_IMPORTED_MODULE_0__[\"default\"].call(this, font, 'gpos');\n}\n\nPosition.prototype = _layout__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype;\n\n/**\n * Init some data for faster and easier access later.\n */\nPosition.prototype.init = function() {\n    const script = this.getDefaultScriptName();\n    this.defaultKerningTables = this.getKerningTables(script);\n};\n\n/**\n * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.\n *\n * @param {integer} leftIndex - left glyph index\n * @param {integer} rightIndex - right glyph index\n * @returns {integer}\n */\nPosition.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {\n    for (let i = 0; i < kerningLookups.length; i++) {\n        const subtables = kerningLookups[i].subtables;\n        for (let j = 0; j < subtables.length; j++) {\n            const subtable = subtables[j];\n            const covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);\n            if (covIndex < 0) continue;\n            switch (subtable.posFormat) {\n                case 1:\n                    // Search Pair Adjustment Positioning Format 1\n                    let pairSet = subtable.pairSets[covIndex];\n                    for (let k = 0; k < pairSet.length; k++) {\n                        let pair = pairSet[k];\n                        if (pair.secondGlyph === rightIndex) {\n                            return pair.value1 && pair.value1.xAdvance || 0;\n                        }\n                    }\n                    break;      // left glyph found, not right glyph - try next subtable\n                case 2:\n                    // Search Pair Adjustment Positioning Format 2\n                    const class1 = this.getGlyphClass(subtable.classDef1, leftIndex);\n                    const class2 = this.getGlyphClass(subtable.classDef2, rightIndex);\n                    const pair = subtable.classRecords[class1][class2];\n                    return pair.value1 && pair.value1.xAdvance || 0;\n            }\n        }\n    }\n    return 0;\n};\n\n/**\n * List all kerning lookup tables.\n *\n * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value\n * @param {string} [language='dflt']\n * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)\n */\nPosition.prototype.getKerningTables = function(script, language) {\n    if (this.font.tables.gpos) {\n        return this.getLookupTables(script, language, 'kern', 2);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Position);\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/position.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/substitution.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/substitution.js ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./layout */ \"../../node_modules/opentype.js/src/layout.js\");\n// The Substitution object provides utility methods to manipulate\n// the GSUB substitution table.\n\n\n\n\n/**\n * @exports opentype.Substitution\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nfunction Substitution(font) {\n    _layout__WEBPACK_IMPORTED_MODULE_1__[\"default\"].call(this, font, 'gsub');\n}\n\n// Check if 2 arrays of primitives are equal.\nfunction arraysEqual(ar1, ar2) {\n    const n = ar1.length;\n    if (n !== ar2.length) { return false; }\n    for (let i = 0; i < n; i++) {\n        if (ar1[i] !== ar2[i]) { return false; }\n    }\n    return true;\n}\n\n// Find the first subtable of a lookup table in a particular format.\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n    const subtables = lookupTable.subtables;\n    for (let i = 0; i < subtables.length; i++) {\n        const subtable = subtables[i];\n        if (subtable.substFormat === format) {\n            return subtable;\n        }\n    }\n    if (defaultSubtable) {\n        subtables.push(defaultSubtable);\n        return defaultSubtable;\n    }\n    return undefined;\n}\n\nSubstitution.prototype = _layout__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype;\n\n/**\n * Create a default GSUB table.\n * @return {Object} gsub - The GSUB table.\n */\nSubstitution.prototype.createDefaultTable = function() {\n    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n    return {\n        version: 1,\n        scripts: [{\n            tag: 'DFLT',\n            script: {\n                defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n                langSysRecords: []\n            }\n        }],\n        features: [],\n        lookups: []\n    };\n};\n\n/**\n * List all single substitutions (lookup type 1) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getSingle = function(feature, script, language) {\n    const substitutions = [];\n    const lookupTables = this.getLookupTables(script, language, feature, 1);\n    for (let idx = 0; idx < lookupTables.length; idx++) {\n        const subtables = lookupTables[idx].subtables;\n        for (let i = 0; i < subtables.length; i++) {\n            const subtable = subtables[i];\n            const glyphs = this.expandCoverage(subtable.coverage);\n            let j;\n            if (subtable.substFormat === 1) {\n                const delta = subtable.deltaGlyphId;\n                for (j = 0; j < glyphs.length; j++) {\n                    const glyph = glyphs[j];\n                    substitutions.push({ sub: glyph, by: glyph + delta });\n                }\n            } else {\n                const substitute = subtable.substitute;\n                for (j = 0; j < glyphs.length; j++) {\n                    substitutions.push({ sub: glyphs[j], by: substitute[j] });\n                }\n            }\n        }\n    }\n    return substitutions;\n};\n\n/**\n * List all alternates (lookup type 3) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n * @return {Array} alternates - The list of alternates\n */\nSubstitution.prototype.getAlternates = function(feature, script, language) {\n    const alternates = [];\n    const lookupTables = this.getLookupTables(script, language, feature, 3);\n    for (let idx = 0; idx < lookupTables.length; idx++) {\n        const subtables = lookupTables[idx].subtables;\n        for (let i = 0; i < subtables.length; i++) {\n            const subtable = subtables[i];\n            const glyphs = this.expandCoverage(subtable.coverage);\n            const alternateSets = subtable.alternateSets;\n            for (let j = 0; j < glyphs.length; j++) {\n                alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n            }\n        }\n    }\n    return alternates;\n};\n\n/**\n * List all ligatures (lookup type 4) for a given script, language, and feature.\n * The result is an array of ligature objects like { sub: [ids], by: id }\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} ligatures - The list of ligatures.\n */\nSubstitution.prototype.getLigatures = function(feature, script, language) {\n    const ligatures = [];\n    const lookupTables = this.getLookupTables(script, language, feature, 4);\n    for (let idx = 0; idx < lookupTables.length; idx++) {\n        const subtables = lookupTables[idx].subtables;\n        for (let i = 0; i < subtables.length; i++) {\n            const subtable = subtables[i];\n            const glyphs = this.expandCoverage(subtable.coverage);\n            const ligatureSets = subtable.ligatureSets;\n            for (let j = 0; j < glyphs.length; j++) {\n                const startGlyph = glyphs[j];\n                const ligSet = ligatureSets[j];\n                for (let k = 0; k < ligSet.length; k++) {\n                    const lig = ligSet[k];\n                    ligatures.push({\n                        sub: [startGlyph].concat(lig.components),\n                        by: lig.ligGlyph\n                    });\n                }\n            }\n        }\n    }\n    return ligatures;\n};\n\n/**\n * Add or modify a single substitution (lookup type 1)\n * Format 2, more flexible, is always used.\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n    const lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n    const subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1\n        substFormat: 2,\n        coverage: {format: 1, glyphs: []},\n        substitute: []\n    });\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    const coverageGlyph = substitution.sub;\n    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.substitute.splice(pos, 0, 0);\n    }\n    subtable.substitute[pos] = substitution.by;\n};\n\n/**\n * Add or modify an alternate substitution (lookup type 1)\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, by: [ids] }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n    const lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n    const subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1\n        substFormat: 1,\n        coverage: {format: 1, glyphs: []},\n        alternateSets: []\n    });\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    const coverageGlyph = substitution.sub;\n    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.alternateSets.splice(pos, 0, 0);\n    }\n    subtable.alternateSets[pos] = substitution.by;\n};\n\n/**\n * Add a ligature (lookup type 4)\n * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} ligature - { sub: [ids], by: id }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n    const lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n    let subtable = lookupTable.subtables[0];\n    if (!subtable) {\n        subtable = {                // lookup type 4 subtable, format 1, coverage format 1\n            substFormat: 1,\n            coverage: { format: 1, glyphs: [] },\n            ligatureSets: []\n        };\n        lookupTable.subtables[0] = subtable;\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    const coverageGlyph = ligature.sub[0];\n    const ligComponents = ligature.sub.slice(1);\n    const ligatureTable = {\n        ligGlyph: ligature.by,\n        components: ligComponents\n    };\n    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos >= 0) {\n        // ligatureSet already exists\n        const ligatureSet = subtable.ligatureSets[pos];\n        for (let i = 0; i < ligatureSet.length; i++) {\n            // If ligature already exists, return.\n            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                return;\n            }\n        }\n        // ligature does not exist: add it.\n        ligatureSet.push(ligatureTable);\n    } else {\n        // Create a new ligatureSet and add coverage for the first glyph.\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n    }\n};\n\n/**\n * List all feature data for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getFeature = function(feature, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        // ss01 - ss20\n        return this.getSingle(feature, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            return this.getSingle(feature, script, language)\n                    .concat(this.getAlternates(feature, script, language));\n        case 'dlig':\n        case 'liga':\n        case 'rlig': return this.getLigatures(feature, script, language);\n    }\n    return undefined;\n};\n\n/**\n * Add a substitution to a feature for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.add = function(feature, sub, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        // ss01 - ss20\n        return this.addSingle(feature, sub, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            if (typeof sub.by === 'number') {\n                return this.addSingle(feature, sub, script, language);\n            }\n            return this.addAlternate(feature, sub, script, language);\n        case 'dlig':\n        case 'liga':\n        case 'rlig':\n            return this.addLigature(feature, sub, script, language);\n    }\n    return undefined;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Substitution);\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/substitution.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/table.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/table.js ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"../../node_modules/opentype.js/src/types.js\");\n// Table metadata\n\n\n\n\n/**\n * @exports opentype.Table\n * @class\n * @param {string} tableName\n * @param {Array} fields\n * @param {Object} options\n * @constructor\n */\nfunction Table(tableName, fields, options) {\n    for (let i = 0; i < fields.length; i += 1) {\n        const field = fields[i];\n        this[field.name] = field.value;\n    }\n\n    this.tableName = tableName;\n    this.fields = fields;\n    if (options) {\n        const optionKeys = Object.keys(options);\n        for (let i = 0; i < optionKeys.length; i += 1) {\n            const k = optionKeys[i];\n            const v = options[k];\n            if (this[k] !== undefined) {\n                this[k] = v;\n            }\n        }\n    }\n}\n\n/**\n * Encodes the table and returns an array of bytes\n * @return {Array}\n */\nTable.prototype.encode = function() {\n    return _types__WEBPACK_IMPORTED_MODULE_1__[\"encode\"].TABLE(this);\n};\n\n/**\n * Get the size of the table.\n * @return {number}\n */\nTable.prototype.sizeOf = function() {\n    return _types__WEBPACK_IMPORTED_MODULE_1__[\"sizeOf\"].TABLE(this);\n};\n\n/**\n * @private\n */\nfunction ushortList(itemName, list, count) {\n    if (count === undefined) {\n        count = list.length;\n    }\n    const fields = new Array(list.length + 1);\n    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n    for (let i = 0; i < list.length; i++) {\n        fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};\n    }\n    return fields;\n}\n\n/**\n * @private\n */\nfunction tableList(itemName, records, itemCallback) {\n    const count = records.length;\n    const fields = new Array(count + 1);\n    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n    for (let i = 0; i < count; i++) {\n        fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};\n    }\n    return fields;\n}\n\n/**\n * @private\n */\nfunction recordList(itemName, records, itemCallback) {\n    const count = records.length;\n    let fields = [];\n    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n    for (let i = 0; i < count; i++) {\n        fields = fields.concat(itemCallback(records[i], i));\n    }\n    return fields;\n}\n\n// Common Layout Tables\n\n/**\n * @exports opentype.Coverage\n * @class\n * @param {opentype.Table}\n * @constructor\n * @extends opentype.Table\n */\nfunction Coverage(coverageTable) {\n    if (coverageTable.format === 1) {\n        Table.call(this, 'coverageTable',\n            [{name: 'coverageFormat', type: 'USHORT', value: 1}]\n            .concat(ushortList('glyph', coverageTable.glyphs))\n        );\n    } else {\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(false, 'Can\\'t create coverage table format 2 yet.');\n    }\n}\nCoverage.prototype = Object.create(Table.prototype);\nCoverage.prototype.constructor = Coverage;\n\nfunction ScriptList(scriptListTable) {\n    Table.call(this, 'scriptListTable',\n        recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {\n            const script = scriptRecord.script;\n            let defaultLangSys = script.defaultLangSys;\n            _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');\n            return [\n                {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},\n                {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [\n                    {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [\n                        {name: 'lookupOrder', type: 'USHORT', value: 0},\n                        {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]\n                        .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}\n                    ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {\n                        const langSys = langSysRecord.langSys;\n                        return [\n                            {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},\n                            {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [\n                                {name: 'lookupOrder', type: 'USHORT', value: 0},\n                                {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}\n                                ].concat(ushortList('featureIndex', langSys.featureIndexes)))}\n                        ];\n                    })))}\n            ];\n        })\n    );\n}\nScriptList.prototype = Object.create(Table.prototype);\nScriptList.prototype.constructor = ScriptList;\n\n/**\n * @exports opentype.FeatureList\n * @class\n * @param {opentype.Table}\n * @constructor\n * @extends opentype.Table\n */\nfunction FeatureList(featureListTable) {\n    Table.call(this, 'featureListTable',\n        recordList('featureRecord', featureListTable, function(featureRecord, i) {\n            const feature = featureRecord.feature;\n            return [\n                {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},\n                {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [\n                    {name: 'featureParams', type: 'USHORT', value: feature.featureParams},\n                    ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}\n            ];\n        })\n    );\n}\nFeatureList.prototype = Object.create(Table.prototype);\nFeatureList.prototype.constructor = FeatureList;\n\n/**\n * @exports opentype.LookupList\n * @class\n * @param {opentype.Table}\n * @param {Object}\n * @constructor\n * @extends opentype.Table\n */\nfunction LookupList(lookupListTable, subtableMakers) {\n    Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {\n        let subtableCallback = subtableMakers[lookupTable.lookupType];\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');\n        return new Table('lookupTable', [\n            {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},\n            {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}\n        ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));\n    }));\n}\nLookupList.prototype = Object.create(Table.prototype);\nLookupList.prototype.constructor = LookupList;\n\n// Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)\n// Don't use offsets inside Records (probable bug), only in Tables.\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    Table,\n    Record: Table,\n    Coverage,\n    ScriptList,\n    FeatureList,\n    LookupList,\n    ushortList,\n    tableList,\n    recordList,\n});\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/table.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/cff.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/cff.js ***!
  \***************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding */ \"../../node_modules/opentype.js/src/encoding.js\");\n/* harmony import */ var _glyphset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../glyphset */ \"../../node_modules/opentype.js/src/glyphset.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../path */ \"../../node_modules/opentype.js/src/path.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `CFF` table contains the glyph outlines in PostScript format.\n// https://www.microsoft.com/typography/OTSPEC/cff.htm\n// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/cff.pdf\n// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/type2.pdf\n\n\n\n\n\n\n\n// Custom equals function that can also check lists.\nfunction equals(a, b) {\n    if (a === b) {\n        return true;\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length !== b.length) {\n            return false;\n        }\n\n        for (let i = 0; i < a.length; i += 1) {\n            if (!equals(a[i], b[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Subroutines are encoded using the negative half of the number space.\n// See type 2 chapter 4.7 \"Subroutine operators\".\nfunction calcCFFSubroutineBias(subrs) {\n    let bias;\n    if (subrs.length < 1240) {\n        bias = 107;\n    } else if (subrs.length < 33900) {\n        bias = 1131;\n    } else {\n        bias = 32768;\n    }\n\n    return bias;\n}\n\n// Parse a `CFF` INDEX array.\n// An index array consists of a list of offsets, then a list of objects at those offsets.\nfunction parseCFFIndex(data, start, conversionFn) {\n    const offsets = [];\n    const objects = [];\n    const count = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getCard16(data, start);\n    let objectOffset;\n    let endOffset;\n    if (count !== 0) {\n        const offsetSize = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getByte(data, start + 2);\n        objectOffset = start + ((count + 1) * offsetSize) + 2;\n        let pos = start + 3;\n        for (let i = 0; i < count + 1; i += 1) {\n            offsets.push(_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getOffset(data, pos, offsetSize));\n            pos += offsetSize;\n        }\n\n        // The total size of the index array is 4 header bytes + the value of the last offset.\n        endOffset = objectOffset + offsets[count];\n    } else {\n        endOffset = start + 2;\n    }\n\n    for (let i = 0; i < offsets.length - 1; i += 1) {\n        let value = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);\n        if (conversionFn) {\n            value = conversionFn(value);\n        }\n\n        objects.push(value);\n    }\n\n    return {objects: objects, startOffset: start, endOffset: endOffset};\n}\n\n// Parse a `CFF` DICT real value.\nfunction parseFloatOperand(parser) {\n    let s = '';\n    const eof = 15;\n    const lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\n    while (true) {\n        const b = parser.parseByte();\n        const n1 = b >> 4;\n        const n2 = b & 15;\n\n        if (n1 === eof) {\n            break;\n        }\n\n        s += lookup[n1];\n\n        if (n2 === eof) {\n            break;\n        }\n\n        s += lookup[n2];\n    }\n\n    return parseFloat(s);\n}\n\n// Parse a `CFF` DICT operand.\nfunction parseOperand(parser, b0) {\n    let b1;\n    let b2;\n    let b3;\n    let b4;\n    if (b0 === 28) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        return b1 << 8 | b2;\n    }\n\n    if (b0 === 29) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        b3 = parser.parseByte();\n        b4 = parser.parseByte();\n        return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n    }\n\n    if (b0 === 30) {\n        return parseFloatOperand(parser);\n    }\n\n    if (b0 >= 32 && b0 <= 246) {\n        return b0 - 139;\n    }\n\n    if (b0 >= 247 && b0 <= 250) {\n        b1 = parser.parseByte();\n        return (b0 - 247) * 256 + b1 + 108;\n    }\n\n    if (b0 >= 251 && b0 <= 254) {\n        b1 = parser.parseByte();\n        return -(b0 - 251) * 256 - b1 - 108;\n    }\n\n    throw new Error('Invalid b0 ' + b0);\n}\n\n// Convert the entries returned by `parseDict` to a proper dictionary.\n// If a value is a list of one, it is unpacked.\nfunction entriesToObject(entries) {\n    const o = {};\n    for (let i = 0; i < entries.length; i += 1) {\n        const key = entries[i][0];\n        const values = entries[i][1];\n        let value;\n        if (values.length === 1) {\n            value = values[0];\n        } else {\n            value = values;\n        }\n\n        if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n            throw new Error('Object ' + o + ' already has key ' + key);\n        }\n\n        o[key] = value;\n    }\n\n    return o;\n}\n\n// Parse a `CFF` DICT object.\n// A dictionary contains key-value pairs in a compact tokenized format.\nfunction parseCFFDict(data, start, size) {\n    start = start !== undefined ? start : 0;\n    const parser = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n    const entries = [];\n    let operands = [];\n    size = size !== undefined ? size : data.length;\n\n    while (parser.relativeOffset < size) {\n        let op = parser.parseByte();\n\n        // The first byte for each dict item distinguishes between operator (key) and operand (value).\n        // Values <= 21 are operators.\n        if (op <= 21) {\n            // Two-byte operators have an initial escape byte of 12.\n            if (op === 12) {\n                op = 1200 + parser.parseByte();\n            }\n\n            entries.push([op, operands]);\n            operands = [];\n        } else {\n            // Since the operands (values) come before the operators (keys), we store all operands in a list\n            // until we encounter an operator.\n            operands.push(parseOperand(parser, op));\n        }\n    }\n\n    return entriesToObject(entries);\n}\n\n// Given a String Index (SID), return the value of the string.\n// Strings below index 392 are standard CFF strings and are not encoded in the font.\nfunction getCFFString(strings, index) {\n    if (index <= 390) {\n        index = _encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffStandardStrings\"][index];\n    } else {\n        index = strings[index - 391];\n    }\n\n    return index;\n}\n\n// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\nfunction interpretDict(dict, meta, strings) {\n    const newDict = {};\n    let value;\n\n    // Because we also want to include missing values, we start out from the meta list\n    // and lookup values in the dict.\n    for (let i = 0; i < meta.length; i += 1) {\n        const m = meta[i];\n\n        if (Array.isArray(m.type)) {\n            const values = [];\n            values.length = m.type.length;\n            for (let j = 0; j < m.type.length; j++) {\n                value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;\n                if (value === undefined) {\n                    value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;\n                }\n                if (m.type[j] === 'SID') {\n                    value = getCFFString(strings, value);\n                }\n                values[j] = value;\n            }\n            newDict[m.name] = values;\n        } else {\n            value = dict[m.op];\n            if (value === undefined) {\n                value = m.value !== undefined ? m.value : null;\n            }\n\n            if (m.type === 'SID') {\n                value = getCFFString(strings, value);\n            }\n            newDict[m.name] = value;\n        }\n    }\n\n    return newDict;\n}\n\n// Parse the CFF header.\nfunction parseCFFHeader(data, start) {\n    const header = {};\n    header.formatMajor = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getCard8(data, start);\n    header.formatMinor = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getCard8(data, start + 1);\n    header.size = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getCard8(data, start + 2);\n    header.offsetSize = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getCard8(data, start + 3);\n    header.startOffset = start;\n    header.endOffset = start + 4;\n    return header;\n}\n\nconst TOP_DICT_META = [\n    {name: 'version', op: 0, type: 'SID'},\n    {name: 'notice', op: 1, type: 'SID'},\n    {name: 'copyright', op: 1200, type: 'SID'},\n    {name: 'fullName', op: 2, type: 'SID'},\n    {name: 'familyName', op: 3, type: 'SID'},\n    {name: 'weight', op: 4, type: 'SID'},\n    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},\n    {name: 'italicAngle', op: 1202, type: 'number', value: 0},\n    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},\n    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},\n    {name: 'paintType', op: 1205, type: 'number', value: 0},\n    {name: 'charstringType', op: 1206, type: 'number', value: 2},\n    {\n        name: 'fontMatrix',\n        op: 1207,\n        type: ['real', 'real', 'real', 'real', 'real', 'real'],\n        value: [0.001, 0, 0, 0.001, 0, 0]\n    },\n    {name: 'uniqueId', op: 13, type: 'number'},\n    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},\n    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},\n    {name: 'xuid', op: 14, type: [], value: null},\n    {name: 'charset', op: 15, type: 'offset', value: 0},\n    {name: 'encoding', op: 16, type: 'offset', value: 0},\n    {name: 'charStrings', op: 17, type: 'offset', value: 0},\n    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]},\n    {name: 'ros', op: 1230, type: ['SID', 'SID', 'number']},\n    {name: 'cidFontVersion', op: 1231, type: 'number', value: 0},\n    {name: 'cidFontRevision', op: 1232, type: 'number', value: 0},\n    {name: 'cidFontType', op: 1233, type: 'number', value: 0},\n    {name: 'cidCount', op: 1234, type: 'number', value: 8720},\n    {name: 'uidBase', op: 1235, type: 'number'},\n    {name: 'fdArray', op: 1236, type: 'offset'},\n    {name: 'fdSelect', op: 1237, type: 'offset'},\n    {name: 'fontName', op: 1238, type: 'SID'}\n];\n\nconst PRIVATE_DICT_META = [\n    {name: 'subrs', op: 19, type: 'offset', value: 0},\n    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},\n    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}\n];\n\n// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n// The top dictionary contains the essential metadata for the font, together with the private dictionary.\nfunction parseCFFTopDict(data, strings) {\n    const dict = parseCFFDict(data, 0, data.byteLength);\n    return interpretDict(dict, TOP_DICT_META, strings);\n}\n\n// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\nfunction parseCFFPrivateDict(data, start, size, strings) {\n    const dict = parseCFFDict(data, start, size);\n    return interpretDict(dict, PRIVATE_DICT_META, strings);\n}\n\n// Returns a list of \"Top DICT\"s found using an INDEX list.\n// Used to read both the usual high-level Top DICTs and also the FDArray\n// discovered inside CID-keyed fonts.  When a Top DICT has a reference to\n// a Private DICT that is read and saved into the Top DICT.\n//\n// In addition to the expected/optional values as outlined in TOP_DICT_META\n// the following values might be saved into the Top DICT.\n//\n//    _subrs []        array of local CFF subroutines from Private DICT\n//    _subrsBias       bias value computed from number of subroutines\n//                      (see calcCFFSubroutineBias() and parseCFFCharstring())\n//    _defaultWidthX   default widths for CFF characters\n//    _nominalWidthX   bias added to width embedded within glyph description\n//\n//    _privateDict     saved copy of parsed Private DICT from Top DICT\nfunction gatherCFFTopDicts(data, start, cffIndex, strings) {\n    const topDictArray = [];\n    for (let iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {\n        const topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);\n        const topDict = parseCFFTopDict(topDictData, strings);\n        topDict._subrs = [];\n        topDict._subrsBias = 0;\n        const privateSize = topDict.private[0];\n        const privateOffset = topDict.private[1];\n        if (privateSize !== 0 && privateOffset !== 0) {\n            const privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);\n            topDict._defaultWidthX = privateDict.defaultWidthX;\n            topDict._nominalWidthX = privateDict.nominalWidthX;\n            if (privateDict.subrs !== 0) {\n                const subrOffset = privateOffset + privateDict.subrs;\n                const subrIndex = parseCFFIndex(data, subrOffset + start);\n                topDict._subrs = subrIndex.objects;\n                topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n            }\n            topDict._privateDict = privateDict;\n        }\n        topDictArray.push(topDict);\n    }\n    return topDictArray;\n}\n\n// Parse the CFF charset table, which contains internal names for all the glyphs.\n// This function will return a list of glyph names.\n// See Adobe TN #5176 chapter 13, \"Charsets\".\nfunction parseCFFCharset(data, start, nGlyphs, strings) {\n    let sid;\n    let count;\n    const parser = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n\n    // The .notdef glyph is not included, so subtract 1.\n    nGlyphs -= 1;\n    const charset = ['.notdef'];\n\n    const format = parser.parseCard8();\n    if (format === 0) {\n        for (let i = 0; i < nGlyphs; i += 1) {\n            sid = parser.parseSID();\n            charset.push(getCFFString(strings, sid));\n        }\n    } else if (format === 1) {\n        while (charset.length <= nGlyphs) {\n            sid = parser.parseSID();\n            count = parser.parseCard8();\n            for (let i = 0; i <= count; i += 1) {\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else if (format === 2) {\n        while (charset.length <= nGlyphs) {\n            sid = parser.parseSID();\n            count = parser.parseCard16();\n            for (let i = 0; i <= count; i += 1) {\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else {\n        throw new Error('Unknown charset format ' + format);\n    }\n\n    return charset;\n}\n\n// Parse the CFF encoding data. Only one encoding can be specified per font.\n// See Adobe TN #5176 chapter 12, \"Encodings\".\nfunction parseCFFEncoding(data, start, charset) {\n    let code;\n    const enc = {};\n    const parser = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n    const format = parser.parseCard8();\n    if (format === 0) {\n        const nCodes = parser.parseCard8();\n        for (let i = 0; i < nCodes; i += 1) {\n            code = parser.parseCard8();\n            enc[code] = i;\n        }\n    } else if (format === 1) {\n        const nRanges = parser.parseCard8();\n        code = 1;\n        for (let i = 0; i < nRanges; i += 1) {\n            const first = parser.parseCard8();\n            const nLeft = parser.parseCard8();\n            for (let j = first; j <= first + nLeft; j += 1) {\n                enc[j] = code;\n                code += 1;\n            }\n        }\n    } else {\n        throw new Error('Unknown encoding format ' + format);\n    }\n\n    return new _encoding__WEBPACK_IMPORTED_MODULE_0__[\"CffEncoding\"](enc, charset);\n}\n\n// Take in charstring code and return a Glyph object.\n// The encoding is described in the Type 2 Charstring Format\n// https://www.microsoft.com/typography/OTSPEC/charstr2.htm\nfunction parseCFFCharstring(font, glyph, code) {\n    let c1x;\n    let c1y;\n    let c2x;\n    let c2y;\n    const p = new _path__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n    const stack = [];\n    let nStems = 0;\n    let haveWidth = false;\n    let open = false;\n    let x = 0;\n    let y = 0;\n    let subrs;\n    let subrsBias;\n    let defaultWidthX;\n    let nominalWidthX;\n    if (font.isCIDFont) {\n        const fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n        const fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n        subrs = fdDict._subrs;\n        subrsBias = fdDict._subrsBias;\n        defaultWidthX = fdDict._defaultWidthX;\n        nominalWidthX = fdDict._nominalWidthX;\n    } else {\n        subrs = font.tables.cff.topDict._subrs;\n        subrsBias = font.tables.cff.topDict._subrsBias;\n        defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n        nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n    }\n    let width = defaultWidthX;\n\n    function newContour(x, y) {\n        if (open) {\n            p.closePath();\n        }\n\n        p.moveTo(x, y);\n        open = true;\n    }\n\n    function parseStems() {\n        let hasWidthArg;\n\n        // The number of stem operators on the stack is always even.\n        // If the value is uneven, that means a width is specified.\n        hasWidthArg = stack.length % 2 !== 0;\n        if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n        }\n\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n    }\n\n    function parse(code) {\n        let b1;\n        let b2;\n        let b3;\n        let b4;\n        let codeIndex;\n        let subrCode;\n        let jpx;\n        let jpy;\n        let c3x;\n        let c3y;\n        let c4x;\n        let c4y;\n\n        let i = 0;\n        while (i < code.length) {\n            let v = code[i];\n            i += 1;\n            switch (v) {\n                case 1: // hstem\n                    parseStems();\n                    break;\n                case 3: // vstem\n                    parseStems();\n                    break;\n                case 4: // vmoveto\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    y += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 5: // rlineto\n                    while (stack.length > 0) {\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 6: // hlineto\n                    while (stack.length > 0) {\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 7: // vlineto\n                    while (stack.length > 0) {\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 8: // rrcurveto\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 10: // callsubr\n                    codeIndex = stack.pop() + subrsBias;\n                    subrCode = subrs[codeIndex];\n                    if (subrCode) {\n                        parse(subrCode);\n                    }\n\n                    break;\n                case 11: // return\n                    return;\n                case 12: // flex operators\n                    v = code[i];\n                    i += 1;\n                    switch (v) {\n                        case 35: // flex\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y   + stack.shift();    // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y + stack.shift();    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = jpy + stack.shift();    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = c3y + stack.shift();    // dy5\n                            x = c4x   + stack.shift();    // dx6\n                            y = c4y   + stack.shift();    // dy6\n                            stack.shift();                // flex depth\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 34: // hflex\n                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y;                      // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y;                    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = c2y;                    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = y;                      // dy5\n                            x = c4x + stack.shift();      // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 36: // hflex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y   + stack.shift();    // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y;                    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = c2y;                    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = c3y + stack.shift();    // dy5\n                            x = c4x + stack.shift();      // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 37: // flex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y   + stack.shift();    // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y + stack.shift();    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = jpy + stack.shift();    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = c3y + stack.shift();    // dy5\n                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                                x = c4x + stack.shift();\n                            } else {\n                                y = c4y + stack.shift();\n                            }\n\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        default:\n                            console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);\n                            stack.length = 0;\n                    }\n                    break;\n                case 14: // endchar\n                    if (stack.length > 0 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    if (open) {\n                        p.closePath();\n                        open = false;\n                    }\n\n                    break;\n                case 18: // hstemhm\n                    parseStems();\n                    break;\n                case 19: // hintmask\n                case 20: // cntrmask\n                    parseStems();\n                    i += (nStems + 7) >> 3;\n                    break;\n                case 21: // rmoveto\n                    if (stack.length > 2 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    y += stack.pop();\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 22: // hmoveto\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 23: // vstemhm\n                    parseStems();\n                    break;\n                case 24: // rcurveline\n                    while (stack.length > 2) {\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    x += stack.shift();\n                    y += stack.shift();\n                    p.lineTo(x, y);\n                    break;\n                case 25: // rlinecurve\n                    while (stack.length > 6) {\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    c1x = x + stack.shift();\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y + stack.shift();\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    break;\n                case 26: // vvcurveto\n                    if (stack.length % 2) {\n                        x += stack.shift();\n                    }\n\n                    while (stack.length > 0) {\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x;\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 27: // hhcurveto\n                    if (stack.length % 2) {\n                        y += stack.shift();\n                    }\n\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y;\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 28: // shortint\n                    b1 = code[i];\n                    b2 = code[i + 1];\n                    stack.push(((b1 << 24) | (b2 << 16)) >> 16);\n                    i += 2;\n                    break;\n                case 29: // callgsubr\n                    codeIndex = stack.pop() + font.gsubrsBias;\n                    subrCode = font.gsubrs[codeIndex];\n                    if (subrCode) {\n                        parse(subrCode);\n                    }\n\n                    break;\n                case 30: // vhcurveto\n                    while (stack.length > 0) {\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 31: // hvcurveto\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                default:\n                    if (v < 32) {\n                        console.log('Glyph ' + glyph.index + ': unknown operator ' + v);\n                    } else if (v < 247) {\n                        stack.push(v - 139);\n                    } else if (v < 251) {\n                        b1 = code[i];\n                        i += 1;\n                        stack.push((v - 247) * 256 + b1 + 108);\n                    } else if (v < 255) {\n                        b1 = code[i];\n                        i += 1;\n                        stack.push(-(v - 251) * 256 - b1 - 108);\n                    } else {\n                        b1 = code[i];\n                        b2 = code[i + 1];\n                        b3 = code[i + 2];\n                        b4 = code[i + 3];\n                        i += 4;\n                        stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);\n                    }\n            }\n        }\n    }\n\n    parse(code);\n\n    glyph.advanceWidth = width;\n    return p;\n}\n\nfunction parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n    const fdSelect = [];\n    let fdIndex;\n    const parser = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n    const format = parser.parseCard8();\n    if (format === 0) {\n        // Simple list of nGlyphs elements\n        for (let iGid = 0; iGid < nGlyphs; iGid++) {\n            fdIndex = parser.parseCard8();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n            }\n            fdSelect.push(fdIndex);\n        }\n    } else if (format === 3) {\n        // Ranges\n        const nRanges = parser.parseCard16();\n        let first = parser.parseCard16();\n        if (first !== 0) {\n            throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);\n        }\n        let next;\n        for (let iRange = 0; iRange < nRanges; iRange++) {\n            fdIndex = parser.parseCard8();\n            next = parser.parseCard16();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n            }\n            if (next > nGlyphs) {\n                throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);\n            }\n            for (; first < next; first++) {\n                fdSelect.push(fdIndex);\n            }\n            first = next;\n        }\n        if (next !== nGlyphs) {\n            throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);\n        }\n    } else {\n        throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);\n    }\n    return fdSelect;\n}\n\n// Parse the `CFF` table, which contains the glyph outlines in PostScript format.\nfunction parseCFFTable(data, start, font) {\n    font.tables.cff = {};\n    const header = parseCFFHeader(data, start);\n    const nameIndex = parseCFFIndex(data, header.endOffset, _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bytesToString);\n    const topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n    const stringIndex = parseCFFIndex(data, topDictIndex.endOffset, _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bytesToString);\n    const globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n    font.gsubrs = globalSubrIndex.objects;\n    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\n    const topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);\n    if (topDictArray.length !== 1) {\n        throw new Error('CFF table has too many fonts in \\'FontSet\\' - count of fonts NameIndex.length = ' + topDictArray.length);\n    }\n\n    const topDict = topDictArray[0];\n    font.tables.cff.topDict = topDict;\n\n    if (topDict._privateDict) {\n        font.defaultWidthX = topDict._privateDict.defaultWidthX;\n        font.nominalWidthX = topDict._privateDict.nominalWidthX;\n    }\n\n    if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {\n        font.isCIDFont = true;\n    }\n\n    if (font.isCIDFont) {\n        let fdArrayOffset = topDict.fdArray;\n        let fdSelectOffset = topDict.fdSelect;\n        if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n            throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');\n        }\n        fdArrayOffset += start;\n        const fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n        const fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);\n        topDict._fdArray = fdArray;\n        fdSelectOffset += start;\n        topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);\n    }\n\n    const privateDictOffset = start + topDict.private[1];\n    const privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);\n    font.defaultWidthX = privateDict.defaultWidthX;\n    font.nominalWidthX = privateDict.nominalWidthX;\n\n    if (privateDict.subrs !== 0) {\n        const subrOffset = privateDictOffset + privateDict.subrs;\n        const subrIndex = parseCFFIndex(data, subrOffset);\n        font.subrs = subrIndex.objects;\n        font.subrsBias = calcCFFSubroutineBias(font.subrs);\n    } else {\n        font.subrs = [];\n        font.subrsBias = 0;\n    }\n\n    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n    const charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n    font.nGlyphs = charStringsIndex.objects.length;\n\n    const charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);\n    if (topDict.encoding === 0) {\n        // Standard encoding\n        font.cffEncoding = new _encoding__WEBPACK_IMPORTED_MODULE_0__[\"CffEncoding\"](_encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffStandardEncoding\"], charset);\n    } else if (topDict.encoding === 1) {\n        // Expert encoding\n        font.cffEncoding = new _encoding__WEBPACK_IMPORTED_MODULE_0__[\"CffEncoding\"](_encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffExpertEncoding\"], charset);\n    } else {\n        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);\n    }\n\n    // Prefer the CMAP encoding to the CFF encoding.\n    font.encoding = font.encoding || font.cffEncoding;\n\n    font.glyphs = new _glyphset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].GlyphSet(font);\n    for (let i = 0; i < font.nGlyphs; i += 1) {\n        const charString = charStringsIndex.objects[i];\n        font.glyphs.push(i, _glyphset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cffGlyphLoader(font, i, parseCFFCharstring, charString));\n    }\n}\n\n// Convert a string to a String ID (SID).\n// The list of strings is modified in place.\nfunction encodeString(s, strings) {\n    let sid;\n\n    // Is the string in the CFF standard strings?\n    let i = _encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffStandardStrings\"].indexOf(s);\n    if (i >= 0) {\n        sid = i;\n    }\n\n    // Is the string already in the string index?\n    i = strings.indexOf(s);\n    if (i >= 0) {\n        sid = i + _encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffStandardStrings\"].length;\n    } else {\n        sid = _encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffStandardStrings\"].length + strings.length;\n        strings.push(s);\n    }\n\n    return sid;\n}\n\nfunction makeHeader() {\n    return new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Header', [\n        {name: 'major', type: 'Card8', value: 1},\n        {name: 'minor', type: 'Card8', value: 0},\n        {name: 'hdrSize', type: 'Card8', value: 4},\n        {name: 'major', type: 'Card8', value: 1}\n    ]);\n}\n\nfunction makeNameIndex(fontNames) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Name INDEX', [\n        {name: 'names', type: 'INDEX', value: []}\n    ]);\n    t.names = [];\n    for (let i = 0; i < fontNames.length; i += 1) {\n        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});\n    }\n\n    return t;\n}\n\n// Given a dictionary's metadata, create a DICT structure.\nfunction makeDict(meta, attrs, strings) {\n    const m = {};\n    for (let i = 0; i < meta.length; i += 1) {\n        const entry = meta[i];\n        let value = attrs[entry.name];\n        if (value !== undefined && !equals(value, entry.value)) {\n            if (entry.type === 'SID') {\n                value = encodeString(value, strings);\n            }\n\n            m[entry.op] = {name: entry.name, type: entry.type, value: value};\n        }\n    }\n\n    return m;\n}\n\n// The Top DICT houses the global font attributes.\nfunction makeTopDict(attrs, strings) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Top DICT', [\n        {name: 'dict', type: 'DICT', value: {}}\n    ]);\n    t.dict = makeDict(TOP_DICT_META, attrs, strings);\n    return t;\n}\n\nfunction makeTopDictIndex(topDict) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Top DICT INDEX', [\n        {name: 'topDicts', type: 'INDEX', value: []}\n    ]);\n    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];\n    return t;\n}\n\nfunction makeStringIndex(strings) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('String INDEX', [\n        {name: 'strings', type: 'INDEX', value: []}\n    ]);\n    t.strings = [];\n    for (let i = 0; i < strings.length; i += 1) {\n        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});\n    }\n\n    return t;\n}\n\nfunction makeGlobalSubrIndex() {\n    // Currently we don't use subroutines.\n    return new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Global Subr INDEX', [\n        {name: 'subrs', type: 'INDEX', value: []}\n    ]);\n}\n\nfunction makeCharsets(glyphNames, strings) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Charsets', [\n        {name: 'format', type: 'Card8', value: 0}\n    ]);\n    for (let i = 0; i < glyphNames.length; i += 1) {\n        const glyphName = glyphNames[i];\n        const glyphSID = encodeString(glyphName, strings);\n        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});\n    }\n\n    return t;\n}\n\nfunction glyphToOps(glyph) {\n    const ops = [];\n    const path = glyph.path;\n    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});\n    let x = 0;\n    let y = 0;\n    for (let i = 0; i < path.commands.length; i += 1) {\n        let dx;\n        let dy;\n        let cmd = path.commands[i];\n        if (cmd.type === 'Q') {\n            // CFF only supports bézier curves, so convert the quad to a bézier.\n            const _13 = 1 / 3;\n            const _23 = 2 / 3;\n\n            // We're going to create a new command so we don't change the original path.\n            cmd = {\n                type: 'C',\n                x: cmd.x,\n                y: cmd.y,\n                x1: _13 * x + _23 * cmd.x1,\n                y1: _13 * y + _23 * cmd.y1,\n                x2: _13 * cmd.x + _23 * cmd.x1,\n                y2: _13 * cmd.y + _23 * cmd.y1\n            };\n        }\n\n        if (cmd.type === 'M') {\n            dx = Math.round(cmd.x - x);\n            dy = Math.round(cmd.y - y);\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rmoveto', type: 'OP', value: 21});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        } else if (cmd.type === 'L') {\n            dx = Math.round(cmd.x - x);\n            dy = Math.round(cmd.y - y);\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rlineto', type: 'OP', value: 5});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        } else if (cmd.type === 'C') {\n            const dx1 = Math.round(cmd.x1 - x);\n            const dy1 = Math.round(cmd.y1 - y);\n            const dx2 = Math.round(cmd.x2 - cmd.x1);\n            const dy2 = Math.round(cmd.y2 - cmd.y1);\n            dx = Math.round(cmd.x - cmd.x2);\n            dy = Math.round(cmd.y - cmd.y2);\n            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});\n            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});\n            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});\n            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rrcurveto', type: 'OP', value: 8});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        }\n\n        // Contours are closed automatically.\n    }\n\n    ops.push({name: 'endchar', type: 'OP', value: 14});\n    return ops;\n}\n\nfunction makeCharStringsIndex(glyphs) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('CharStrings INDEX', [\n        {name: 'charStrings', type: 'INDEX', value: []}\n    ]);\n\n    for (let i = 0; i < glyphs.length; i += 1) {\n        const glyph = glyphs.get(i);\n        const ops = glyphToOps(glyph);\n        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});\n    }\n\n    return t;\n}\n\nfunction makePrivateDict(attrs, strings) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Private DICT', [\n        {name: 'dict', type: 'DICT', value: {}}\n    ]);\n    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);\n    return t;\n}\n\nfunction makeCFFTable(glyphs, options) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Table('CFF ', [\n        {name: 'header', type: 'RECORD'},\n        {name: 'nameIndex', type: 'RECORD'},\n        {name: 'topDictIndex', type: 'RECORD'},\n        {name: 'stringIndex', type: 'RECORD'},\n        {name: 'globalSubrIndex', type: 'RECORD'},\n        {name: 'charsets', type: 'RECORD'},\n        {name: 'charStringsIndex', type: 'RECORD'},\n        {name: 'privateDict', type: 'RECORD'}\n    ]);\n\n    const fontScale = 1 / options.unitsPerEm;\n    // We use non-zero values for the offsets so that the DICT encodes them.\n    // This is important because the size of the Top DICT plays a role in offset calculation,\n    // and the size shouldn't change after we've written correct offsets.\n    const attrs = {\n        version: options.version,\n        fullName: options.fullName,\n        familyName: options.familyName,\n        weight: options.weightName,\n        fontBBox: options.fontBBox || [0, 0, 0, 0],\n        fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],\n        charset: 999,\n        encoding: 0,\n        charStrings: 999,\n        private: [0, 999]\n    };\n\n    const privateAttrs = {};\n\n    const glyphNames = [];\n    let glyph;\n\n    // Skip first glyph (.notdef)\n    for (let i = 1; i < glyphs.length; i += 1) {\n        glyph = glyphs.get(i);\n        glyphNames.push(glyph.name);\n    }\n\n    const strings = [];\n\n    t.header = makeHeader();\n    t.nameIndex = makeNameIndex([options.postScriptName]);\n    let topDict = makeTopDict(attrs, strings);\n    t.topDictIndex = makeTopDictIndex(topDict);\n    t.globalSubrIndex = makeGlobalSubrIndex();\n    t.charsets = makeCharsets(glyphNames, strings);\n    t.charStringsIndex = makeCharStringsIndex(glyphs);\n    t.privateDict = makePrivateDict(privateAttrs, strings);\n\n    // Needs to come at the end, to encode all custom strings used in the font.\n    t.stringIndex = makeStringIndex(strings);\n\n    const startOffset = t.header.sizeOf() +\n        t.nameIndex.sizeOf() +\n        t.topDictIndex.sizeOf() +\n        t.stringIndex.sizeOf() +\n        t.globalSubrIndex.sizeOf();\n    attrs.charset = startOffset;\n\n    // We use the CFF standard encoding; proper encoding will be handled in cmap.\n    attrs.encoding = 0;\n    attrs.charStrings = attrs.charset + t.charsets.sizeOf();\n    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();\n\n    // Recreate the Top DICT INDEX with the correct offsets.\n    topDict = makeTopDict(attrs, strings);\n    t.topDictIndex = makeTopDictIndex(topDict);\n\n    return t;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseCFFTable, make: makeCFFTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/cff.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/cmap.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/cmap.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `cmap` table stores the mappings from characters to glyphs.\n// https://www.microsoft.com/typography/OTSPEC/cmap.htm\n\n\n\n\n\nfunction parseCmapTableFormat12(cmap, p) {\n    //Skip reserved.\n    p.parseUShort();\n\n    // Length in bytes of the sub-tables.\n    cmap.length = p.parseULong();\n    cmap.language = p.parseULong();\n\n    let groupCount;\n    cmap.groupCount = groupCount = p.parseULong();\n    cmap.glyphIndexMap = {};\n\n    for (let i = 0; i < groupCount; i += 1) {\n        const startCharCode = p.parseULong();\n        const endCharCode = p.parseULong();\n        let startGlyphId = p.parseULong();\n\n        for (let c = startCharCode; c <= endCharCode; c += 1) {\n            cmap.glyphIndexMap[c] = startGlyphId;\n            startGlyphId++;\n        }\n    }\n}\n\nfunction parseCmapTableFormat4(cmap, p, data, start, offset) {\n    // Length in bytes of the sub-tables.\n    cmap.length = p.parseUShort();\n    cmap.language = p.parseUShort();\n\n    // segCount is stored x 2.\n    let segCount;\n    cmap.segCount = segCount = p.parseUShort() >> 1;\n\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n\n    // The \"unrolled\" mapping from character codes to glyph indices.\n    cmap.glyphIndexMap = {};\n    const endCountParser = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start + offset + 14);\n    const startCountParser = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start + offset + 16 + segCount * 2);\n    const idDeltaParser = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start + offset + 16 + segCount * 4);\n    const idRangeOffsetParser = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start + offset + 16 + segCount * 6);\n    let glyphIndexOffset = start + offset + 16 + segCount * 8;\n    for (let i = 0; i < segCount - 1; i += 1) {\n        let glyphIndex;\n        const endCount = endCountParser.parseUShort();\n        const startCount = startCountParser.parseUShort();\n        const idDelta = idDeltaParser.parseShort();\n        const idRangeOffset = idRangeOffsetParser.parseUShort();\n        for (let c = startCount; c <= endCount; c += 1) {\n            if (idRangeOffset !== 0) {\n                // The idRangeOffset is relative to the current position in the idRangeOffset array.\n                // Take the current offset in the idRangeOffset array.\n                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);\n\n                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n                glyphIndexOffset += idRangeOffset;\n\n                // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n                glyphIndexOffset += (c - startCount) * 2;\n                glyphIndex = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUShort(data, glyphIndexOffset);\n                if (glyphIndex !== 0) {\n                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;\n                }\n            } else {\n                glyphIndex = (c + idDelta) & 0xFFFF;\n            }\n\n            cmap.glyphIndexMap[c] = glyphIndex;\n        }\n    }\n}\n\n// Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n// There are many available formats, but we only support the Windows format 4 and 12.\n// This function returns a `CmapEncoding` object or null if no supported format could be found.\nfunction parseCmapTable(data, start) {\n    const cmap = {};\n    cmap.version = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUShort(data, start);\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(cmap.version === 0, 'cmap table version should be 0.');\n\n    // The cmap table can contain many sub-tables, each with their own format.\n    // We're only interested in a \"platform 0\" (Unicode format) and \"platform 3\" (Windows format) table.\n    cmap.numTables = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUShort(data, start + 2);\n    let offset = -1;\n    for (let i = cmap.numTables - 1; i >= 0; i -= 1) {\n        const platformId = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUShort(data, start + 4 + (i * 8));\n        const encodingId = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUShort(data, start + 4 + (i * 8) + 2);\n        if ((platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||\n            (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4))) {\n            offset = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getULong(data, start + 4 + (i * 8) + 4);\n            break;\n        }\n    }\n\n    if (offset === -1) {\n        // There is no cmap table in the font that we support.\n        throw new Error('No valid cmap sub-tables found.');\n    }\n\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start + offset);\n    cmap.format = p.parseUShort();\n\n    if (cmap.format === 12) {\n        parseCmapTableFormat12(cmap, p);\n    } else if (cmap.format === 4) {\n        parseCmapTableFormat4(cmap, p, data, start, offset);\n    } else {\n        throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');\n    }\n\n    return cmap;\n}\n\nfunction addSegment(t, code, glyphIndex) {\n    t.segments.push({\n        end: code,\n        start: code,\n        delta: -(code - glyphIndex),\n        offset: 0,\n        glyphIndex: glyphIndex\n    });\n}\n\nfunction addTerminatorSegment(t) {\n    t.segments.push({\n        end: 0xFFFF,\n        start: 0xFFFF,\n        delta: 1,\n        offset: 0\n    });\n}\n\n// Make cmap table, format 4 by default, 12 if needed only\nfunction makeCmapTable(glyphs) {\n    // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)\n    let isPlan0Only = true;\n    let i;\n\n    // Check if we need to add cmap format 12 or if format 4 only is fine\n    for (i = glyphs.length - 1; i > 0; i -= 1) {\n        const g = glyphs.get(i);\n        if (g.unicode > 65535) {\n            console.log('Adding CMAP format 12 (needed!)');\n            isPlan0Only = false;\n            break;\n        }\n    }\n\n    let cmapTable = [\n        {name: 'version', type: 'USHORT', value: 0},\n        {name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2},\n\n        // CMAP 4 header\n        {name: 'platformID', type: 'USHORT', value: 3},\n        {name: 'encodingID', type: 'USHORT', value: 1},\n        {name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : (12 + 8)}\n    ];\n\n    if (!isPlan0Only)\n        cmapTable = cmapTable.concat([\n            // CMAP 12 header\n            {name: 'cmap12PlatformID', type: 'USHORT', value: 3}, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere\n            {name: 'cmap12EncodingID', type: 'USHORT', value: 10},\n            {name: 'cmap12Offset', type: 'ULONG', value: 0}\n        ]);\n\n    cmapTable = cmapTable.concat([\n        // CMAP 4 Subtable\n        {name: 'format', type: 'USHORT', value: 4},\n        {name: 'cmap4Length', type: 'USHORT', value: 0},\n        {name: 'language', type: 'USHORT', value: 0},\n        {name: 'segCountX2', type: 'USHORT', value: 0},\n        {name: 'searchRange', type: 'USHORT', value: 0},\n        {name: 'entrySelector', type: 'USHORT', value: 0},\n        {name: 'rangeShift', type: 'USHORT', value: 0}\n    ]);\n\n    const t = new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('cmap', cmapTable);\n\n    t.segments = [];\n    for (i = 0; i < glyphs.length; i += 1) {\n        const glyph = glyphs.get(i);\n        for (let j = 0; j < glyph.unicodes.length; j += 1) {\n            addSegment(t, glyph.unicodes[j], i);\n        }\n\n        t.segments = t.segments.sort(function (a, b) {\n            return a.start - b.start;\n        });\n    }\n\n    addTerminatorSegment(t);\n\n    const segCount = t.segments.length;\n    let segCountToRemove = 0;\n\n    // CMAP 4\n    // Set up parallel segment arrays.\n    let endCounts = [];\n    let startCounts = [];\n    let idDeltas = [];\n    let idRangeOffsets = [];\n    let glyphIds = [];\n\n    // CMAP 12\n    let cmap12Groups = [];\n\n    // Reminder this loop is not following the specification at 100%\n    // The specification -> find suites of characters and make a group\n    // Here we're doing one group for each letter\n    // Doing as the spec can save 8 times (or more) space\n    for (i = 0; i < segCount; i += 1) {\n        const segment = t.segments[i];\n\n        // CMAP 4\n        if (segment.end <= 65535 && segment.start <= 65535) {\n            endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});\n            startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});\n            idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});\n            idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});\n            if (segment.glyphId !== undefined) {\n                glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});\n            }\n        } else {\n            // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12\n            segCountToRemove += 1;\n        }\n\n        // CMAP 12\n        // Skip Terminator Segment\n        if (!isPlan0Only && segment.glyphIndex !== undefined) {\n            cmap12Groups = cmap12Groups.concat({name: 'cmap12Start_' + i, type: 'ULONG', value: segment.start});\n            cmap12Groups = cmap12Groups.concat({name: 'cmap12End_' + i, type: 'ULONG', value: segment.end});\n            cmap12Groups = cmap12Groups.concat({name: 'cmap12Glyph_' + i, type: 'ULONG', value: segment.glyphIndex});\n        }\n    }\n\n    // CMAP 4 Subtable\n    t.segCountX2 = (segCount - segCountToRemove) * 2;\n    t.searchRange = Math.pow(2, Math.floor(Math.log((segCount - segCountToRemove)) / Math.log(2))) * 2;\n    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);\n    t.rangeShift = t.segCountX2 - t.searchRange;\n\n    t.fields = t.fields.concat(endCounts);\n    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});\n    t.fields = t.fields.concat(startCounts);\n    t.fields = t.fields.concat(idDeltas);\n    t.fields = t.fields.concat(idRangeOffsets);\n    t.fields = t.fields.concat(glyphIds);\n\n    t.cmap4Length = 14 + // Subtable header\n        endCounts.length * 2 +\n        2 + // reservedPad\n        startCounts.length * 2 +\n        idDeltas.length * 2 +\n        idRangeOffsets.length * 2 +\n        glyphIds.length * 2;\n\n    if (!isPlan0Only) {\n        // CMAP 12 Subtable\n        const cmap12Length = 16 + // Subtable header\n            cmap12Groups.length * 4;\n\n        t.cmap12Offset = 12 + (2 * 2) + 4 + t.cmap4Length;\n        t.fields = t.fields.concat([\n            {name: 'cmap12Format', type: 'USHORT', value: 12},\n            {name: 'cmap12Reserved', type: 'USHORT', value: 0},\n            {name: 'cmap12Length', type: 'ULONG', value: cmap12Length},\n            {name: 'cmap12Language', type: 'ULONG', value: 0},\n            {name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3}\n        ]);\n\n        t.fields = t.fields.concat(cmap12Groups);\n    }\n\n    return t;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseCmapTable, make: makeCmapTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/cmap.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/fvar.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/fvar.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `fvar` table stores font variation axes and instances.\n// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6fvar.html\n\n\n\n\n\nfunction addName(name, names) {\n    const nameString = JSON.stringify(name);\n    let nameID = 256;\n    for (let nameKey in names) {\n        let n = parseInt(nameKey);\n        if (!n || n < 256) {\n            continue;\n        }\n\n        if (JSON.stringify(names[nameKey]) === nameString) {\n            return n;\n        }\n\n        if (nameID <= n) {\n            nameID = n + 1;\n        }\n    }\n\n    names[nameID] = name;\n    return nameID;\n}\n\nfunction makeFvarAxis(n, axis, names) {\n    const nameID = addName(axis.name, names);\n    return [\n        {name: 'tag_' + n, type: 'TAG', value: axis.tag},\n        {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},\n        {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},\n        {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},\n        {name: 'flags_' + n, type: 'USHORT', value: 0},\n        {name: 'nameID_' + n, type: 'USHORT', value: nameID}\n    ];\n}\n\nfunction parseFvarAxis(data, start, names) {\n    const axis = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    axis.tag = p.parseTag();\n    axis.minValue = p.parseFixed();\n    axis.defaultValue = p.parseFixed();\n    axis.maxValue = p.parseFixed();\n    p.skip('uShort', 1);  // reserved for flags; no values defined\n    axis.name = names[p.parseUShort()] || {};\n    return axis;\n}\n\nfunction makeFvarInstance(n, inst, axes, names) {\n    const nameID = addName(inst.name, names);\n    const fields = [\n        {name: 'nameID_' + n, type: 'USHORT', value: nameID},\n        {name: 'flags_' + n, type: 'USHORT', value: 0}\n    ];\n\n    for (let i = 0; i < axes.length; ++i) {\n        const axisTag = axes[i].tag;\n        fields.push({\n            name: 'axis_' + n + ' ' + axisTag,\n            type: 'FIXED',\n            value: inst.coordinates[axisTag] << 16\n        });\n    }\n\n    return fields;\n}\n\nfunction parseFvarInstance(data, start, axes, names) {\n    const inst = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    inst.name = names[p.parseUShort()] || {};\n    p.skip('uShort', 1);  // reserved for flags; no values defined\n\n    inst.coordinates = {};\n    for (let i = 0; i < axes.length; ++i) {\n        inst.coordinates[axes[i].tag] = p.parseFixed();\n    }\n\n    return inst;\n}\n\nfunction makeFvarTable(fvar, names) {\n    const result = new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('fvar', [\n        {name: 'version', type: 'ULONG', value: 0x10000},\n        {name: 'offsetToData', type: 'USHORT', value: 0},\n        {name: 'countSizePairs', type: 'USHORT', value: 2},\n        {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},\n        {name: 'axisSize', type: 'USHORT', value: 20},\n        {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},\n        {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}\n    ]);\n    result.offsetToData = result.sizeOf();\n\n    for (let i = 0; i < fvar.axes.length; i++) {\n        result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));\n    }\n\n    for (let j = 0; j < fvar.instances.length; j++) {\n        result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));\n    }\n\n    return result;\n}\n\nfunction parseFvarTable(data, start, names) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    const tableVersion = p.parseULong();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');\n    const offsetToData = p.parseOffset16();\n    // Skip countSizePairs.\n    p.skip('uShort', 1);\n    const axisCount = p.parseUShort();\n    const axisSize = p.parseUShort();\n    const instanceCount = p.parseUShort();\n    const instanceSize = p.parseUShort();\n\n    const axes = [];\n    for (let i = 0; i < axisCount; i++) {\n        axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));\n    }\n\n    const instances = [];\n    const instanceStart = start + offsetToData + axisCount * axisSize;\n    for (let j = 0; j < instanceCount; j++) {\n        instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));\n    }\n\n    return {axes: axes, instances: instances};\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ make: makeFvarTable, parse: parseFvarTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/fvar.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/glyf.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/glyf.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _glyphset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../glyphset */ \"../../node_modules/opentype.js/src/glyphset.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../path */ \"../../node_modules/opentype.js/src/path.js\");\n// The `glyf` table describes the glyphs in TrueType outline format.\n// http://www.microsoft.com/typography/otspec/glyf.htm\n\n\n\n\n\n\n// Parse the coordinate data for a glyph.\nfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n    let v;\n    if ((flag & shortVectorBitMask) > 0) {\n        // The coordinate is 1 byte long.\n        v = p.parseByte();\n        // The `same` bit is re-used for short values to signify the sign of the value.\n        if ((flag & sameBitMask) === 0) {\n            v = -v;\n        }\n\n        v = previousValue + v;\n    } else {\n        //  The coordinate is 2 bytes long.\n        // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n        if ((flag & sameBitMask) > 0) {\n            v = previousValue;\n        } else {\n            // Parse the coordinate as a signed 16-bit delta value.\n            v = previousValue + p.parseShort();\n        }\n    }\n\n    return v;\n}\n\n// Parse a TrueType glyph.\nfunction parseGlyph(glyph, data, start) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n    glyph.numberOfContours = p.parseShort();\n    glyph._xMin = p.parseShort();\n    glyph._yMin = p.parseShort();\n    glyph._xMax = p.parseShort();\n    glyph._yMax = p.parseShort();\n    let flags;\n    let flag;\n\n    if (glyph.numberOfContours > 0) {\n        // This glyph is not a composite.\n        const endPointIndices = glyph.endPointIndices = [];\n        for (let i = 0; i < glyph.numberOfContours; i += 1) {\n            endPointIndices.push(p.parseUShort());\n        }\n\n        glyph.instructionLength = p.parseUShort();\n        glyph.instructions = [];\n        for (let i = 0; i < glyph.instructionLength; i += 1) {\n            glyph.instructions.push(p.parseByte());\n        }\n\n        const numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n        flags = [];\n        for (let i = 0; i < numberOfCoordinates; i += 1) {\n            flag = p.parseByte();\n            flags.push(flag);\n            // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n            if ((flag & 8) > 0) {\n                const repeatCount = p.parseByte();\n                for (let j = 0; j < repeatCount; j += 1) {\n                    flags.push(flag);\n                    i += 1;\n                }\n            }\n        }\n\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n        if (endPointIndices.length > 0) {\n            const points = [];\n            let point;\n            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n            if (numberOfCoordinates > 0) {\n                for (let i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = {};\n                    point.onCurve = !!(flag & 1);\n                    point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;\n                    points.push(point);\n                }\n\n                let px = 0;\n                for (let i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = points[i];\n                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                    px = point.x;\n                }\n\n                let py = 0;\n                for (let i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = points[i];\n                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                    py = point.y;\n                }\n            }\n\n            glyph.points = points;\n        } else {\n            glyph.points = [];\n        }\n    } else if (glyph.numberOfContours === 0) {\n        glyph.points = [];\n    } else {\n        glyph.isComposite = true;\n        glyph.points = [];\n        glyph.components = [];\n        let moreComponents = true;\n        while (moreComponents) {\n            flags = p.parseUShort();\n            const component = {\n                glyphIndex: p.parseUShort(),\n                xScale: 1,\n                scale01: 0,\n                scale10: 0,\n                yScale: 1,\n                dx: 0,\n                dy: 0\n            };\n            if ((flags & 1) > 0) {\n                // The arguments are words\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseShort();\n                    component.dy = p.parseShort();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n                }\n\n            } else {\n                // The arguments are bytes\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseChar();\n                    component.dy = p.parseChar();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseByte(), p.parseByte()];\n                }\n            }\n\n            if ((flags & 8) > 0) {\n                // We have a scale\n                component.xScale = component.yScale = p.parseF2Dot14();\n            } else if ((flags & 64) > 0) {\n                // We have an X / Y scale\n                component.xScale = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            } else if ((flags & 128) > 0) {\n                // We have a 2x2 transformation\n                component.xScale = p.parseF2Dot14();\n                component.scale01 = p.parseF2Dot14();\n                component.scale10 = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            }\n\n            glyph.components.push(component);\n            moreComponents = !!(flags & 32);\n        }\n        if (flags & 0x100) {\n            // We have instructions\n            glyph.instructionLength = p.parseUShort();\n            glyph.instructions = [];\n            for (let i = 0; i < glyph.instructionLength; i += 1) {\n                glyph.instructions.push(p.parseByte());\n            }\n        }\n    }\n}\n\n// Transform an array of points and return a new array.\nfunction transformPoints(points, transform) {\n    const newPoints = [];\n    for (let i = 0; i < points.length; i += 1) {\n        const pt = points[i];\n        const newPt = {\n            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n            onCurve: pt.onCurve,\n            lastPointOfContour: pt.lastPointOfContour\n        };\n        newPoints.push(newPt);\n    }\n\n    return newPoints;\n}\n\nfunction getContours(points) {\n    const contours = [];\n    let currentContour = [];\n    for (let i = 0; i < points.length; i += 1) {\n        const pt = points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n}\n\n// Convert the TrueType glyph outline to a Path.\nfunction getPath(points) {\n    const p = new _path__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n    if (!points) {\n        return p;\n    }\n\n    const contours = getContours(points);\n\n    for (let contourIndex = 0; contourIndex < contours.length; ++contourIndex) {\n        const contour = contours[contourIndex];\n\n        let prev = null;\n        let curr = contour[contour.length - 1];\n        let next = contour[0];\n\n        if (curr.onCurve) {\n            p.moveTo(curr.x, curr.y);\n        } else {\n            if (next.onCurve) {\n                p.moveTo(next.x, next.y);\n            } else {\n                // If both first and last points are off-curve, start at their middle.\n                const start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};\n                p.moveTo(start.x, start.y);\n            }\n        }\n\n        for (let i = 0; i < contour.length; ++i) {\n            prev = curr;\n            curr = next;\n            next = contour[(i + 1) % contour.length];\n\n            if (curr.onCurve) {\n                // This is a straight line.\n                p.lineTo(curr.x, curr.y);\n            } else {\n                let prev2 = prev;\n                let next2 = next;\n\n                if (!prev.onCurve) {\n                    prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };\n                }\n\n                if (!next.onCurve) {\n                    next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n                }\n\n                p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n            }\n        }\n\n        p.closePath();\n    }\n    return p;\n}\n\nfunction buildPath(glyphs, glyph) {\n    if (glyph.isComposite) {\n        for (let j = 0; j < glyph.components.length; j += 1) {\n            const component = glyph.components[j];\n            const componentGlyph = glyphs.get(component.glyphIndex);\n            // Force the ttfGlyphLoader to parse the glyph.\n            componentGlyph.getPath();\n            if (componentGlyph.points) {\n                let transformedPoints;\n                if (component.matchedPoints === undefined) {\n                    // component positioned by offset\n                    transformedPoints = transformPoints(componentGlyph.points, component);\n                } else {\n                    // component positioned by matched points\n                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||\n                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {\n                        throw Error('Matched points out of range in ' + glyph.name);\n                    }\n                    const firstPt = glyph.points[component.matchedPoints[0]];\n                    let secondPt = componentGlyph.points[component.matchedPoints[1]];\n                    const transform = {\n                        xScale: component.xScale, scale01: component.scale01,\n                        scale10: component.scale10, yScale: component.yScale,\n                        dx: 0, dy: 0\n                    };\n                    secondPt = transformPoints([secondPt], transform)[0];\n                    transform.dx = firstPt.x - secondPt.x;\n                    transform.dy = firstPt.y - secondPt.y;\n                    transformedPoints = transformPoints(componentGlyph.points, transform);\n                }\n                glyph.points = glyph.points.concat(transformedPoints);\n            }\n        }\n    }\n\n    return getPath(glyph.points);\n}\n\n// Parse all the glyphs according to the offsets from the `loca` table.\nfunction parseGlyfTable(data, start, loca, font) {\n    const glyphs = new _glyphset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].GlyphSet(font);\n\n    // The last element of the loca table is invalid.\n    for (let i = 0; i < loca.length - 1; i += 1) {\n        const offset = loca[i];\n        const nextOffset = loca[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, _glyphset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, _glyphset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].glyphLoader(font, i));\n        }\n    }\n\n    return glyphs;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ getPath, parse: parseGlyfTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/glyf.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/gpos.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/gpos.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `GPOS` table contains kerning pairs, among other things.\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos\n\n\n\n\n\nconst subtableParsers = new Array(10);         // subtableParsers[0] is unused\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable\n// this = Parser instance\nsubtableParsers[1] = function parseLookup1() {\n    const start = this.offset + this.relativeOffset;\n    const posformat = this.parseUShort();\n    if (posformat === 1) {\n        return {\n            posFormat: 1,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            value: this.parseValueRecord()\n        };\n    } else if (posformat === 2) {\n        return {\n            posFormat: 2,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            values: this.parseValueRecordList()\n        };\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(false, '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');\n};\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable\nsubtableParsers[2] = function parseLookup2() {\n    const start = this.offset + this.relativeOffset;\n    const posFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(posFormat === 1 || posFormat === 2, '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.');\n    const coverage = this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage);\n    const valueFormat1 = this.parseUShort();\n    const valueFormat2 = this.parseUShort();\n    if (posFormat === 1) {\n        // Adjustments for Glyph Pairs\n        return {\n            posFormat: posFormat,\n            coverage: coverage,\n            valueFormat1: valueFormat1,\n            valueFormat2: valueFormat2,\n            pairSets: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].list(function() {\n                return {        // pairValueRecord\n                    secondGlyph: this.parseUShort(),\n                    value1: this.parseValueRecord(valueFormat1),\n                    value2: this.parseValueRecord(valueFormat2)\n                };\n            })))\n        };\n    } else if (posFormat === 2) {\n        const classDef1 = this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef);\n        const classDef2 = this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef);\n        const class1Count = this.parseUShort();\n        const class2Count = this.parseUShort();\n        return {\n            // Class Pair Adjustment\n            posFormat: posFormat,\n            coverage: coverage,\n            valueFormat1: valueFormat1,\n            valueFormat2: valueFormat2,\n            classDef1: classDef1,\n            classDef2: classDef2,\n            class1Count: class1Count,\n            class2Count: class2Count,\n            classRecords: this.parseList(class1Count, _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].list(class2Count, function() {\n                return {\n                    value1: this.parseValueRecord(valueFormat1),\n                    value2: this.parseValueRecord(valueFormat2)\n                };\n            }))\n        };\n    }\n};\n\nsubtableParsers[3] = function parseLookup3() { return { error: 'GPOS Lookup 3 not supported' }; };\nsubtableParsers[4] = function parseLookup4() { return { error: 'GPOS Lookup 4 not supported' }; };\nsubtableParsers[5] = function parseLookup5() { return { error: 'GPOS Lookup 5 not supported' }; };\nsubtableParsers[6] = function parseLookup6() { return { error: 'GPOS Lookup 6 not supported' }; };\nsubtableParsers[7] = function parseLookup7() { return { error: 'GPOS Lookup 7 not supported' }; };\nsubtableParsers[8] = function parseLookup8() { return { error: 'GPOS Lookup 8 not supported' }; };\nsubtableParsers[9] = function parseLookup9() { return { error: 'GPOS Lookup 9 not supported' }; };\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos\nfunction parseGposTable(data, start) {\n    start = start || 0;\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"](data, start);\n    const tableVersion = p.parseVersion(1);\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GPOS table version ' + tableVersion);\n\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers)\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers),\n            variations: p.parseFeatureVariationsList()\n        };\n    }\n\n}\n\n// GPOS Writing //////////////////////////////////////////////\n// NOT SUPPORTED\nconst subtableMakers = new Array(10);\n\nfunction makeGposTable(gpos) {\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('GPOS', [\n        {name: 'version', type: 'ULONG', value: 0x10000},\n        {name: 'scripts', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ScriptList(gpos.scripts)},\n        {name: 'features', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].FeatureList(gpos.features)},\n        {name: 'lookups', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].LookupList(gpos.lookups, subtableMakers)}\n    ]);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseGposTable, make: makeGposTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/gpos.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/gsub.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/gsub.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `GSUB` table contains ligatures, among other things.\n// https://www.microsoft.com/typography/OTSPEC/gsub.htm\n\n\n\n\n\nconst subtableParsers = new Array(9);         // subtableParsers[0] is unused\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\nsubtableParsers[1] = function parseLookup1() {\n    const start = this.offset + this.relativeOffset;\n    const substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            deltaGlyphId: this.parseUShort()\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            substitute: this.parseOffset16List()\n        };\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\nsubtableParsers[2] = function parseLookup2() {\n    const substFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n        sequences: this.parseListOfLists()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\nsubtableParsers[3] = function parseLookup3() {\n    const substFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n        alternateSets: this.parseListOfLists()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\nsubtableParsers[4] = function parseLookup4() {\n    const substFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n        ligatureSets: this.parseListOfLists(function() {\n            return {\n                ligGlyph: this.parseUShort(),\n                components: this.parseUShortList(this.parseUShort() - 1)\n            };\n        })\n    };\n};\n\nconst lookupRecordDesc = {\n    sequenceIndex: _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].uShort,\n    lookupListIndex: _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].uShort\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\nsubtableParsers[5] = function parseLookup5() {\n    const start = this.offset + this.relativeOffset;\n    const substFormat = this.parseUShort();\n\n    if (substFormat === 1) {\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            ruleSets: this.parseListOfLists(function() {\n                const glyphCount = this.parseUShort();\n                const substCount = this.parseUShort();\n                return {\n                    input: this.parseUShortList(glyphCount - 1),\n                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            classDef: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef),\n            classSets: this.parseListOfLists(function() {\n                const glyphCount = this.parseUShort();\n                const substCount = this.parseUShort();\n                return {\n                    classes: this.parseUShortList(glyphCount - 1),\n                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        const glyphCount = this.parseUShort();\n        const substCount = this.parseUShort();\n        return {\n            substFormat: substFormat,\n            coverages: this.parseList(glyphCount, _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n        };\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\nsubtableParsers[6] = function parseLookup6() {\n    const start = this.offset + this.relativeOffset;\n    const substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            chainRuleSets: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            backtrackClassDef: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef),\n            inputClassDef: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef),\n            lookaheadClassDef: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef),\n            chainClassSet: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        return {\n            substFormat: 3,\n            backtrackCoverage: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n            inputCoverage: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n            lookaheadCoverage: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n            lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\nsubtableParsers[7] = function parseLookup7() {\n    // Extension Substitution subtable\n    const substFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');\n    const extensionLookupType = this.parseUShort();\n    const extensionParser = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"](this.data, this.offset + this.parseULong());\n    return {\n        substFormat: 1,\n        lookupType: extensionLookupType,\n        extension: subtableParsers[extensionLookupType].call(extensionParser)\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\nsubtableParsers[8] = function parseLookup8() {\n    const substFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n        backtrackCoverage: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n        lookaheadCoverage: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n        substitutes: this.parseUShortList()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/gsub.htm\nfunction parseGsubTable(data, start) {\n    start = start || 0;\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"](data, start);\n    const tableVersion = p.parseVersion(1);\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers)\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers),\n            variations: p.parseFeatureVariationsList()\n        };\n    }\n\n}\n\n// GSUB Writing //////////////////////////////////////////////\nconst subtableMakers = new Array(9);\n\nsubtableMakers[1] = function makeLookup1(subtable) {\n    if (subtable.substFormat === 1) {\n        return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('substitutionTable', [\n            {name: 'substFormat', type: 'USHORT', value: 1},\n            {name: 'coverage', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Coverage(subtable.coverage)},\n            {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}\n        ]);\n    } else {\n        return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('substitutionTable', [\n            {name: 'substFormat', type: 'USHORT', value: 2},\n            {name: 'coverage', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Coverage(subtable.coverage)}\n        ].concat(_table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ushortList('substitute', subtable.substitute)));\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fail('Lookup type 1 substFormat must be 1 or 2.');\n};\n\nsubtableMakers[3] = function makeLookup3(subtable) {\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('substitutionTable', [\n        {name: 'substFormat', type: 'USHORT', value: 1},\n        {name: 'coverage', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Coverage(subtable.coverage)}\n    ].concat(_table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].tableList('altSet', subtable.alternateSets, function(alternateSet) {\n        return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('alternateSetTable', _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ushortList('alternate', alternateSet));\n    })));\n};\n\nsubtableMakers[4] = function makeLookup4(subtable) {\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('substitutionTable', [\n        {name: 'substFormat', type: 'USHORT', value: 1},\n        {name: 'coverage', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Coverage(subtable.coverage)}\n    ].concat(_table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {\n        return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('ligatureSetTable', _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].tableList('ligature', ligatureSet, function(ligature) {\n            return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('ligatureTable',\n                [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]\n                .concat(_table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ushortList('component', ligature.components, ligature.components.length + 1))\n            );\n        }));\n    })));\n};\n\nfunction makeGsubTable(gsub) {\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('GSUB', [\n        {name: 'version', type: 'ULONG', value: 0x10000},\n        {name: 'scripts', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ScriptList(gsub.scripts)},\n        {name: 'features', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].FeatureList(gsub.features)},\n        {name: 'lookups', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].LookupList(gsub.lookups, subtableMakers)}\n    ]);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseGsubTable, make: makeGsubTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/gsub.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/head.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/head.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `head` table contains global information about the font.\n// https://www.microsoft.com/typography/OTSPEC/head.htm\n\n\n\n\n\n// Parse the header `head` table\nfunction parseHeadTable(data, start) {\n    const head = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    head.version = p.parseVersion();\n    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n    head.checkSumAdjustment = p.parseULong();\n    head.magicNumber = p.parseULong();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');\n    head.flags = p.parseUShort();\n    head.unitsPerEm = p.parseUShort();\n    head.created = p.parseLongDateTime();\n    head.modified = p.parseLongDateTime();\n    head.xMin = p.parseShort();\n    head.yMin = p.parseShort();\n    head.xMax = p.parseShort();\n    head.yMax = p.parseShort();\n    head.macStyle = p.parseUShort();\n    head.lowestRecPPEM = p.parseUShort();\n    head.fontDirectionHint = p.parseShort();\n    head.indexToLocFormat = p.parseShort();\n    head.glyphDataFormat = p.parseShort();\n    return head;\n}\n\nfunction makeHeadTable(options) {\n    // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970\n    const timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;\n    let createdTimestamp = timestamp;\n\n    if (options.createdTimestamp) {\n        createdTimestamp = options.createdTimestamp + 2082844800;\n    }\n\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('head', [\n        {name: 'version', type: 'FIXED', value: 0x00010000},\n        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},\n        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},\n        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},\n        {name: 'flags', type: 'USHORT', value: 0},\n        {name: 'unitsPerEm', type: 'USHORT', value: 1000},\n        {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},\n        {name: 'modified', type: 'LONGDATETIME', value: timestamp},\n        {name: 'xMin', type: 'SHORT', value: 0},\n        {name: 'yMin', type: 'SHORT', value: 0},\n        {name: 'xMax', type: 'SHORT', value: 0},\n        {name: 'yMax', type: 'SHORT', value: 0},\n        {name: 'macStyle', type: 'USHORT', value: 0},\n        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},\n        {name: 'fontDirectionHint', type: 'SHORT', value: 2},\n        {name: 'indexToLocFormat', type: 'SHORT', value: 0},\n        {name: 'glyphDataFormat', type: 'SHORT', value: 0}\n    ], options);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseHeadTable, make: makeHeadTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/head.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/hhea.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/hhea.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `hhea` table contains information for horizontal layout.\n// https://www.microsoft.com/typography/OTSPEC/hhea.htm\n\n\n\n\n// Parse the horizontal header `hhea` table\nfunction parseHheaTable(data, start) {\n    const hhea = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Parser(data, start);\n    hhea.version = p.parseVersion();\n    hhea.ascender = p.parseShort();\n    hhea.descender = p.parseShort();\n    hhea.lineGap = p.parseShort();\n    hhea.advanceWidthMax = p.parseUShort();\n    hhea.minLeftSideBearing = p.parseShort();\n    hhea.minRightSideBearing = p.parseShort();\n    hhea.xMaxExtent = p.parseShort();\n    hhea.caretSlopeRise = p.parseShort();\n    hhea.caretSlopeRun = p.parseShort();\n    hhea.caretOffset = p.parseShort();\n    p.relativeOffset += 8;\n    hhea.metricDataFormat = p.parseShort();\n    hhea.numberOfHMetrics = p.parseUShort();\n    return hhea;\n}\n\nfunction makeHheaTable(options) {\n    return new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Table('hhea', [\n        {name: 'version', type: 'FIXED', value: 0x00010000},\n        {name: 'ascender', type: 'FWORD', value: 0},\n        {name: 'descender', type: 'FWORD', value: 0},\n        {name: 'lineGap', type: 'FWORD', value: 0},\n        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},\n        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},\n        {name: 'minRightSideBearing', type: 'FWORD', value: 0},\n        {name: 'xMaxExtent', type: 'FWORD', value: 0},\n        {name: 'caretSlopeRise', type: 'SHORT', value: 1},\n        {name: 'caretSlopeRun', type: 'SHORT', value: 0},\n        {name: 'caretOffset', type: 'SHORT', value: 0},\n        {name: 'reserved1', type: 'SHORT', value: 0},\n        {name: 'reserved2', type: 'SHORT', value: 0},\n        {name: 'reserved3', type: 'SHORT', value: 0},\n        {name: 'reserved4', type: 'SHORT', value: 0},\n        {name: 'metricDataFormat', type: 'SHORT', value: 0},\n        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}\n    ], options);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseHheaTable, make: makeHheaTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/hhea.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/hmtx.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/hmtx.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `hmtx` table contains the horizontal metrics for all glyphs.\n// https://www.microsoft.com/typography/OTSPEC/hmtx.htm\n\n\n\n\n// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\nfunction parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {\n    let advanceWidth;\n    let leftSideBearing;\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Parser(data, start);\n    for (let i = 0; i < numGlyphs; i += 1) {\n        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n        if (i < numMetrics) {\n            advanceWidth = p.parseUShort();\n            leftSideBearing = p.parseShort();\n        }\n\n        const glyph = glyphs.get(i);\n        glyph.advanceWidth = advanceWidth;\n        glyph.leftSideBearing = leftSideBearing;\n    }\n}\n\nfunction makeHmtxTable(glyphs) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Table('hmtx', []);\n    for (let i = 0; i < glyphs.length; i += 1) {\n        const glyph = glyphs.get(i);\n        const advanceWidth = glyph.advanceWidth || 0;\n        const leftSideBearing = glyph.leftSideBearing || 0;\n        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});\n        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});\n    }\n\n    return t;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseHmtxTable, make: makeHmtxTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/hmtx.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/kern.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/kern.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n// The `kern` table contains kerning pairs.\n// Note that some fonts use the GPOS OpenType layout table to specify kerning.\n// https://www.microsoft.com/typography/OTSPEC/kern.htm\n\n\n\n\nfunction parseWindowsKernTable(p) {\n    const pairs = {};\n    // Skip nTables.\n    p.skip('uShort');\n    const subtableVersion = p.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(subtableVersion === 0, 'Unsupported kern sub-table version.');\n    // Skip subtableLength, subtableCoverage\n    p.skip('uShort', 2);\n    const nPairs = p.parseUShort();\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n    for (let i = 0; i < nPairs; i += 1) {\n        const leftIndex = p.parseUShort();\n        const rightIndex = p.parseUShort();\n        const value = p.parseShort();\n        pairs[leftIndex + ',' + rightIndex] = value;\n    }\n    return pairs;\n}\n\nfunction parseMacKernTable(p) {\n    const pairs = {};\n    // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n    // Skip the rest.\n    p.skip('uShort');\n    const nTables = p.parseULong();\n    //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n    if (nTables > 1) {\n        console.warn('Only the first kern subtable is supported.');\n    }\n    p.skip('uLong');\n    const coverage = p.parseUShort();\n    const subtableVersion = coverage & 0xFF;\n    p.skip('uShort');\n    if (subtableVersion === 0) {\n        const nPairs = p.parseUShort();\n        // Skip searchRange, entrySelector, rangeShift.\n        p.skip('uShort', 3);\n        for (let i = 0; i < nPairs; i += 1) {\n            const leftIndex = p.parseUShort();\n            const rightIndex = p.parseUShort();\n            const value = p.parseShort();\n            pairs[leftIndex + ',' + rightIndex] = value;\n        }\n    }\n    return pairs;\n}\n\n// Parse the `kern` table which contains kerning pairs.\nfunction parseKernTable(data, start) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    const tableVersion = p.parseUShort();\n    if (tableVersion === 0) {\n        return parseWindowsKernTable(p);\n    } else if (tableVersion === 1) {\n        return parseMacKernTable(p);\n    } else {\n        throw new Error('Unsupported kern table version (' + tableVersion + ').');\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseKernTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/kern.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/loca.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/loca.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n// The `loca` table stores the offsets to the locations of the glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/loca.htm\n\n\n\n// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n// relative to the beginning of the glyphData table.\n// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n// version where offsets are stored as uLongs. The `head` table specifies which version to use\n// (under indexToLocFormat).\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Parser(data, start);\n    const parseFn = shortVersion ? p.parseUShort : p.parseULong;\n    // There is an extra entry after the last index element to compute the length of the last glyph.\n    // That's why we use numGlyphs + 1.\n    const glyphOffsets = [];\n    for (let i = 0; i < numGlyphs + 1; i += 1) {\n        let glyphOffset = parseFn.call(p);\n        if (shortVersion) {\n            // The short table version stores the actual offset divided by 2.\n            glyphOffset *= 2;\n        }\n\n        glyphOffsets.push(glyphOffset);\n    }\n\n    return glyphOffsets;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseLocaTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/loca.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/ltag.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/ltag.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `ltag` table stores IETF BCP-47 language tags. It allows supporting\n// languages for which TrueType does not assign a numeric code.\n// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6ltag.html\n// http://www.w3.org/International/articles/language-tags/\n// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n\n\n\n\n\nfunction makeLtagTable(tags) {\n    const result = new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('ltag', [\n        {name: 'version', type: 'ULONG', value: 1},\n        {name: 'flags', type: 'ULONG', value: 0},\n        {name: 'numTags', type: 'ULONG', value: tags.length}\n    ]);\n\n    let stringPool = '';\n    const stringPoolOffset = 12 + tags.length * 4;\n    for (let i = 0; i < tags.length; ++i) {\n        let pos = stringPool.indexOf(tags[i]);\n        if (pos < 0) {\n            pos = stringPool.length;\n            stringPool += tags[i];\n        }\n\n        result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});\n        result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});\n    }\n\n    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n    return result;\n}\n\nfunction parseLtagTable(data, start) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    const tableVersion = p.parseULong();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(tableVersion === 1, 'Unsupported ltag table version.');\n    // The 'ltag' specification does not define any flags; skip the field.\n    p.skip('uLong', 1);\n    const numTags = p.parseULong();\n\n    const tags = [];\n    for (let i = 0; i < numTags; i++) {\n        let tag = '';\n        const offset = start + p.parseUShort();\n        const length = p.parseUShort();\n        for (let j = offset; j < offset + length; ++j) {\n            tag += String.fromCharCode(data.getInt8(j));\n        }\n\n        tags.push(tag);\n    }\n\n    return tags;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ make: makeLtagTable, parse: parseLtagTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/ltag.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/maxp.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/maxp.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `maxp` table establishes the memory requirements for the font.\n// We need it just to get the number of glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/maxp.htm\n\n\n\n\n// Parse the maximum profile `maxp` table.\nfunction parseMaxpTable(data, start) {\n    const maxp = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Parser(data, start);\n    maxp.version = p.parseVersion();\n    maxp.numGlyphs = p.parseUShort();\n    if (maxp.version === 1.0) {\n        maxp.maxPoints = p.parseUShort();\n        maxp.maxContours = p.parseUShort();\n        maxp.maxCompositePoints = p.parseUShort();\n        maxp.maxCompositeContours = p.parseUShort();\n        maxp.maxZones = p.parseUShort();\n        maxp.maxTwilightPoints = p.parseUShort();\n        maxp.maxStorage = p.parseUShort();\n        maxp.maxFunctionDefs = p.parseUShort();\n        maxp.maxInstructionDefs = p.parseUShort();\n        maxp.maxStackElements = p.parseUShort();\n        maxp.maxSizeOfInstructions = p.parseUShort();\n        maxp.maxComponentElements = p.parseUShort();\n        maxp.maxComponentDepth = p.parseUShort();\n    }\n\n    return maxp;\n}\n\nfunction makeMaxpTable(numGlyphs) {\n    return new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Table('maxp', [\n        {name: 'version', type: 'FIXED', value: 0x00005000},\n        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}\n    ]);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseMaxpTable, make: makeMaxpTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/maxp.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/meta.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/meta.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */ \"../../node_modules/opentype.js/src/types.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `GPOS` table contains kerning pairs, among other things.\n// https://www.microsoft.com/typography/OTSPEC/gpos.htm\n\n\n\n\n\n\n// Parse the metadata `meta` table.\n// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html\nfunction parseMetaTable(data, start) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n    const tableVersion = p.parseULong();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(tableVersion === 1, 'Unsupported META table version.');\n    p.parseULong(); // flags - currently unused and set to 0\n    p.parseULong(); // tableOffset\n    const numDataMaps = p.parseULong();\n\n    const tags = {};\n    for (let i = 0; i < numDataMaps; i++) {\n        const tag = p.parseTag();\n        const dataOffset = p.parseULong();\n        const dataLength = p.parseULong();\n        const text = _types__WEBPACK_IMPORTED_MODULE_1__[\"decode\"].UTF8(data, start + dataOffset, dataLength);\n\n        tags[tag] = text;\n    }\n    return tags;\n}\n\nfunction makeMetaTable(tags) {\n    const numTags = Object.keys(tags).length;\n    let stringPool = '';\n    const stringPoolOffset = 16 + numTags * 12;\n\n    const result = new _table__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Table('meta', [\n        {name: 'version', type: 'ULONG', value: 1},\n        {name: 'flags', type: 'ULONG', value: 0},\n        {name: 'offset', type: 'ULONG', value: stringPoolOffset},\n        {name: 'numTags', type: 'ULONG', value: numTags}\n    ]);\n\n    for (let tag in tags) {\n        const pos = stringPool.length;\n        stringPool += tags[tag];\n\n        result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});\n        result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});\n        result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});\n    }\n\n    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n\n    return result;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseMetaTable, make: makeMetaTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/meta.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/name.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/name.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"../../node_modules/opentype.js/src/types.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `name` naming table.\n// https://www.microsoft.com/typography/OTSPEC/name.htm\n\n\n\n\n\n// NameIDs for the name table.\nconst nameTableNames = [\n    'copyright',              // 0\n    'fontFamily',             // 1\n    'fontSubfamily',          // 2\n    'uniqueID',               // 3\n    'fullName',               // 4\n    'version',                // 5\n    'postScriptName',         // 6\n    'trademark',              // 7\n    'manufacturer',           // 8\n    'designer',               // 9\n    'description',            // 10\n    'manufacturerURL',        // 11\n    'designerURL',            // 12\n    'license',                // 13\n    'licenseURL',             // 14\n    'reserved',               // 15\n    'preferredFamily',        // 16\n    'preferredSubfamily',     // 17\n    'compatibleFullName',     // 18\n    'sampleText',             // 19\n    'postScriptFindFontName', // 20\n    'wwsFamily',              // 21\n    'wwsSubfamily'            // 22\n];\n\nconst macLanguages = {\n    0: 'en',\n    1: 'fr',\n    2: 'de',\n    3: 'it',\n    4: 'nl',\n    5: 'sv',\n    6: 'es',\n    7: 'da',\n    8: 'pt',\n    9: 'no',\n    10: 'he',\n    11: 'ja',\n    12: 'ar',\n    13: 'fi',\n    14: 'el',\n    15: 'is',\n    16: 'mt',\n    17: 'tr',\n    18: 'hr',\n    19: 'zh-Hant',\n    20: 'ur',\n    21: 'hi',\n    22: 'th',\n    23: 'ko',\n    24: 'lt',\n    25: 'pl',\n    26: 'hu',\n    27: 'es',\n    28: 'lv',\n    29: 'se',\n    30: 'fo',\n    31: 'fa',\n    32: 'ru',\n    33: 'zh',\n    34: 'nl-BE',\n    35: 'ga',\n    36: 'sq',\n    37: 'ro',\n    38: 'cz',\n    39: 'sk',\n    40: 'si',\n    41: 'yi',\n    42: 'sr',\n    43: 'mk',\n    44: 'bg',\n    45: 'uk',\n    46: 'be',\n    47: 'uz',\n    48: 'kk',\n    49: 'az-Cyrl',\n    50: 'az-Arab',\n    51: 'hy',\n    52: 'ka',\n    53: 'mo',\n    54: 'ky',\n    55: 'tg',\n    56: 'tk',\n    57: 'mn-CN',\n    58: 'mn',\n    59: 'ps',\n    60: 'ks',\n    61: 'ku',\n    62: 'sd',\n    63: 'bo',\n    64: 'ne',\n    65: 'sa',\n    66: 'mr',\n    67: 'bn',\n    68: 'as',\n    69: 'gu',\n    70: 'pa',\n    71: 'or',\n    72: 'ml',\n    73: 'kn',\n    74: 'ta',\n    75: 'te',\n    76: 'si',\n    77: 'my',\n    78: 'km',\n    79: 'lo',\n    80: 'vi',\n    81: 'id',\n    82: 'tl',\n    83: 'ms',\n    84: 'ms-Arab',\n    85: 'am',\n    86: 'ti',\n    87: 'om',\n    88: 'so',\n    89: 'sw',\n    90: 'rw',\n    91: 'rn',\n    92: 'ny',\n    93: 'mg',\n    94: 'eo',\n    128: 'cy',\n    129: 'eu',\n    130: 'ca',\n    131: 'la',\n    132: 'qu',\n    133: 'gn',\n    134: 'ay',\n    135: 'tt',\n    136: 'ug',\n    137: 'dz',\n    138: 'jv',\n    139: 'su',\n    140: 'gl',\n    141: 'af',\n    142: 'br',\n    143: 'iu',\n    144: 'gd',\n    145: 'gv',\n    146: 'ga',\n    147: 'to',\n    148: 'el-polyton',\n    149: 'kl',\n    150: 'az',\n    151: 'nn'\n};\n\n// MacOS language ID → MacOS script ID\n//\n// Note that the script ID is not sufficient to determine what encoding\n// to use in TrueType files. For some languages, MacOS used a modification\n// of a mainstream script. For example, an Icelandic name would be stored\n// with smRoman in the TrueType naming table, but the actual encoding\n// is a special Icelandic version of the normal Macintosh Roman encoding.\n// As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal\n// Syllables but MacOS had run out of available script codes, so this was\n// done as a (pretty radical) \"modification\" of Ethiopic.\n//\n// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nconst macLanguageToScript = {\n    0: 0,  // langEnglish → smRoman\n    1: 0,  // langFrench → smRoman\n    2: 0,  // langGerman → smRoman\n    3: 0,  // langItalian → smRoman\n    4: 0,  // langDutch → smRoman\n    5: 0,  // langSwedish → smRoman\n    6: 0,  // langSpanish → smRoman\n    7: 0,  // langDanish → smRoman\n    8: 0,  // langPortuguese → smRoman\n    9: 0,  // langNorwegian → smRoman\n    10: 5,  // langHebrew → smHebrew\n    11: 1,  // langJapanese → smJapanese\n    12: 4,  // langArabic → smArabic\n    13: 0,  // langFinnish → smRoman\n    14: 6,  // langGreek → smGreek\n    15: 0,  // langIcelandic → smRoman (modified)\n    16: 0,  // langMaltese → smRoman\n    17: 0,  // langTurkish → smRoman (modified)\n    18: 0,  // langCroatian → smRoman (modified)\n    19: 2,  // langTradChinese → smTradChinese\n    20: 4,  // langUrdu → smArabic\n    21: 9,  // langHindi → smDevanagari\n    22: 21,  // langThai → smThai\n    23: 3,  // langKorean → smKorean\n    24: 29,  // langLithuanian → smCentralEuroRoman\n    25: 29,  // langPolish → smCentralEuroRoman\n    26: 29,  // langHungarian → smCentralEuroRoman\n    27: 29,  // langEstonian → smCentralEuroRoman\n    28: 29,  // langLatvian → smCentralEuroRoman\n    29: 0,  // langSami → smRoman\n    30: 0,  // langFaroese → smRoman (modified)\n    31: 4,  // langFarsi → smArabic (modified)\n    32: 7,  // langRussian → smCyrillic\n    33: 25,  // langSimpChinese → smSimpChinese\n    34: 0,  // langFlemish → smRoman\n    35: 0,  // langIrishGaelic → smRoman (modified)\n    36: 0,  // langAlbanian → smRoman\n    37: 0,  // langRomanian → smRoman (modified)\n    38: 29,  // langCzech → smCentralEuroRoman\n    39: 29,  // langSlovak → smCentralEuroRoman\n    40: 0,  // langSlovenian → smRoman (modified)\n    41: 5,  // langYiddish → smHebrew\n    42: 7,  // langSerbian → smCyrillic\n    43: 7,  // langMacedonian → smCyrillic\n    44: 7,  // langBulgarian → smCyrillic\n    45: 7,  // langUkrainian → smCyrillic (modified)\n    46: 7,  // langByelorussian → smCyrillic\n    47: 7,  // langUzbek → smCyrillic\n    48: 7,  // langKazakh → smCyrillic\n    49: 7,  // langAzerbaijani → smCyrillic\n    50: 4,  // langAzerbaijanAr → smArabic\n    51: 24,  // langArmenian → smArmenian\n    52: 23,  // langGeorgian → smGeorgian\n    53: 7,  // langMoldavian → smCyrillic\n    54: 7,  // langKirghiz → smCyrillic\n    55: 7,  // langTajiki → smCyrillic\n    56: 7,  // langTurkmen → smCyrillic\n    57: 27,  // langMongolian → smMongolian\n    58: 7,  // langMongolianCyr → smCyrillic\n    59: 4,  // langPashto → smArabic\n    60: 4,  // langKurdish → smArabic\n    61: 4,  // langKashmiri → smArabic\n    62: 4,  // langSindhi → smArabic\n    63: 26,  // langTibetan → smTibetan\n    64: 9,  // langNepali → smDevanagari\n    65: 9,  // langSanskrit → smDevanagari\n    66: 9,  // langMarathi → smDevanagari\n    67: 13,  // langBengali → smBengali\n    68: 13,  // langAssamese → smBengali\n    69: 11,  // langGujarati → smGujarati\n    70: 10,  // langPunjabi → smGurmukhi\n    71: 12,  // langOriya → smOriya\n    72: 17,  // langMalayalam → smMalayalam\n    73: 16,  // langKannada → smKannada\n    74: 14,  // langTamil → smTamil\n    75: 15,  // langTelugu → smTelugu\n    76: 18,  // langSinhalese → smSinhalese\n    77: 19,  // langBurmese → smBurmese\n    78: 20,  // langKhmer → smKhmer\n    79: 22,  // langLao → smLao\n    80: 30,  // langVietnamese → smVietnamese\n    81: 0,  // langIndonesian → smRoman\n    82: 0,  // langTagalog → smRoman\n    83: 0,  // langMalayRoman → smRoman\n    84: 4,  // langMalayArabic → smArabic\n    85: 28,  // langAmharic → smEthiopic\n    86: 28,  // langTigrinya → smEthiopic\n    87: 28,  // langOromo → smEthiopic\n    88: 0,  // langSomali → smRoman\n    89: 0,  // langSwahili → smRoman\n    90: 0,  // langKinyarwanda → smRoman\n    91: 0,  // langRundi → smRoman\n    92: 0,  // langNyanja → smRoman\n    93: 0,  // langMalagasy → smRoman\n    94: 0,  // langEsperanto → smRoman\n    128: 0,  // langWelsh → smRoman (modified)\n    129: 0,  // langBasque → smRoman\n    130: 0,  // langCatalan → smRoman\n    131: 0,  // langLatin → smRoman\n    132: 0,  // langQuechua → smRoman\n    133: 0,  // langGuarani → smRoman\n    134: 0,  // langAymara → smRoman\n    135: 7,  // langTatar → smCyrillic\n    136: 4,  // langUighur → smArabic\n    137: 26,  // langDzongkha → smTibetan\n    138: 0,  // langJavaneseRom → smRoman\n    139: 0,  // langSundaneseRom → smRoman\n    140: 0,  // langGalician → smRoman\n    141: 0,  // langAfrikaans → smRoman\n    142: 0,  // langBreton → smRoman (modified)\n    143: 28,  // langInuktitut → smEthiopic (modified)\n    144: 0,  // langScottishGaelic → smRoman (modified)\n    145: 0,  // langManxGaelic → smRoman (modified)\n    146: 0,  // langIrishGaelicScript → smRoman (modified)\n    147: 0,  // langTongan → smRoman\n    148: 6,  // langGreekAncient → smRoman\n    149: 0,  // langGreenlandic → smRoman\n    150: 0,  // langAzerbaijanRoman → smRoman\n    151: 0   // langNynorsk → smRoman\n};\n\n// While Microsoft indicates a region/country for all its language\n// IDs, we omit the region code if it's equal to the \"most likely\n// region subtag\" according to Unicode CLDR. For scripts, we omit\n// the subtag if it is equal to the Suppress-Script entry in the\n// IANA language subtag registry for IETF BCP 47.\n//\n// For example, Microsoft states that its language code 0x041A is\n// Croatian in Croatia. We transform this to the BCP 47 language code 'hr'\n// and not 'hr-HR' because Croatia is the default country for Croatian,\n// according to Unicode CLDR. As another example, Microsoft states\n// that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform\n// this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script\n// for the Croatian language, according to IANA.\n//\n// http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html\n// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\nconst windowsLanguages = {\n    0x0436: 'af',\n    0x041C: 'sq',\n    0x0484: 'gsw',\n    0x045E: 'am',\n    0x1401: 'ar-DZ',\n    0x3C01: 'ar-BH',\n    0x0C01: 'ar',\n    0x0801: 'ar-IQ',\n    0x2C01: 'ar-JO',\n    0x3401: 'ar-KW',\n    0x3001: 'ar-LB',\n    0x1001: 'ar-LY',\n    0x1801: 'ary',\n    0x2001: 'ar-OM',\n    0x4001: 'ar-QA',\n    0x0401: 'ar-SA',\n    0x2801: 'ar-SY',\n    0x1C01: 'aeb',\n    0x3801: 'ar-AE',\n    0x2401: 'ar-YE',\n    0x042B: 'hy',\n    0x044D: 'as',\n    0x082C: 'az-Cyrl',\n    0x042C: 'az',\n    0x046D: 'ba',\n    0x042D: 'eu',\n    0x0423: 'be',\n    0x0845: 'bn',\n    0x0445: 'bn-IN',\n    0x201A: 'bs-Cyrl',\n    0x141A: 'bs',\n    0x047E: 'br',\n    0x0402: 'bg',\n    0x0403: 'ca',\n    0x0C04: 'zh-HK',\n    0x1404: 'zh-MO',\n    0x0804: 'zh',\n    0x1004: 'zh-SG',\n    0x0404: 'zh-TW',\n    0x0483: 'co',\n    0x041A: 'hr',\n    0x101A: 'hr-BA',\n    0x0405: 'cs',\n    0x0406: 'da',\n    0x048C: 'prs',\n    0x0465: 'dv',\n    0x0813: 'nl-BE',\n    0x0413: 'nl',\n    0x0C09: 'en-AU',\n    0x2809: 'en-BZ',\n    0x1009: 'en-CA',\n    0x2409: 'en-029',\n    0x4009: 'en-IN',\n    0x1809: 'en-IE',\n    0x2009: 'en-JM',\n    0x4409: 'en-MY',\n    0x1409: 'en-NZ',\n    0x3409: 'en-PH',\n    0x4809: 'en-SG',\n    0x1C09: 'en-ZA',\n    0x2C09: 'en-TT',\n    0x0809: 'en-GB',\n    0x0409: 'en',\n    0x3009: 'en-ZW',\n    0x0425: 'et',\n    0x0438: 'fo',\n    0x0464: 'fil',\n    0x040B: 'fi',\n    0x080C: 'fr-BE',\n    0x0C0C: 'fr-CA',\n    0x040C: 'fr',\n    0x140C: 'fr-LU',\n    0x180C: 'fr-MC',\n    0x100C: 'fr-CH',\n    0x0462: 'fy',\n    0x0456: 'gl',\n    0x0437: 'ka',\n    0x0C07: 'de-AT',\n    0x0407: 'de',\n    0x1407: 'de-LI',\n    0x1007: 'de-LU',\n    0x0807: 'de-CH',\n    0x0408: 'el',\n    0x046F: 'kl',\n    0x0447: 'gu',\n    0x0468: 'ha',\n    0x040D: 'he',\n    0x0439: 'hi',\n    0x040E: 'hu',\n    0x040F: 'is',\n    0x0470: 'ig',\n    0x0421: 'id',\n    0x045D: 'iu',\n    0x085D: 'iu-Latn',\n    0x083C: 'ga',\n    0x0434: 'xh',\n    0x0435: 'zu',\n    0x0410: 'it',\n    0x0810: 'it-CH',\n    0x0411: 'ja',\n    0x044B: 'kn',\n    0x043F: 'kk',\n    0x0453: 'km',\n    0x0486: 'quc',\n    0x0487: 'rw',\n    0x0441: 'sw',\n    0x0457: 'kok',\n    0x0412: 'ko',\n    0x0440: 'ky',\n    0x0454: 'lo',\n    0x0426: 'lv',\n    0x0427: 'lt',\n    0x082E: 'dsb',\n    0x046E: 'lb',\n    0x042F: 'mk',\n    0x083E: 'ms-BN',\n    0x043E: 'ms',\n    0x044C: 'ml',\n    0x043A: 'mt',\n    0x0481: 'mi',\n    0x047A: 'arn',\n    0x044E: 'mr',\n    0x047C: 'moh',\n    0x0450: 'mn',\n    0x0850: 'mn-CN',\n    0x0461: 'ne',\n    0x0414: 'nb',\n    0x0814: 'nn',\n    0x0482: 'oc',\n    0x0448: 'or',\n    0x0463: 'ps',\n    0x0415: 'pl',\n    0x0416: 'pt',\n    0x0816: 'pt-PT',\n    0x0446: 'pa',\n    0x046B: 'qu-BO',\n    0x086B: 'qu-EC',\n    0x0C6B: 'qu',\n    0x0418: 'ro',\n    0x0417: 'rm',\n    0x0419: 'ru',\n    0x243B: 'smn',\n    0x103B: 'smj-NO',\n    0x143B: 'smj',\n    0x0C3B: 'se-FI',\n    0x043B: 'se',\n    0x083B: 'se-SE',\n    0x203B: 'sms',\n    0x183B: 'sma-NO',\n    0x1C3B: 'sms',\n    0x044F: 'sa',\n    0x1C1A: 'sr-Cyrl-BA',\n    0x0C1A: 'sr',\n    0x181A: 'sr-Latn-BA',\n    0x081A: 'sr-Latn',\n    0x046C: 'nso',\n    0x0432: 'tn',\n    0x045B: 'si',\n    0x041B: 'sk',\n    0x0424: 'sl',\n    0x2C0A: 'es-AR',\n    0x400A: 'es-BO',\n    0x340A: 'es-CL',\n    0x240A: 'es-CO',\n    0x140A: 'es-CR',\n    0x1C0A: 'es-DO',\n    0x300A: 'es-EC',\n    0x440A: 'es-SV',\n    0x100A: 'es-GT',\n    0x480A: 'es-HN',\n    0x080A: 'es-MX',\n    0x4C0A: 'es-NI',\n    0x180A: 'es-PA',\n    0x3C0A: 'es-PY',\n    0x280A: 'es-PE',\n    0x500A: 'es-PR',\n\n    // Microsoft has defined two different language codes for\n    // “Spanish with modern sorting” and “Spanish with traditional\n    // sorting”. This makes sense for collation APIs, and it would be\n    // possible to express this in BCP 47 language tags via Unicode\n    // extensions (eg., es-u-co-trad is Spanish with traditional\n    // sorting). However, for storing names in fonts, the distinction\n    // does not make sense, so we give “es” in both cases.\n    0x0C0A: 'es',\n    0x040A: 'es',\n\n    0x540A: 'es-US',\n    0x380A: 'es-UY',\n    0x200A: 'es-VE',\n    0x081D: 'sv-FI',\n    0x041D: 'sv',\n    0x045A: 'syr',\n    0x0428: 'tg',\n    0x085F: 'tzm',\n    0x0449: 'ta',\n    0x0444: 'tt',\n    0x044A: 'te',\n    0x041E: 'th',\n    0x0451: 'bo',\n    0x041F: 'tr',\n    0x0442: 'tk',\n    0x0480: 'ug',\n    0x0422: 'uk',\n    0x042E: 'hsb',\n    0x0420: 'ur',\n    0x0843: 'uz-Cyrl',\n    0x0443: 'uz',\n    0x042A: 'vi',\n    0x0452: 'cy',\n    0x0488: 'wo',\n    0x0485: 'sah',\n    0x0478: 'ii',\n    0x046A: 'yo'\n};\n\n// Returns a IETF BCP 47 language code, for example 'zh-Hant'\n// for 'Chinese in the traditional script'.\nfunction getLanguageCode(platformID, languageID, ltag) {\n    switch (platformID) {\n        case 0:  // Unicode\n            if (languageID === 0xFFFF) {\n                return 'und';\n            } else if (ltag) {\n                return ltag[languageID];\n            }\n\n            break;\n\n        case 1:  // Macintosh\n            return macLanguages[languageID];\n\n        case 3:  // Windows\n            return windowsLanguages[languageID];\n    }\n\n    return undefined;\n}\n\nconst utf16 = 'utf-16';\n\n// MacOS script ID → encoding. This table stores the default case,\n// which can be overridden by macLanguageEncodings.\nconst macScriptEncodings = {\n    0: 'macintosh',           // smRoman\n    1: 'x-mac-japanese',      // smJapanese\n    2: 'x-mac-chinesetrad',   // smTradChinese\n    3: 'x-mac-korean',        // smKorean\n    6: 'x-mac-greek',         // smGreek\n    7: 'x-mac-cyrillic',      // smCyrillic\n    9: 'x-mac-devanagai',     // smDevanagari\n    10: 'x-mac-gurmukhi',     // smGurmukhi\n    11: 'x-mac-gujarati',     // smGujarati\n    12: 'x-mac-oriya',        // smOriya\n    13: 'x-mac-bengali',      // smBengali\n    14: 'x-mac-tamil',        // smTamil\n    15: 'x-mac-telugu',       // smTelugu\n    16: 'x-mac-kannada',      // smKannada\n    17: 'x-mac-malayalam',    // smMalayalam\n    18: 'x-mac-sinhalese',    // smSinhalese\n    19: 'x-mac-burmese',      // smBurmese\n    20: 'x-mac-khmer',        // smKhmer\n    21: 'x-mac-thai',         // smThai\n    22: 'x-mac-lao',          // smLao\n    23: 'x-mac-georgian',     // smGeorgian\n    24: 'x-mac-armenian',     // smArmenian\n    25: 'x-mac-chinesesimp',  // smSimpChinese\n    26: 'x-mac-tibetan',      // smTibetan\n    27: 'x-mac-mongolian',    // smMongolian\n    28: 'x-mac-ethiopic',     // smEthiopic\n    29: 'x-mac-ce',           // smCentralEuroRoman\n    30: 'x-mac-vietnamese',   // smVietnamese\n    31: 'x-mac-extarabic'     // smExtArabic\n};\n\n// MacOS language ID → encoding. This table stores the exceptional\n// cases, which override macScriptEncodings. For writing MacOS naming\n// tables, we need to emit a MacOS script ID. Therefore, we cannot\n// merge macScriptEncodings into macLanguageEncodings.\n//\n// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nconst macLanguageEncodings = {\n    15: 'x-mac-icelandic',    // langIcelandic\n    17: 'x-mac-turkish',      // langTurkish\n    18: 'x-mac-croatian',     // langCroatian\n    24: 'x-mac-ce',           // langLithuanian\n    25: 'x-mac-ce',           // langPolish\n    26: 'x-mac-ce',           // langHungarian\n    27: 'x-mac-ce',           // langEstonian\n    28: 'x-mac-ce',           // langLatvian\n    30: 'x-mac-icelandic',    // langFaroese\n    37: 'x-mac-romanian',     // langRomanian\n    38: 'x-mac-ce',           // langCzech\n    39: 'x-mac-ce',           // langSlovak\n    40: 'x-mac-ce',           // langSlovenian\n    143: 'x-mac-inuit',       // langInuktitut\n    146: 'x-mac-gaelic'       // langIrishGaelicScript\n};\n\nfunction getEncoding(platformID, encodingID, languageID) {\n    switch (platformID) {\n        case 0:  // Unicode\n            return utf16;\n\n        case 1:  // Apple Macintosh\n            return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];\n\n        case 3:  // Microsoft Windows\n            if (encodingID === 1 || encodingID === 10) {\n                return utf16;\n            }\n\n            break;\n    }\n\n    return undefined;\n}\n\n// Parse the naming `name` table.\n// FIXME: Format 1 additional fields are not supported yet.\n// ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].\nfunction parseNameTable(data, start, ltag) {\n    const name = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    const format = p.parseUShort();\n    const count = p.parseUShort();\n    const stringOffset = p.offset + p.parseUShort();\n    for (let i = 0; i < count; i++) {\n        const platformID = p.parseUShort();\n        const encodingID = p.parseUShort();\n        const languageID = p.parseUShort();\n        const nameID = p.parseUShort();\n        const property = nameTableNames[nameID] || nameID;\n        const byteLength = p.parseUShort();\n        const offset = p.parseUShort();\n        const language = getLanguageCode(platformID, languageID, ltag);\n        const encoding = getEncoding(platformID, encodingID, languageID);\n        if (encoding !== undefined && language !== undefined) {\n            let text;\n            if (encoding === utf16) {\n                text = _types__WEBPACK_IMPORTED_MODULE_0__[\"decode\"].UTF16(data, stringOffset + offset, byteLength);\n            } else {\n                text = _types__WEBPACK_IMPORTED_MODULE_0__[\"decode\"].MACSTRING(data, stringOffset + offset, byteLength, encoding);\n            }\n\n            if (text) {\n                let translations = name[property];\n                if (translations === undefined) {\n                    translations = name[property] = {};\n                }\n\n                translations[language] = text;\n            }\n        }\n    }\n\n    let langTagCount = 0;\n    if (format === 1) {\n        // FIXME: Also handle Microsoft's 'name' table 1.\n        langTagCount = p.parseUShort();\n    }\n\n    return name;\n}\n\n// {23: 'foo'} → {'foo': 23}\n// ['bar', 'baz'] → {'bar': 0, 'baz': 1}\nfunction reverseDict(dict) {\n    const result = {};\n    for (let key in dict) {\n        result[dict[key]] = parseInt(key);\n    }\n\n    return result;\n}\n\nfunction makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Record('NameRecord', [\n        {name: 'platformID', type: 'USHORT', value: platformID},\n        {name: 'encodingID', type: 'USHORT', value: encodingID},\n        {name: 'languageID', type: 'USHORT', value: languageID},\n        {name: 'nameID', type: 'USHORT', value: nameID},\n        {name: 'length', type: 'USHORT', value: length},\n        {name: 'offset', type: 'USHORT', value: offset}\n    ]);\n}\n\n// Finds the position of needle in haystack, or -1 if not there.\n// Like String.indexOf(), but for arrays.\nfunction findSubArray(needle, haystack) {\n    const needleLength = needle.length;\n    const limit = haystack.length - needleLength + 1;\n\n    loop:\n    for (let pos = 0; pos < limit; pos++) {\n        for (; pos < limit; pos++) {\n            for (let k = 0; k < needleLength; k++) {\n                if (haystack[pos + k] !== needle[k]) {\n                    continue loop;\n                }\n            }\n\n            return pos;\n        }\n    }\n\n    return -1;\n}\n\nfunction addStringToPool(s, pool) {\n    let offset = findSubArray(s, pool);\n    if (offset < 0) {\n        offset = pool.length;\n        let i = 0;\n        const len = s.length;\n        for (; i < len; ++i) {\n            pool.push(s[i]);\n        }\n\n    }\n\n    return offset;\n}\n\nfunction makeNameTable(names, ltag) {\n    let nameID;\n    const nameIDs = [];\n\n    const namesWithNumericKeys = {};\n    const nameTableIds = reverseDict(nameTableNames);\n    for (let key in names) {\n        let id = nameTableIds[key];\n        if (id === undefined) {\n            id = key;\n        }\n\n        nameID = parseInt(id);\n\n        if (isNaN(nameID)) {\n            throw new Error('Name table entry \"' + key + '\" does not exist, see nameTableNames for complete list.');\n        }\n\n        namesWithNumericKeys[nameID] = names[key];\n        nameIDs.push(nameID);\n    }\n\n    const macLanguageIds = reverseDict(macLanguages);\n    const windowsLanguageIds = reverseDict(windowsLanguages);\n\n    const nameRecords = [];\n    const stringPool = [];\n\n    for (let i = 0; i < nameIDs.length; i++) {\n        nameID = nameIDs[i];\n        const translations = namesWithNumericKeys[nameID];\n        for (let lang in translations) {\n            const text = translations[lang];\n\n            // For MacOS, we try to emit the name in the form that was introduced\n            // in the initial version of the TrueType spec (in the late 1980s).\n            // However, this can fail for various reasons: the requested BCP 47\n            // language code might not have an old-style Mac equivalent;\n            // we might not have a codec for the needed character encoding;\n            // or the name might contain characters that cannot be expressed\n            // in the old-style Macintosh encoding. In case of failure, we emit\n            // the name in a more modern fashion (Unicode encoding with BCP 47\n            // language tags) that is recognized by MacOS 10.5, released in 2009.\n            // If fonts were only read by operating systems, we could simply\n            // emit all names in the modern form; this would be much easier.\n            // However, there are many applications and libraries that read\n            // 'name' tables directly, and these will usually only recognize\n            // the ancient form (silently skipping the unrecognized names).\n            let macPlatform = 1;  // Macintosh\n            let macLanguage = macLanguageIds[lang];\n            let macScript = macLanguageToScript[macLanguage];\n            const macEncoding = getEncoding(macPlatform, macScript, macLanguage);\n            let macName = _types__WEBPACK_IMPORTED_MODULE_0__[\"encode\"].MACSTRING(text, macEncoding);\n            if (macName === undefined) {\n                macPlatform = 0;  // Unicode\n                macLanguage = ltag.indexOf(lang);\n                if (macLanguage < 0) {\n                    macLanguage = ltag.length;\n                    ltag.push(lang);\n                }\n\n                macScript = 4;  // Unicode 2.0 and later\n                macName = _types__WEBPACK_IMPORTED_MODULE_0__[\"encode\"].UTF16(text);\n            }\n\n            const macNameOffset = addStringToPool(macName, stringPool);\n            nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,\n                                            nameID, macName.length, macNameOffset));\n\n            const winLanguage = windowsLanguageIds[lang];\n            if (winLanguage !== undefined) {\n                const winName = _types__WEBPACK_IMPORTED_MODULE_0__[\"encode\"].UTF16(text);\n                const winNameOffset = addStringToPool(winName, stringPool);\n                nameRecords.push(makeNameRecord(3, 1, winLanguage,\n                                                nameID, winName.length, winNameOffset));\n            }\n        }\n    }\n\n    nameRecords.sort(function(a, b) {\n        return ((a.platformID - b.platformID) ||\n                (a.encodingID - b.encodingID) ||\n                (a.languageID - b.languageID) ||\n                (a.nameID - b.nameID));\n    });\n\n    const t = new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('name', [\n        {name: 'format', type: 'USHORT', value: 0},\n        {name: 'count', type: 'USHORT', value: nameRecords.length},\n        {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}\n    ]);\n\n    for (let r = 0; r < nameRecords.length; r++) {\n        t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});\n    }\n\n    t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});\n    return t;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseNameTable, make: makeNameTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/name.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/os2.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/os2.js ***!
  \***************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `OS/2` table contains metrics required in OpenType fonts.\n// https://www.microsoft.com/typography/OTSPEC/os2.htm\n\n\n\n\nconst unicodeRanges = [\n    {begin: 0x0000, end: 0x007F}, // Basic Latin\n    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement\n    {begin: 0x0100, end: 0x017F}, // Latin Extended-A\n    {begin: 0x0180, end: 0x024F}, // Latin Extended-B\n    {begin: 0x0250, end: 0x02AF}, // IPA Extensions\n    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters\n    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks\n    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic\n    {begin: 0x2C80, end: 0x2CFF}, // Coptic\n    {begin: 0x0400, end: 0x04FF}, // Cyrillic\n    {begin: 0x0530, end: 0x058F}, // Armenian\n    {begin: 0x0590, end: 0x05FF}, // Hebrew\n    {begin: 0xA500, end: 0xA63F}, // Vai\n    {begin: 0x0600, end: 0x06FF}, // Arabic\n    {begin: 0x07C0, end: 0x07FF}, // NKo\n    {begin: 0x0900, end: 0x097F}, // Devanagari\n    {begin: 0x0980, end: 0x09FF}, // Bengali\n    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi\n    {begin: 0x0A80, end: 0x0AFF}, // Gujarati\n    {begin: 0x0B00, end: 0x0B7F}, // Oriya\n    {begin: 0x0B80, end: 0x0BFF}, // Tamil\n    {begin: 0x0C00, end: 0x0C7F}, // Telugu\n    {begin: 0x0C80, end: 0x0CFF}, // Kannada\n    {begin: 0x0D00, end: 0x0D7F}, // Malayalam\n    {begin: 0x0E00, end: 0x0E7F}, // Thai\n    {begin: 0x0E80, end: 0x0EFF}, // Lao\n    {begin: 0x10A0, end: 0x10FF}, // Georgian\n    {begin: 0x1B00, end: 0x1B7F}, // Balinese\n    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo\n    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional\n    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended\n    {begin: 0x2000, end: 0x206F}, // General Punctuation\n    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts\n    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol\n    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols\n    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols\n    {begin: 0x2150, end: 0x218F}, // Number Forms\n    {begin: 0x2190, end: 0x21FF}, // Arrows\n    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators\n    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical\n    {begin: 0x2400, end: 0x243F}, // Control Pictures\n    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition\n    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics\n    {begin: 0x2500, end: 0x257F}, // Box Drawing\n    {begin: 0x2580, end: 0x259F}, // Block Elements\n    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes\n    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols\n    {begin: 0x2700, end: 0x27BF}, // Dingbats\n    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation\n    {begin: 0x3040, end: 0x309F}, // Hiragana\n    {begin: 0x30A0, end: 0x30FF}, // Katakana\n    {begin: 0x3100, end: 0x312F}, // Bopomofo\n    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo\n    {begin: 0xA840, end: 0xA87F}, // Phags-pa\n    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months\n    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility\n    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables\n    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *\n    {begin: 0x10900, end: 0x1091F}, // Phoenicia\n    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs\n    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)\n    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes\n    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms\n    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A\n    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks\n    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms\n    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants\n    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B\n    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms\n    {begin: 0xFFF0, end: 0xFFFF}, // Specials\n    {begin: 0x0F00, end: 0x0FFF}, // Tibetan\n    {begin: 0x0700, end: 0x074F}, // Syriac\n    {begin: 0x0780, end: 0x07BF}, // Thaana\n    {begin: 0x0D80, end: 0x0DFF}, // Sinhala\n    {begin: 0x1000, end: 0x109F}, // Myanmar\n    {begin: 0x1200, end: 0x137F}, // Ethiopic\n    {begin: 0x13A0, end: 0x13FF}, // Cherokee\n    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics\n    {begin: 0x1680, end: 0x169F}, // Ogham\n    {begin: 0x16A0, end: 0x16FF}, // Runic\n    {begin: 0x1780, end: 0x17FF}, // Khmer\n    {begin: 0x1800, end: 0x18AF}, // Mongolian\n    {begin: 0x2800, end: 0x28FF}, // Braille Patterns\n    {begin: 0xA000, end: 0xA48F}, // Yi Syllables\n    {begin: 0x1700, end: 0x171F}, // Tagalog\n    {begin: 0x10300, end: 0x1032F}, // Old Italic\n    {begin: 0x10330, end: 0x1034F}, // Gothic\n    {begin: 0x10400, end: 0x1044F}, // Deseret\n    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols\n    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols\n    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)\n    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors\n    {begin: 0xE0000, end: 0xE007F}, // Tags\n    {begin: 0x1900, end: 0x194F}, // Limbu\n    {begin: 0x1950, end: 0x197F}, // Tai Le\n    {begin: 0x1980, end: 0x19DF}, // New Tai Lue\n    {begin: 0x1A00, end: 0x1A1F}, // Buginese\n    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic\n    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh\n    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols\n    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri\n    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary\n    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers\n    {begin: 0x10380, end: 0x1039F}, // Ugaritic\n    {begin: 0x103A0, end: 0x103DF}, // Old Persian\n    {begin: 0x10450, end: 0x1047F}, // Shavian\n    {begin: 0x10480, end: 0x104AF}, // Osmanya\n    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary\n    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi\n    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols\n    {begin: 0x12000, end: 0x123FF}, // Cuneiform\n    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals\n    {begin: 0x1B80, end: 0x1BBF}, // Sundanese\n    {begin: 0x1C00, end: 0x1C4F}, // Lepcha\n    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki\n    {begin: 0xA880, end: 0xA8DF}, // Saurashtra\n    {begin: 0xA900, end: 0xA92F}, // Kayah Li\n    {begin: 0xA930, end: 0xA95F}, // Rejang\n    {begin: 0xAA00, end: 0xAA5F}, // Cham\n    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols\n    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc\n    {begin: 0x102A0, end: 0x102DF}, // Carian\n    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles\n];\n\nfunction getUnicodeRange(unicode) {\n    for (let i = 0; i < unicodeRanges.length; i += 1) {\n        const range = unicodeRanges[i];\n        if (unicode >= range.begin && unicode < range.end) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\n// Parse the OS/2 and Windows metrics `OS/2` table\nfunction parseOS2Table(data, start) {\n    const os2 = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Parser(data, start);\n    os2.version = p.parseUShort();\n    os2.xAvgCharWidth = p.parseShort();\n    os2.usWeightClass = p.parseUShort();\n    os2.usWidthClass = p.parseUShort();\n    os2.fsType = p.parseUShort();\n    os2.ySubscriptXSize = p.parseShort();\n    os2.ySubscriptYSize = p.parseShort();\n    os2.ySubscriptXOffset = p.parseShort();\n    os2.ySubscriptYOffset = p.parseShort();\n    os2.ySuperscriptXSize = p.parseShort();\n    os2.ySuperscriptYSize = p.parseShort();\n    os2.ySuperscriptXOffset = p.parseShort();\n    os2.ySuperscriptYOffset = p.parseShort();\n    os2.yStrikeoutSize = p.parseShort();\n    os2.yStrikeoutPosition = p.parseShort();\n    os2.sFamilyClass = p.parseShort();\n    os2.panose = [];\n    for (let i = 0; i < 10; i++) {\n        os2.panose[i] = p.parseByte();\n    }\n\n    os2.ulUnicodeRange1 = p.parseULong();\n    os2.ulUnicodeRange2 = p.parseULong();\n    os2.ulUnicodeRange3 = p.parseULong();\n    os2.ulUnicodeRange4 = p.parseULong();\n    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());\n    os2.fsSelection = p.parseUShort();\n    os2.usFirstCharIndex = p.parseUShort();\n    os2.usLastCharIndex = p.parseUShort();\n    os2.sTypoAscender = p.parseShort();\n    os2.sTypoDescender = p.parseShort();\n    os2.sTypoLineGap = p.parseShort();\n    os2.usWinAscent = p.parseUShort();\n    os2.usWinDescent = p.parseUShort();\n    if (os2.version >= 1) {\n        os2.ulCodePageRange1 = p.parseULong();\n        os2.ulCodePageRange2 = p.parseULong();\n    }\n\n    if (os2.version >= 2) {\n        os2.sxHeight = p.parseShort();\n        os2.sCapHeight = p.parseShort();\n        os2.usDefaultChar = p.parseUShort();\n        os2.usBreakChar = p.parseUShort();\n        os2.usMaxContent = p.parseUShort();\n    }\n\n    return os2;\n}\n\nfunction makeOS2Table(options) {\n    return new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Table('OS/2', [\n        {name: 'version', type: 'USHORT', value: 0x0003},\n        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},\n        {name: 'usWeightClass', type: 'USHORT', value: 0},\n        {name: 'usWidthClass', type: 'USHORT', value: 0},\n        {name: 'fsType', type: 'USHORT', value: 0},\n        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},\n        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},\n        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},\n        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},\n        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},\n        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},\n        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},\n        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},\n        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},\n        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},\n        {name: 'sFamilyClass', type: 'SHORT', value: 0},\n        {name: 'bFamilyType', type: 'BYTE', value: 0},\n        {name: 'bSerifStyle', type: 'BYTE', value: 0},\n        {name: 'bWeight', type: 'BYTE', value: 0},\n        {name: 'bProportion', type: 'BYTE', value: 0},\n        {name: 'bContrast', type: 'BYTE', value: 0},\n        {name: 'bStrokeVariation', type: 'BYTE', value: 0},\n        {name: 'bArmStyle', type: 'BYTE', value: 0},\n        {name: 'bLetterform', type: 'BYTE', value: 0},\n        {name: 'bMidline', type: 'BYTE', value: 0},\n        {name: 'bXHeight', type: 'BYTE', value: 0},\n        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},\n        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},\n        {name: 'fsSelection', type: 'USHORT', value: 0},\n        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},\n        {name: 'usLastCharIndex', type: 'USHORT', value: 0},\n        {name: 'sTypoAscender', type: 'SHORT', value: 0},\n        {name: 'sTypoDescender', type: 'SHORT', value: 0},\n        {name: 'sTypoLineGap', type: 'SHORT', value: 0},\n        {name: 'usWinAscent', type: 'USHORT', value: 0},\n        {name: 'usWinDescent', type: 'USHORT', value: 0},\n        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},\n        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},\n        {name: 'sxHeight', type: 'SHORT', value: 0},\n        {name: 'sCapHeight', type: 'SHORT', value: 0},\n        {name: 'usDefaultChar', type: 'USHORT', value: 0},\n        {name: 'usBreakChar', type: 'USHORT', value: 0},\n        {name: 'usMaxContext', type: 'USHORT', value: 0}\n    ], options);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseOS2Table, make: makeOS2Table, unicodeRanges, getUnicodeRange });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/os2.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/post.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/post.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding */ \"../../node_modules/opentype.js/src/encoding.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `post` table stores additional PostScript information, such as glyph names.\n// https://www.microsoft.com/typography/OTSPEC/post.htm\n\n\n\n\n\n// Parse the PostScript `post` table\nfunction parsePostTable(data, start) {\n    const post = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    post.version = p.parseVersion();\n    post.italicAngle = p.parseFixed();\n    post.underlinePosition = p.parseShort();\n    post.underlineThickness = p.parseShort();\n    post.isFixedPitch = p.parseULong();\n    post.minMemType42 = p.parseULong();\n    post.maxMemType42 = p.parseULong();\n    post.minMemType1 = p.parseULong();\n    post.maxMemType1 = p.parseULong();\n    switch (post.version) {\n        case 1:\n            post.names = _encoding__WEBPACK_IMPORTED_MODULE_0__[\"standardNames\"].slice();\n            break;\n        case 2:\n            post.numberOfGlyphs = p.parseUShort();\n            post.glyphNameIndex = new Array(post.numberOfGlyphs);\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                post.glyphNameIndex[i] = p.parseUShort();\n            }\n\n            post.names = [];\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                if (post.glyphNameIndex[i] >= _encoding__WEBPACK_IMPORTED_MODULE_0__[\"standardNames\"].length) {\n                    const nameLength = p.parseChar();\n                    post.names.push(p.parseString(nameLength));\n                }\n            }\n\n            break;\n        case 2.5:\n            post.numberOfGlyphs = p.parseUShort();\n            post.offset = new Array(post.numberOfGlyphs);\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                post.offset[i] = p.parseChar();\n            }\n\n            break;\n    }\n    return post;\n}\n\nfunction makePostTable() {\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('post', [\n        {name: 'version', type: 'FIXED', value: 0x00030000},\n        {name: 'italicAngle', type: 'FIXED', value: 0},\n        {name: 'underlinePosition', type: 'FWORD', value: 0},\n        {name: 'underlineThickness', type: 'FWORD', value: 0},\n        {name: 'isFixedPitch', type: 'ULONG', value: 0},\n        {name: 'minMemType42', type: 'ULONG', value: 0},\n        {name: 'maxMemType42', type: 'ULONG', value: 0},\n        {name: 'minMemType1', type: 'ULONG', value: 0},\n        {name: 'maxMemType1', type: 'ULONG', value: 0}\n    ]);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parsePostTable, make: makePostTable });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/post.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/sfnt.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/sfnt.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n/* harmony import */ var _cmap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cmap */ \"../../node_modules/opentype.js/src/tables/cmap.js\");\n/* harmony import */ var _cff__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cff */ \"../../node_modules/opentype.js/src/tables/cff.js\");\n/* harmony import */ var _head__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./head */ \"../../node_modules/opentype.js/src/tables/head.js\");\n/* harmony import */ var _hhea__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hhea */ \"../../node_modules/opentype.js/src/tables/hhea.js\");\n/* harmony import */ var _hmtx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hmtx */ \"../../node_modules/opentype.js/src/tables/hmtx.js\");\n/* harmony import */ var _ltag__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ltag */ \"../../node_modules/opentype.js/src/tables/ltag.js\");\n/* harmony import */ var _maxp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./maxp */ \"../../node_modules/opentype.js/src/tables/maxp.js\");\n/* harmony import */ var _name__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./name */ \"../../node_modules/opentype.js/src/tables/name.js\");\n/* harmony import */ var _os2__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./os2 */ \"../../node_modules/opentype.js/src/tables/os2.js\");\n/* harmony import */ var _post__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./post */ \"../../node_modules/opentype.js/src/tables/post.js\");\n/* harmony import */ var _gsub__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./gsub */ \"../../node_modules/opentype.js/src/tables/gsub.js\");\n/* harmony import */ var _meta__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./meta */ \"../../node_modules/opentype.js/src/tables/meta.js\");\n// The `sfnt` wrapper provides organization for the tables in the font.\n// It is the top-level data structure in a font.\n// https://www.microsoft.com/typography/OTSPEC/otff.htm\n// Recommendations for creating OpenType Fonts:\n// http://www.microsoft.com/typography/otspec140/recom.htm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction log2(v) {\n    return Math.log(v) / Math.log(2) | 0;\n}\n\nfunction computeCheckSum(bytes) {\n    while (bytes.length % 4 !== 0) {\n        bytes.push(0);\n    }\n\n    let sum = 0;\n    for (let i = 0; i < bytes.length; i += 4) {\n        sum += (bytes[i] << 24) +\n            (bytes[i + 1] << 16) +\n            (bytes[i + 2] << 8) +\n            (bytes[i + 3]);\n    }\n\n    sum %= Math.pow(2, 32);\n    return sum;\n}\n\nfunction makeTableRecord(tag, checkSum, offset, length) {\n    return new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Record('Table Record', [\n        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},\n        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},\n        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},\n        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}\n    ]);\n}\n\nfunction makeSfntTable(tables) {\n    const sfnt = new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Table('sfnt', [\n        {name: 'version', type: 'TAG', value: 'OTTO'},\n        {name: 'numTables', type: 'USHORT', value: 0},\n        {name: 'searchRange', type: 'USHORT', value: 0},\n        {name: 'entrySelector', type: 'USHORT', value: 0},\n        {name: 'rangeShift', type: 'USHORT', value: 0}\n    ]);\n    sfnt.tables = tables;\n    sfnt.numTables = tables.length;\n    const highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));\n    sfnt.searchRange = 16 * highestPowerOf2;\n    sfnt.entrySelector = log2(highestPowerOf2);\n    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;\n\n    const recordFields = [];\n    const tableFields = [];\n\n    let offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);\n    while (offset % 4 !== 0) {\n        offset += 1;\n        tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n    }\n\n    for (let i = 0; i < tables.length; i += 1) {\n        const t = tables[i];\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');\n        const tableLength = t.sizeOf();\n        const tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);\n        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});\n        tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});\n        offset += tableLength;\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(!isNaN(offset), 'Something went wrong calculating the offset.');\n        while (offset % 4 !== 0) {\n            offset += 1;\n            tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n        }\n    }\n\n    // Table records need to be sorted alphabetically.\n    recordFields.sort(function(r1, r2) {\n        if (r1.value.tag > r2.value.tag) {\n            return 1;\n        } else {\n            return -1;\n        }\n    });\n\n    sfnt.fields = sfnt.fields.concat(recordFields);\n    sfnt.fields = sfnt.fields.concat(tableFields);\n    return sfnt;\n}\n\n// Get the metrics for a character. If the string has more than one character\n// this function returns metrics for the first available character.\n// You can provide optional fallback metrics if no characters are available.\nfunction metricsForChar(font, chars, notFoundMetrics) {\n    for (let i = 0; i < chars.length; i += 1) {\n        const glyphIndex = font.charToGlyphIndex(chars[i]);\n        if (glyphIndex > 0) {\n            const glyph = font.glyphs.get(glyphIndex);\n            return glyph.getMetrics();\n        }\n    }\n\n    return notFoundMetrics;\n}\n\nfunction average(vs) {\n    let sum = 0;\n    for (let i = 0; i < vs.length; i += 1) {\n        sum += vs[i];\n    }\n\n    return sum / vs.length;\n}\n\n// Convert the font object to a SFNT data structure.\n// This structure contains all the necessary tables and metadata to create a binary OTF file.\nfunction fontToSfntTable(font) {\n    const xMins = [];\n    const yMins = [];\n    const xMaxs = [];\n    const yMaxs = [];\n    const advanceWidths = [];\n    const leftSideBearings = [];\n    const rightSideBearings = [];\n    let firstCharIndex;\n    let lastCharIndex = 0;\n    let ulUnicodeRange1 = 0;\n    let ulUnicodeRange2 = 0;\n    let ulUnicodeRange3 = 0;\n    let ulUnicodeRange4 = 0;\n\n    for (let i = 0; i < font.glyphs.length; i += 1) {\n        const glyph = font.glyphs.get(i);\n        const unicode = glyph.unicode | 0;\n\n        if (isNaN(glyph.advanceWidth)) {\n            throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');\n        }\n\n        if (firstCharIndex > unicode || firstCharIndex === undefined) {\n            // ignore .notdef char\n            if (unicode > 0) {\n                firstCharIndex = unicode;\n            }\n        }\n\n        if (lastCharIndex < unicode) {\n            lastCharIndex = unicode;\n        }\n\n        const position = _os2__WEBPACK_IMPORTED_MODULE_10__[\"default\"].getUnicodeRange(unicode);\n        if (position < 32) {\n            ulUnicodeRange1 |= 1 << position;\n        } else if (position < 64) {\n            ulUnicodeRange2 |= 1 << position - 32;\n        } else if (position < 96) {\n            ulUnicodeRange3 |= 1 << position - 64;\n        } else if (position < 123) {\n            ulUnicodeRange4 |= 1 << position - 96;\n        } else {\n            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');\n        }\n        // Skip non-important characters.\n        if (glyph.name === '.notdef') continue;\n        const metrics = glyph.getMetrics();\n        xMins.push(metrics.xMin);\n        yMins.push(metrics.yMin);\n        xMaxs.push(metrics.xMax);\n        yMaxs.push(metrics.yMax);\n        leftSideBearings.push(metrics.leftSideBearing);\n        rightSideBearings.push(metrics.rightSideBearing);\n        advanceWidths.push(glyph.advanceWidth);\n    }\n\n    const globals = {\n        xMin: Math.min.apply(null, xMins),\n        yMin: Math.min.apply(null, yMins),\n        xMax: Math.max.apply(null, xMaxs),\n        yMax: Math.max.apply(null, yMaxs),\n        advanceWidthMax: Math.max.apply(null, advanceWidths),\n        advanceWidthAvg: average(advanceWidths),\n        minLeftSideBearing: Math.min.apply(null, leftSideBearings),\n        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),\n        minRightSideBearing: Math.min.apply(null, rightSideBearings)\n    };\n    globals.ascender = font.ascender;\n    globals.descender = font.descender;\n\n    const headTable = _head__WEBPACK_IMPORTED_MODULE_4__[\"default\"].make({\n        flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)\n        unitsPerEm: font.unitsPerEm,\n        xMin: globals.xMin,\n        yMin: globals.yMin,\n        xMax: globals.xMax,\n        yMax: globals.yMax,\n        lowestRecPPEM: 3,\n        createdTimestamp: font.createdTimestamp\n    });\n\n    const hheaTable = _hhea__WEBPACK_IMPORTED_MODULE_5__[\"default\"].make({\n        ascender: globals.ascender,\n        descender: globals.descender,\n        advanceWidthMax: globals.advanceWidthMax,\n        minLeftSideBearing: globals.minLeftSideBearing,\n        minRightSideBearing: globals.minRightSideBearing,\n        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),\n        numberOfHMetrics: font.glyphs.length\n    });\n\n    const maxpTable = _maxp__WEBPACK_IMPORTED_MODULE_8__[\"default\"].make(font.glyphs.length);\n\n    const os2Table = _os2__WEBPACK_IMPORTED_MODULE_10__[\"default\"].make({\n        xAvgCharWidth: Math.round(globals.advanceWidthAvg),\n        usWeightClass: font.tables.os2.usWeightClass,\n        usWidthClass: font.tables.os2.usWidthClass,\n        usFirstCharIndex: firstCharIndex,\n        usLastCharIndex: lastCharIndex,\n        ulUnicodeRange1: ulUnicodeRange1,\n        ulUnicodeRange2: ulUnicodeRange2,\n        ulUnicodeRange3: ulUnicodeRange3,\n        ulUnicodeRange4: ulUnicodeRange4,\n        fsSelection: font.tables.os2.fsSelection, // REGULAR\n        // See http://typophile.com/node/13081 for more info on vertical metrics.\n        // We get metrics for typical characters (such as \"x\" for xHeight).\n        // We provide some fallback characters if characters are unavailable: their\n        // ordering was chosen experimentally.\n        sTypoAscender: globals.ascender,\n        sTypoDescender: globals.descender,\n        sTypoLineGap: 0,\n        usWinAscent: globals.yMax,\n        usWinDescent: Math.abs(globals.yMin),\n        ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now\n        sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,\n        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,\n        usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.\n        usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.\n    });\n\n    const hmtxTable = _hmtx__WEBPACK_IMPORTED_MODULE_6__[\"default\"].make(font.glyphs);\n    const cmapTable = _cmap__WEBPACK_IMPORTED_MODULE_2__[\"default\"].make(font.glyphs);\n\n    const englishFamilyName = font.getEnglishName('fontFamily');\n    const englishStyleName = font.getEnglishName('fontSubfamily');\n    const englishFullName = englishFamilyName + ' ' + englishStyleName;\n    let postScriptName = font.getEnglishName('postScriptName');\n    if (!postScriptName) {\n        postScriptName = englishFamilyName.replace(/\\s/g, '') + '-' + englishStyleName;\n    }\n\n    const names = {};\n    for (let n in font.names) {\n        names[n] = font.names[n];\n    }\n\n    if (!names.uniqueID) {\n        names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};\n    }\n\n    if (!names.postScriptName) {\n        names.postScriptName = {en: postScriptName};\n    }\n\n    if (!names.preferredFamily) {\n        names.preferredFamily = font.names.fontFamily;\n    }\n\n    if (!names.preferredSubfamily) {\n        names.preferredSubfamily = font.names.fontSubfamily;\n    }\n\n    const languageTags = [];\n    const nameTable = _name__WEBPACK_IMPORTED_MODULE_9__[\"default\"].make(names, languageTags);\n    const ltagTable = (languageTags.length > 0 ? _ltag__WEBPACK_IMPORTED_MODULE_7__[\"default\"].make(languageTags) : undefined);\n\n    const postTable = _post__WEBPACK_IMPORTED_MODULE_11__[\"default\"].make();\n    const cffTable = _cff__WEBPACK_IMPORTED_MODULE_3__[\"default\"].make(font.glyphs, {\n        version: font.getEnglishName('version'),\n        fullName: englishFullName,\n        familyName: englishFamilyName,\n        weightName: englishStyleName,\n        postScriptName: postScriptName,\n        unitsPerEm: font.unitsPerEm,\n        fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]\n    });\n\n    const metaTable = (font.metas && Object.keys(font.metas).length > 0) ? _meta__WEBPACK_IMPORTED_MODULE_13__[\"default\"].make(font.metas) : undefined;\n\n    // The order does not matter because makeSfntTable() will sort them.\n    const tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];\n    if (ltagTable) {\n        tables.push(ltagTable);\n    }\n    // Optional tables\n    if (font.tables.gsub) {\n        tables.push(_gsub__WEBPACK_IMPORTED_MODULE_12__[\"default\"].make(font.tables.gsub));\n    }\n    if (metaTable) {\n        tables.push(metaTable);\n    }\n\n    const sfntTable = makeSfntTable(tables);\n\n    // Compute the font's checkSum and store it in head.checkSumAdjustment.\n    const bytes = sfntTable.encode();\n    const checkSum = computeCheckSum(bytes);\n    const tableFields = sfntTable.fields;\n    let checkSumAdjusted = false;\n    for (let i = 0; i < tableFields.length; i += 1) {\n        if (tableFields[i].name === 'head table') {\n            tableFields[i].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;\n            checkSumAdjusted = true;\n            break;\n        }\n    }\n\n    if (!checkSumAdjusted) {\n        throw new Error('Could not find head table with checkSum to adjust.');\n    }\n\n    return sfntTable;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum });\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/sfnt.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tokenizer.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tokenizer.js ***!
  \**************************************************************************************/
/*! exports provided: default, Token, Event, ContextRange, ContextParams */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Token\", function() { return Token; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Event\", function() { return Event; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ContextRange\", function() { return ContextRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ContextParams\", function() { return ContextParams; });\n/**\n * Converts a string into a list of tokens.\n */\n\n/**\n * Create a new token\n * @param {string} char a single char\n */\nfunction Token(char) {\n    this.char = char;\n    this.state = {};\n    this.activeState = null;\n}\n\n/**\n * Create a new context range\n * @param {number} startIndex range start index\n * @param {number} endOffset range end index offset\n * @param {string} contextName owner context name\n */\nfunction ContextRange(startIndex, endOffset, contextName) {\n    this.contextName = contextName;\n    this.startIndex = startIndex;\n    this.endOffset = endOffset;\n}\n\n/**\n * Check context start and end\n * @param {string} contextName a unique context name\n * @param {function} checkStart a predicate function the indicates a context's start\n * @param {function} checkEnd a predicate function the indicates a context's end\n */\nfunction ContextChecker(contextName, checkStart, checkEnd) {\n    this.contextName = contextName;\n    this.openRange = null;\n    this.ranges = [];\n    this.checkStart = checkStart;\n    this.checkEnd = checkEnd;\n}\n\n/**\n * Create a context params\n * @param {array} context a list of items\n * @param {number} currentIndex current item index\n */\nfunction ContextParams(context, currentIndex) {\n    this.context = context;\n    this.index = currentIndex;\n    this.length = context.length;\n    this.current = context[currentIndex];\n    this.backtrack = context.slice(0, currentIndex);\n    this.lookahead = context.slice(currentIndex + 1);\n}\n\n/**\n * Create an event instance\n * @param {string} eventId event unique id\n */\nfunction Event(eventId) {\n    this.eventId = eventId;\n    this.subscribers = [];\n}\n\n/**\n * Initialize a core events and auto subscribe required event handlers\n * @param {any} events an object that enlists core events handlers\n */\nfunction initializeCoreEvents(events) {\n    const coreEvents = [\n        'start', 'end', 'next', 'newToken', 'contextStart',\n        'contextEnd', 'insertToken', 'removeToken', 'removeRange',\n        'replaceToken', 'replaceRange', 'composeRUD', 'updateContextsRanges'\n    ];\n\n    coreEvents.forEach(eventId => {\n        Object.defineProperty(this.events, eventId, {\n            value: new Event(eventId)\n        });\n    });\n\n    if (!!events) {\n        coreEvents.forEach(eventId => {\n            const event = events[eventId];\n            if (typeof event === 'function') {\n                this.events[eventId].subscribe(event);\n            }\n        });\n    }\n    const requiresContextUpdate = [\n        'insertToken', 'removeToken', 'removeRange',\n        'replaceToken', 'replaceRange', 'composeRUD'\n    ];\n    requiresContextUpdate.forEach(eventId => {\n        this.events[eventId].subscribe(\n            this.updateContextsRanges\n        );\n    });\n}\n\n/**\n * Converts a string into a list of tokens\n * @param {any} events tokenizer core events\n */\nfunction Tokenizer(events) {\n    this.tokens = [];\n    this.registeredContexts = {};\n    this.contextCheckers = [];\n    this.events = {};\n    this.registeredModifiers = [];\n\n    initializeCoreEvents.call(this, events);\n}\n\n/**\n * Sets the state of a token, usually called by a state modifier.\n * @param {string} key state item key\n * @param {any} value state item value\n */\nToken.prototype.setState = function(key, value) {\n    this.state[key] = value;\n    this.activeState = { key, value: this.state[key] };\n    return this.activeState;\n};\n\nToken.prototype.getState = function (stateId) {\n    return this.state[stateId] || null;\n};\n\n/**\n * Checks if an index exists in the tokens list.\n * @param {number} index token index\n */\nTokenizer.prototype.inboundIndex = function(index) {\n    return index >= 0 && index < this.tokens.length;\n};\n\n/**\n * Compose and apply a list of operations (replace, update, delete)\n * @param {array} RUDs replace, update and delete operations\n * TODO: Perf. Optimization (lengthBefore === lengthAfter ? dispatch once)\n */\nTokenizer.prototype.composeRUD = function (RUDs) {\n    const silent = true;\n    const state = RUDs.map(RUD => (\n        this[RUD[0]].apply(this, RUD.slice(1).concat(silent))\n    ));\n    const hasFAILObject = obj => (\n        typeof obj === 'object' &&\n        obj.hasOwnProperty('FAIL')\n    );\n    if (state.every(hasFAILObject)) {\n        return {\n            FAIL: `composeRUD: one or more operations hasn't completed successfully`,\n            report: state.filter(hasFAILObject)\n        };\n    }\n    this.dispatch('composeRUD', [state.filter(op => !hasFAILObject(op))]);\n};\n\n/**\n * Replace a range of tokens with a list of tokens\n * @param {number} startIndex range start index\n * @param {number} offset range offset\n * @param {token} tokens a list of tokens to replace\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.replaceRange = function (startIndex, offset, tokens, silent) {\n    offset = offset !== null ? offset : this.tokens.length;\n    const isTokenType = tokens.every(token => token instanceof Token);\n    if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {\n        const replaced = this.tokens.splice.apply(\n            this.tokens, [startIndex, offset].concat(tokens)\n        );\n        if (!silent) this.dispatch('replaceToken', [startIndex, offset, tokens]);\n        return [replaced, tokens];\n    } else {\n        return { FAIL: 'replaceRange: invalid tokens or startIndex.' };\n    }\n};\n\n/**\n * Replace a token with another token\n * @param {number} index token index\n * @param {token} token a token to replace\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.replaceToken = function (index, token, silent) {\n    if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {\n        const replaced = this.tokens.splice(index, 1, token);\n        if (!silent) this.dispatch('replaceToken', [index, token]);\n        return [replaced[0], token];\n    } else {\n        return { FAIL: 'replaceToken: invalid token or index.' };\n    }\n};\n\n/**\n * Removes a range of tokens\n * @param {number} startIndex range start index\n * @param {number} offset range offset\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.removeRange = function(startIndex, offset, silent) {\n    offset = !isNaN(offset) ? offset : this.tokens.length;\n    const tokens = this.tokens.splice(startIndex, offset);\n    if (!silent) this.dispatch('removeRange', [tokens, startIndex, offset]);\n    return tokens;\n};\n\n/**\n * Remove a token at a certain index\n * @param {number} index token index\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.removeToken = function(index, silent) {\n    if (!isNaN(index) && this.inboundIndex(index)) {\n        const token = this.tokens.splice(index, 1);\n        if (!silent) this.dispatch('removeToken', [token, index]);\n        return token;\n    } else {\n        return { FAIL: 'removeToken: invalid token index.' };\n    }\n};\n\n/**\n * Insert a list of tokens at a certain index\n * @param {array} tokens a list of tokens to insert\n * @param {number} index insert the list of tokens at index\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.insertToken = function (tokens, index, silent) {\n    const tokenType = tokens.every(\n        token => token instanceof Token\n    );\n    if (tokenType) {\n        this.tokens.splice.apply(\n            this.tokens, [index, 0].concat(tokens)\n        );\n        if (!silent) this.dispatch('insertToken', [tokens, index]);\n        return tokens;\n    } else {\n        return { FAIL: 'insertToken: invalid token(s).' };\n    }\n};\n\n/**\n * A state modifier that is called on 'newToken' event\n * @param {string} modifierId state modifier id\n * @param {function} condition a predicate function that returns true or false\n * @param {function} modifier a function to update token state\n */\nTokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {\n    this.events.newToken.subscribe(function(token, contextParams) {\n        const conditionParams = [token, contextParams];\n        const canApplyModifier = (\n            condition === null ||\n            condition.apply(this, conditionParams) === true\n        );\n        const modifierParams = [token, contextParams];\n        if (canApplyModifier) {\n            let newStateValue = modifier.apply(this, modifierParams);\n            token.setState(modifierId, newStateValue);\n        }\n    });\n    this.registeredModifiers.push(modifierId);\n};\n\n/**\n * Subscribe a handler to an event\n * @param {function} eventHandler an event handler function\n */\nEvent.prototype.subscribe = function (eventHandler) {\n    if (typeof eventHandler === 'function') {\n        return ((this.subscribers.push(eventHandler)) - 1);\n    } else {\n        return { FAIL: `invalid '${this.eventId}' event handler`};\n    }\n};\n\n/**\n * Unsubscribe an event handler\n * @param {string} subsId subscription id\n */\nEvent.prototype.unsubscribe = function (subsId) {\n    this.subscribers.splice(subsId, 1);\n};\n\n/**\n * Sets context params current value index\n * @param {number} index context params current value index\n */\nContextParams.prototype.setCurrentIndex = function(index) {\n    this.index = index;\n    this.current = this.context[index];\n    this.backtrack = this.context.slice(0, index);\n    this.lookahead = this.context.slice(index + 1);\n};\n\n/**\n * Get an item at an offset from the current value\n * example (current value is 3):\n *  1    2   [3]   4    5   |   items values\n * -2   -1    0    1    2   |   offset values\n * @param {number} offset an offset from current value index\n */\nContextParams.prototype.get = function (offset) {\n    switch (true) {\n        case (offset === 0):\n            return this.current;\n        case (offset < 0 && Math.abs(offset) <= this.backtrack.length):\n            return this.backtrack.slice(offset)[0];\n        case (offset > 0 && offset <= this.lookahead.length):\n            return this.lookahead[offset - 1];\n        default:\n            return null;\n    }\n};\n\n/**\n * Converts a context range into a string value\n * @param {contextRange} range a context range\n */\nTokenizer.prototype.rangeToText = function (range) {\n    if (range instanceof ContextRange) {\n        return (\n            this.getRangeTokens(range)\n                .map(token => token.char).join('')\n        );\n    }\n};\n\n/**\n * Converts all tokens into a string\n */\nTokenizer.prototype.getText = function () {\n    return this.tokens.map(token => token.char).join('');\n};\n\n/**\n * Get a context by name\n * @param {string} contextName context name to get\n */\nTokenizer.prototype.getContext = function (contextName) {\n    let context = this.registeredContexts[contextName];\n    return !!context ? context : null;\n};\n\n/**\n * Subscribes a new event handler to an event\n * @param {string} eventName event name to subscribe to\n * @param {function} eventHandler a function to be invoked on event\n */\nTokenizer.prototype.on = function(eventName, eventHandler) {\n    const event = this.events[eventName];\n    if (!!event) {\n        return event.subscribe(eventHandler);\n    } else {\n        return null;\n    }\n};\n\n/**\n * Dispatches an event\n * @param {string} eventName event name\n * @param {any} args event handler arguments\n */\nTokenizer.prototype.dispatch = function(eventName, args) {\n    const event = this.events[eventName];\n    if (event instanceof Event) {\n        event.subscribers.forEach(subscriber => {\n            subscriber.apply(this, args || []);\n        });\n    }\n};\n\n/**\n * Register a new context checker\n * @param {string} contextName a unique context name\n * @param {function} contextStartCheck a predicate function that returns true on context start\n * @param {function} contextEndCheck  a predicate function that returns true on context end\n * TODO: call tokenize on registration to update context ranges with the new context.\n */\nTokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {\n    if (!!this.getContext(contextName)) return {\n        FAIL:\n        `context name '${contextName}' is already registered.`\n    };\n    if (typeof contextStartCheck !== 'function') return {\n        FAIL:\n        `missing context start check.`\n    };\n    if (typeof contextEndCheck !== 'function') return {\n        FAIL:\n        `missing context end check.`\n    };\n    const contextCheckers = new ContextChecker(\n        contextName, contextStartCheck, contextEndCheck\n    );\n    this.registeredContexts[contextName] = contextCheckers;\n    this.contextCheckers.push(contextCheckers);\n    return contextCheckers;\n};\n\n/**\n * Gets a context range tokens\n * @param {contextRange} range a context range\n */\nTokenizer.prototype.getRangeTokens = function(range) {\n    const endIndex = range.startIndex + range.endOffset;\n    return [].concat(\n        this.tokens\n            .slice(range.startIndex, endIndex)\n    );\n};\n\n/**\n * Gets the ranges of a context\n * @param {string} contextName context name\n */\nTokenizer.prototype.getContextRanges = function(contextName) {\n    const context = this.getContext(contextName);\n    if (!!context) {\n        return context.ranges;\n    } else {\n        return { FAIL: `context checker '${contextName}' is not registered.` };\n    }\n};\n\n/**\n * Resets context ranges to run context update\n */\nTokenizer.prototype.resetContextsRanges = function () {\n    const registeredContexts = this.registeredContexts;\n    for (const contextName in registeredContexts) {\n        if (registeredContexts.hasOwnProperty(contextName)) {\n            const context = registeredContexts[contextName];\n            context.ranges = [];\n        }\n    }\n};\n\n/**\n * Updates context ranges\n */\nTokenizer.prototype.updateContextsRanges = function () {\n    this.resetContextsRanges();\n    const chars = this.tokens.map(token => token.char);\n    for (let i = 0; i < chars.length; i++) {\n        const contextParams = new ContextParams(chars, i);\n        this.runContextCheck(contextParams);\n    }\n    this.dispatch('updateContextsRanges', [this.registeredContexts]);\n};\n\n/**\n * Sets the end offset of an open range\n * @param {number} offset range end offset\n * @param {string} contextName context name\n */\nTokenizer.prototype.setEndOffset = function (offset, contextName) {\n    const startIndex = this.getContext(contextName).openRange.startIndex;\n    let range = new ContextRange(startIndex, offset, contextName);\n    const ranges = this.getContext(contextName).ranges;\n    range.rangeId = `${contextName}.${ranges.length}`;\n    ranges.push(range);\n    this.getContext(contextName).openRange = null;\n    return range;\n};\n\n/**\n * Runs a context check on the current context\n * @param {contextParams} contextParams current context params\n */\nTokenizer.prototype.runContextCheck = function(contextParams) {\n    const index = contextParams.index;\n    this.contextCheckers.forEach(contextChecker => {\n        let contextName = contextChecker.contextName;\n        let openRange = this.getContext(contextName).openRange;\n        if (!openRange && contextChecker.checkStart(contextParams)) {\n            openRange = new ContextRange(index, null, contextName);\n            this.getContext(contextName).openRange = openRange;\n            this.dispatch('contextStart', [contextName, index]);\n        }\n        if (!!openRange && contextChecker.checkEnd(contextParams)) {\n            const offset = (index - openRange.startIndex) + 1;\n            const range = this.setEndOffset(offset, contextName);\n            this.dispatch('contextEnd', [contextName, range]);\n        }\n    });\n};\n\n/**\n * Converts a text into a list of tokens\n * @param {string} text a text to tokenize\n */\nTokenizer.prototype.tokenize = function (text) {\n    this.tokens = [];\n    this.resetContextsRanges();\n    let chars = Array.from(text);\n    this.dispatch('start');\n    for (let i = 0; i < chars.length; i++) {\n        const char = chars[i];\n        const contextParams = new ContextParams(chars, i);\n        this.dispatch('next', [contextParams]);\n        this.runContextCheck(contextParams);\n        let token = new Token(char);\n        this.tokens.push(token);\n        this.dispatch('newToken', [token, contextParams]);\n    }\n    this.dispatch('end', [this.tokens]);\n    return this.tokens;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Tokenizer);\n\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tokenizer.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/types.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/types.js ***!
  \**********************************************************************************/
/*! exports provided: decode, encode, sizeOf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"decode\", function() { return decode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"encode\", function() { return encode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sizeOf\", function() { return sizeOf; });\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n// Data types used in the OpenType font file.\n// All OpenType fonts use Motorola-style byte ordering (Big Endian)\n\n\n\nconst LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15\nconst LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31\n\n/**\n * @exports opentype.decode\n * @class\n */\nconst decode = {};\n/**\n * @exports opentype.encode\n * @class\n */\nconst encode = {};\n/**\n * @exports opentype.sizeOf\n * @class\n */\nconst sizeOf = {};\n\n// Return a function that always returns the same value.\nfunction constant(v) {\n    return function() {\n        return v;\n    };\n}\n\n// OpenType data types //////////////////////////////////////////////////////\n\n/**\n * Convert an 8-bit unsigned integer to a list of 1 byte.\n * @param {number}\n * @returns {Array}\n */\nencode.BYTE = function(v) {\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');\n    return [v];\n};\n/**\n * @constant\n * @type {number}\n */\nsizeOf.BYTE = constant(1);\n\n/**\n * Convert a 8-bit signed integer to a list of 1 byte.\n * @param {string}\n * @returns {Array}\n */\nencode.CHAR = function(v) {\n    return [v.charCodeAt(0)];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.CHAR = constant(1);\n\n/**\n * Convert an ASCII string to a list of bytes.\n * @param {string}\n * @returns {Array}\n */\nencode.CHARARRAY = function(v) {\n    const b = [];\n    for (let i = 0; i < v.length; i += 1) {\n        b[i] = v.charCodeAt(i);\n    }\n\n    return b;\n};\n\n/**\n * @param {Array}\n * @returns {number}\n */\nsizeOf.CHARARRAY = function(v) {\n    return v.length;\n};\n\n/**\n * Convert a 16-bit unsigned integer to a list of 2 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.USHORT = function(v) {\n    return [(v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.USHORT = constant(2);\n\n/**\n * Convert a 16-bit signed integer to a list of 2 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.SHORT = function(v) {\n    // Two's complement\n    if (v >= LIMIT16) {\n        v = -(2 * LIMIT16 - v);\n    }\n\n    return [(v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.SHORT = constant(2);\n\n/**\n * Convert a 24-bit unsigned integer to a list of 3 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.UINT24 = function(v) {\n    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.UINT24 = constant(3);\n\n/**\n * Convert a 32-bit unsigned integer to a list of 4 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.ULONG = function(v) {\n    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.ULONG = constant(4);\n\n/**\n * Convert a 32-bit unsigned integer to a list of 4 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.LONG = function(v) {\n    // Two's complement\n    if (v >= LIMIT32) {\n        v = -(2 * LIMIT32 - v);\n    }\n\n    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.LONG = constant(4);\n\nencode.FIXED = encode.ULONG;\nsizeOf.FIXED = sizeOf.ULONG;\n\nencode.FWORD = encode.SHORT;\nsizeOf.FWORD = sizeOf.SHORT;\n\nencode.UFWORD = encode.USHORT;\nsizeOf.UFWORD = sizeOf.USHORT;\n\n/**\n * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.\n * @param {number}\n * @returns {Array}\n */\nencode.LONGDATETIME = function(v) {\n    return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.LONGDATETIME = constant(8);\n\n/**\n * Convert a 4-char tag to a list of 4 bytes.\n * @param {string}\n * @returns {Array}\n */\nencode.TAG = function(v) {\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');\n    return [v.charCodeAt(0),\n            v.charCodeAt(1),\n            v.charCodeAt(2),\n            v.charCodeAt(3)];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.TAG = constant(4);\n\n// CFF data types ///////////////////////////////////////////////////////////\n\nencode.Card8 = encode.BYTE;\nsizeOf.Card8 = sizeOf.BYTE;\n\nencode.Card16 = encode.USHORT;\nsizeOf.Card16 = sizeOf.USHORT;\n\nencode.OffSize = encode.BYTE;\nsizeOf.OffSize = sizeOf.BYTE;\n\nencode.SID = encode.USHORT;\nsizeOf.SID = sizeOf.USHORT;\n\n// Convert a numeric operand or charstring number to a variable-size list of bytes.\n/**\n * Convert a numeric operand or charstring number to a variable-size list of bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.NUMBER = function(v) {\n    if (v >= -107 && v <= 107) {\n        return [v + 139];\n    } else if (v >= 108 && v <= 1131) {\n        v = v - 108;\n        return [(v >> 8) + 247, v & 0xFF];\n    } else if (v >= -1131 && v <= -108) {\n        v = -v - 108;\n        return [(v >> 8) + 251, v & 0xFF];\n    } else if (v >= -32768 && v <= 32767) {\n        return encode.NUMBER16(v);\n    } else {\n        return encode.NUMBER32(v);\n    }\n};\n\n/**\n * @param {number}\n * @returns {number}\n */\nsizeOf.NUMBER = function(v) {\n    return encode.NUMBER(v).length;\n};\n\n/**\n * Convert a signed number between -32768 and +32767 to a three-byte value.\n * This ensures we always use three bytes, but is not the most compact format.\n * @param {number}\n * @returns {Array}\n */\nencode.NUMBER16 = function(v) {\n    return [28, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.NUMBER16 = constant(3);\n\n/**\n * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.\n * This is useful if you want to be sure you always use four bytes,\n * at the expense of wasting a few bytes for smaller numbers.\n * @param {number}\n * @returns {Array}\n */\nencode.NUMBER32 = function(v) {\n    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.NUMBER32 = constant(5);\n\n/**\n * @param {number}\n * @returns {Array}\n */\nencode.REAL = function(v) {\n    let value = v.toString();\n\n    // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)\n    // This code converts it back to a number without the epsilon.\n    const m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n    if (m) {\n        const epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));\n        value = (Math.round(v * epsilon) / epsilon).toString();\n    }\n\n    let nibbles = '';\n    for (let i = 0, ii = value.length; i < ii; i += 1) {\n        const c = value[i];\n        if (c === 'e') {\n            nibbles += value[++i] === '-' ? 'c' : 'b';\n        } else if (c === '.') {\n            nibbles += 'a';\n        } else if (c === '-') {\n            nibbles += 'e';\n        } else {\n            nibbles += c;\n        }\n    }\n\n    nibbles += (nibbles.length & 1) ? 'f' : 'ff';\n    const out = [30];\n    for (let i = 0, ii = nibbles.length; i < ii; i += 2) {\n        out.push(parseInt(nibbles.substr(i, 2), 16));\n    }\n\n    return out;\n};\n\n/**\n * @param {number}\n * @returns {number}\n */\nsizeOf.REAL = function(v) {\n    return encode.REAL(v).length;\n};\n\nencode.NAME = encode.CHARARRAY;\nsizeOf.NAME = sizeOf.CHARARRAY;\n\nencode.STRING = encode.CHARARRAY;\nsizeOf.STRING = sizeOf.CHARARRAY;\n\n/**\n * @param {DataView} data\n * @param {number} offset\n * @param {number} numBytes\n * @returns {string}\n */\ndecode.UTF8 = function(data, offset, numBytes) {\n    const codePoints = [];\n    const numChars = numBytes;\n    for (let j = 0; j < numChars; j++, offset += 1) {\n        codePoints[j] = data.getUint8(offset);\n    }\n\n    return String.fromCharCode.apply(null, codePoints);\n};\n\n/**\n * @param {DataView} data\n * @param {number} offset\n * @param {number} numBytes\n * @returns {string}\n */\ndecode.UTF16 = function(data, offset, numBytes) {\n    const codePoints = [];\n    const numChars = numBytes / 2;\n    for (let j = 0; j < numChars; j++, offset += 2) {\n        codePoints[j] = data.getUint16(offset);\n    }\n\n    return String.fromCharCode.apply(null, codePoints);\n};\n\n/**\n * Convert a JavaScript string to UTF16-BE.\n * @param {string}\n * @returns {Array}\n */\nencode.UTF16 = function(v) {\n    const b = [];\n    for (let i = 0; i < v.length; i += 1) {\n        const codepoint = v.charCodeAt(i);\n        b[b.length] = (codepoint >> 8) & 0xFF;\n        b[b.length] = codepoint & 0xFF;\n    }\n\n    return b;\n};\n\n/**\n * @param {string}\n * @returns {number}\n */\nsizeOf.UTF16 = function(v) {\n    return v.length * 2;\n};\n\n// Data for converting old eight-bit Macintosh encodings to Unicode.\n// This representation is optimized for decoding; encoding is slower\n// and needs more memory. The assumption is that all opentype.js users\n// want to open fonts, but saving a font will be comparatively rare\n// so it can be more expensive. Keyed by IANA character set name.\n//\n// Python script for generating these strings:\n//\n//     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])\n//     print(s.encode('utf-8'))\n/**\n * @private\n */\nconst eightBitMacEncodings = {\n    'x-mac-croatian':  // Python: 'mac_croatian'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +\n    '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n    'x-mac-cyrillic':  // Python: 'mac_cyrillic'\n    'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +\n    'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',\n    'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +\n    'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n    'x-mac-greek':  // Python: 'mac_greek'\n    'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +\n    'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n    'x-mac-icelandic':  // Python: 'mac_iceland'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT\n    'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +\n    'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n    'x-mac-ce':  // Python: 'mac_latin2'\n    'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +\n    'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n    macintosh:  // Python: 'mac_roman'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-romanian':  // Python: 'mac_romanian'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-turkish':  // Python: 'mac_turkish'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n};\n\n/**\n * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\n * string, or 'undefined' if the encoding is unsupported. For example, we do\n * not support Chinese, Japanese or Korean because these would need large\n * mapping tables.\n * @param {DataView} dataView\n * @param {number} offset\n * @param {number} dataLength\n * @param {string} encoding\n * @returns {string}\n */\ndecode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n    const table = eightBitMacEncodings[encoding];\n    if (table === undefined) {\n        return undefined;\n    }\n\n    let result = '';\n    for (let i = 0; i < dataLength; i++) {\n        const c = dataView.getUint8(offset + i);\n        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n        // mapped to U+0000..U+007F; we only need to look up the others.\n        if (c <= 0x7F) {\n            result += String.fromCharCode(c);\n        } else {\n            result += table[c & 0x7F];\n        }\n    }\n\n    return result;\n};\n\n// Helper function for encode.MACSTRING. Returns a dictionary for mapping\n// Unicode character codes to their 8-bit MacOS equivalent. This table\n// is not exactly a super cheap data structure, but we do not care because\n// encoding Macintosh strings is only rarely needed in typical applications.\nconst macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();\nlet macEncodingCacheKeys;\nconst getMacEncodingTable = function (encoding) {\n    // Since we use encoding as a cache key for WeakMap, it has to be\n    // a String object and not a literal. And at least on NodeJS 2.10.1,\n    // WeakMap requires that the same String instance is passed for cache hits.\n    if (!macEncodingCacheKeys) {\n        macEncodingCacheKeys = {};\n        for (let e in eightBitMacEncodings) {\n            /*jshint -W053 */  // Suppress \"Do not use String as a constructor.\"\n            macEncodingCacheKeys[e] = new String(e);\n        }\n    }\n\n    const cacheKey = macEncodingCacheKeys[encoding];\n    if (cacheKey === undefined) {\n        return undefined;\n    }\n\n    // We can't do \"if (cache.has(key)) {return cache.get(key)}\" here:\n    // since garbage collection may run at any time, it could also kick in\n    // between the calls to cache.has() and cache.get(). In that case,\n    // we would return 'undefined' even though we do support the encoding.\n    if (macEncodingTableCache) {\n        const cachedTable = macEncodingTableCache.get(cacheKey);\n        if (cachedTable !== undefined) {\n            return cachedTable;\n        }\n    }\n\n    const decodingTable = eightBitMacEncodings[encoding];\n    if (decodingTable === undefined) {\n        return undefined;\n    }\n\n    const encodingTable = {};\n    for (let i = 0; i < decodingTable.length; i++) {\n        encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;\n    }\n\n    if (macEncodingTableCache) {\n        macEncodingTableCache.set(cacheKey, encodingTable);\n    }\n\n    return encodingTable;\n};\n\n/**\n * Encodes an old-style Macintosh string. Returns a byte array upon success.\n * If the requested encoding is unsupported, or if the input string contains\n * a character that cannot be expressed in the encoding, the function returns\n * 'undefined'.\n * @param {string} str\n * @param {string} encoding\n * @returns {Array}\n */\nencode.MACSTRING = function(str, encoding) {\n    const table = getMacEncodingTable(encoding);\n    if (table === undefined) {\n        return undefined;\n    }\n\n    const result = [];\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charCodeAt(i);\n\n        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n        // mapped to U+0000..U+007F; we only need to look up the others.\n        if (c >= 0x80) {\n            c = table[c];\n            if (c === undefined) {\n                // str contains a Unicode character that cannot be encoded\n                // in the requested encoding.\n                return undefined;\n            }\n        }\n        result[i] = c;\n        // result.push(c);\n    }\n\n    return result;\n};\n\n/**\n * @param {string} str\n * @param {string} encoding\n * @returns {number}\n */\nsizeOf.MACSTRING = function(str, encoding) {\n    const b = encode.MACSTRING(str, encoding);\n    if (b !== undefined) {\n        return b.length;\n    } else {\n        return 0;\n    }\n};\n\n// Helper for encode.VARDELTAS\nfunction isByteEncodable(value) {\n    return value >= -128 && value <= 127;\n}\n\n// Helper for encode.VARDELTAS\nfunction encodeVarDeltaRunAsZeroes(deltas, pos, result) {\n    let runLength = 0;\n    const numDeltas = deltas.length;\n    while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {\n        ++pos;\n        ++runLength;\n    }\n    result.push(0x80 | (runLength - 1));\n    return pos;\n}\n\n// Helper for encode.VARDELTAS\nfunction encodeVarDeltaRunAsBytes(deltas, offset, result) {\n    let runLength = 0;\n    const numDeltas = deltas.length;\n    let pos = offset;\n    while (pos < numDeltas && runLength < 64) {\n        const value = deltas[pos];\n        if (!isByteEncodable(value)) {\n            break;\n        }\n\n        // Within a byte-encoded run of deltas, a single zero is best\n        // stored literally as 0x00 value. However, if we have two or\n        // more zeroes in a sequence, it is better to start a new run.\n        // Fore example, the sequence of deltas [15, 15, 0, 15, 15]\n        // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero\n        // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)\n        // when starting a new run.\n        if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {\n            break;\n        }\n\n        ++pos;\n        ++runLength;\n    }\n    result.push(runLength - 1);\n    for (let i = offset; i < pos; ++i) {\n        result.push((deltas[i] + 256) & 0xff);\n    }\n    return pos;\n}\n\n// Helper for encode.VARDELTAS\nfunction encodeVarDeltaRunAsWords(deltas, offset, result) {\n    let runLength = 0;\n    const numDeltas = deltas.length;\n    let pos = offset;\n    while (pos < numDeltas && runLength < 64) {\n        const value = deltas[pos];\n\n        // Within a word-encoded run of deltas, it is easiest to start\n        // a new run (with a different encoding) whenever we encounter\n        // a zero value. For example, the sequence [0x6666, 0, 0x7777]\n        // needs 7 bytes when storing the zero inside the current run\n        // (42 66 66 00 00 77 77), and equally 7 bytes when starting a\n        // new run (40 66 66 80 40 77 77).\n        if (value === 0) {\n            break;\n        }\n\n        // Within a word-encoded run of deltas, a single value in the\n        // range (-128..127) should be encoded within the current run\n        // because it is more compact. For example, the sequence\n        // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value\n        // literally (42 66 66 00 02 77 77), but 8 bytes when starting\n        // a new run (40 66 66 00 02 40 77 77).\n        if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {\n            break;\n        }\n\n        ++pos;\n        ++runLength;\n    }\n    result.push(0x40 | (runLength - 1));\n    for (let i = offset; i < pos; ++i) {\n        const val = deltas[i];\n        result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);\n    }\n    return pos;\n}\n\n/**\n * Encode a list of variation adjustment deltas.\n *\n * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.\n * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted\n * when generating instances of variation fonts.\n *\n * @see https://www.microsoft.com/typography/otspec/gvar.htm\n * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html\n * @param {Array}\n * @return {Array}\n */\nencode.VARDELTAS = function(deltas) {\n    let pos = 0;\n    const result = [];\n    while (pos < deltas.length) {\n        const value = deltas[pos];\n        if (value === 0) {\n            pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);\n        } else if (value >= -128 && value <= 127) {\n            pos = encodeVarDeltaRunAsBytes(deltas, pos, result);\n        } else {\n            pos = encodeVarDeltaRunAsWords(deltas, pos, result);\n        }\n    }\n    return result;\n};\n\n// Convert a list of values to a CFF INDEX structure.\n// The values should be objects containing name / type / value.\n/**\n * @param {Array} l\n * @returns {Array}\n */\nencode.INDEX = function(l) {\n    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,\n    //    i, v;\n    // Because we have to know which data type to use to encode the offsets,\n    // we have to go through the values twice: once to encode the data and\n    // calculate the offsets, then again to encode the offsets using the fitting data type.\n    let offset = 1; // First offset is always 1.\n    const offsets = [offset];\n    const data = [];\n    for (let i = 0; i < l.length; i += 1) {\n        const v = encode.OBJECT(l[i]);\n        Array.prototype.push.apply(data, v);\n        offset += v.length;\n        offsets.push(offset);\n    }\n\n    if (data.length === 0) {\n        return [0, 0];\n    }\n\n    const encodedOffsets = [];\n    const offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;\n    const offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];\n    for (let i = 0; i < offsets.length; i += 1) {\n        const encodedOffset = offsetEncoder(offsets[i]);\n        Array.prototype.push.apply(encodedOffsets, encodedOffset);\n    }\n\n    return Array.prototype.concat(encode.Card16(l.length),\n                           encode.OffSize(offSize),\n                           encodedOffsets,\n                           data);\n};\n\n/**\n * @param {Array}\n * @returns {number}\n */\nsizeOf.INDEX = function(v) {\n    return encode.INDEX(v).length;\n};\n\n/**\n * Convert an object to a CFF DICT structure.\n * The keys should be numeric.\n * The values should be objects containing name / type / value.\n * @param {Object} m\n * @returns {Array}\n */\nencode.DICT = function(m) {\n    let d = [];\n    const keys = Object.keys(m);\n    const length = keys.length;\n\n    for (let i = 0; i < length; i += 1) {\n        // Object.keys() return string keys, but our keys are always numeric.\n        const k = parseInt(keys[i], 0);\n        const v = m[k];\n        // Value comes before the key.\n        d = d.concat(encode.OPERAND(v.value, v.type));\n        d = d.concat(encode.OPERATOR(k));\n    }\n\n    return d;\n};\n\n/**\n * @param {Object}\n * @returns {number}\n */\nsizeOf.DICT = function(m) {\n    return encode.DICT(m).length;\n};\n\n/**\n * @param {number}\n * @returns {Array}\n */\nencode.OPERATOR = function(v) {\n    if (v < 1200) {\n        return [v];\n    } else {\n        return [12, v - 1200];\n    }\n};\n\n/**\n * @param {Array} v\n * @param {string}\n * @returns {Array}\n */\nencode.OPERAND = function(v, type) {\n    let d = [];\n    if (Array.isArray(type)) {\n        for (let i = 0; i < type.length; i += 1) {\n            _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(v.length === type.length, 'Not enough arguments given for type' + type);\n            d = d.concat(encode.OPERAND(v[i], type[i]));\n        }\n    } else {\n        if (type === 'SID') {\n            d = d.concat(encode.NUMBER(v));\n        } else if (type === 'offset') {\n            // We make it easy for ourselves and always encode offsets as\n            // 4 bytes. This makes offset calculation for the top dict easier.\n            d = d.concat(encode.NUMBER32(v));\n        } else if (type === 'number') {\n            d = d.concat(encode.NUMBER(v));\n        } else if (type === 'real') {\n            d = d.concat(encode.REAL(v));\n        } else {\n            throw new Error('Unknown operand type ' + type);\n            // FIXME Add support for booleans\n        }\n    }\n\n    return d;\n};\n\nencode.OP = encode.BYTE;\nsizeOf.OP = sizeOf.BYTE;\n\n// memoize charstring encoding using WeakMap if available\nconst wmm = typeof WeakMap === 'function' && new WeakMap();\n\n/**\n * Convert a list of CharString operations to bytes.\n * @param {Array}\n * @returns {Array}\n */\nencode.CHARSTRING = function(ops) {\n    // See encode.MACSTRING for why we don't do \"if (wmm && wmm.has(ops))\".\n    if (wmm) {\n        const cachedValue = wmm.get(ops);\n        if (cachedValue !== undefined) {\n            return cachedValue;\n        }\n    }\n\n    let d = [];\n    const length = ops.length;\n\n    for (let i = 0; i < length; i += 1) {\n        const op = ops[i];\n        d = d.concat(encode[op.type](op.value));\n    }\n\n    if (wmm) {\n        wmm.set(ops, d);\n    }\n\n    return d;\n};\n\n/**\n * @param {Array}\n * @returns {number}\n */\nsizeOf.CHARSTRING = function(ops) {\n    return encode.CHARSTRING(ops).length;\n};\n\n// Utility functions ////////////////////////////////////////////////////////\n\n/**\n * Convert an object containing name / type / value to bytes.\n * @param {Object}\n * @returns {Array}\n */\nencode.OBJECT = function(v) {\n    const encodingFunction = encode[v.type];\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);\n    return encodingFunction(v.value);\n};\n\n/**\n * @param {Object}\n * @returns {number}\n */\nsizeOf.OBJECT = function(v) {\n    const sizeOfFunction = sizeOf[v.type];\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);\n    return sizeOfFunction(v.value);\n};\n\n/**\n * Convert a table object to bytes.\n * A table contains a list of fields containing the metadata (name, type and default value).\n * The table itself has the field values set as attributes.\n * @param {opentype.Table}\n * @returns {Array}\n */\nencode.TABLE = function(table) {\n    let d = [];\n    const length = table.fields.length;\n    const subtables = [];\n    const subtableOffsets = [];\n\n    for (let i = 0; i < length; i += 1) {\n        const field = table.fields[i];\n        const encodingFunction = encode[field.type];\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');\n        let value = table[field.name];\n        if (value === undefined) {\n            value = field.value;\n        }\n\n        const bytes = encodingFunction(value);\n\n        if (field.type === 'TABLE') {\n            subtableOffsets.push(d.length);\n            d = d.concat([0, 0]);\n            subtables.push(bytes);\n        } else {\n            d = d.concat(bytes);\n        }\n    }\n\n    for (let i = 0; i < subtables.length; i += 1) {\n        const o = subtableOffsets[i];\n        const offset = d.length;\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(offset < 65536, 'Table ' + table.tableName + ' too big.');\n        d[o] = offset >> 8;\n        d[o + 1] = offset & 0xff;\n        d = d.concat(subtables[i]);\n    }\n\n    return d;\n};\n\n/**\n * @param {opentype.Table}\n * @returns {number}\n */\nsizeOf.TABLE = function(table) {\n    let numBytes = 0;\n    const length = table.fields.length;\n\n    for (let i = 0; i < length; i += 1) {\n        const field = table.fields[i];\n        const sizeOfFunction = sizeOf[field.type];\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');\n        let value = table[field.name];\n        if (value === undefined) {\n            value = field.value;\n        }\n\n        numBytes += sizeOfFunction(value);\n\n        // Subtables take 2 more bytes for offsets.\n        if (field.type === 'TABLE') {\n            numBytes += 2;\n        }\n    }\n\n    return numBytes;\n};\n\nencode.RECORD = encode.TABLE;\nsizeOf.RECORD = sizeOf.TABLE;\n\n// Merge in a list of bytes.\nencode.LITERAL = function(v) {\n    return v;\n};\n\nsizeOf.LITERAL = function(v) {\n    return v.length;\n};\n\n\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/types.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/util.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/util.js ***!
  \*********************************************************************************/
/*! exports provided: isBrowser, isNode, nodeBufferToArrayBuffer, arrayBufferToNodeBuffer, checkArgument */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isBrowser\", function() { return isBrowser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNode\", function() { return isNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nodeBufferToArrayBuffer\", function() { return nodeBufferToArrayBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arrayBufferToNodeBuffer\", function() { return arrayBufferToNodeBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkArgument\", function() { return checkArgument; });\nfunction isBrowser() {\n    return typeof window !== 'undefined';\n}\n\nfunction isNode() {\n    return typeof window === 'undefined';\n}\n\nfunction nodeBufferToArrayBuffer(buffer) {\n    const ab = new ArrayBuffer(buffer.length);\n    const view = new Uint8Array(ab);\n    for (let i = 0; i < buffer.length; ++i) {\n        view[i] = buffer[i];\n    }\n\n    return ab;\n}\n\nfunction arrayBufferToNodeBuffer(ab) {\n    const buffer = new Buffer(ab.byteLength);\n    const view = new Uint8Array(ab);\n    for (let i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n    }\n\n    return buffer;\n}\n\nfunction checkArgument(expression, message) {\n    if (!expression) {\n        throw message;\n    }\n}\n\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"../../node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/util.js?");

/***/ }),

/***/ "../../node_modules/parse-svg-path/index.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/parse-svg-path/index.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/parse-svg-path/index.js?");

/***/ }),

/***/ "../../node_modules/point-line-distance/index.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/point-line-distance/index.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * point-line-distance\n *\n * Copyright (c) 2015 Mauricio Poppe\n * Licensed under the MIT license.\n */\n\n\n\nvar distanceSquared = __webpack_require__(/*! ./squared */ \"../../node_modules/point-line-distance/squared.js\")\n\nmodule.exports = function (point, a, b) {\n  return Math.sqrt(distanceSquared(point, a, b))\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/point-line-distance/index.js?");

/***/ }),

/***/ "../../node_modules/point-line-distance/squared.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/point-line-distance/squared.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var subtract = __webpack_require__(/*! gl-vec3/subtract */ \"../../node_modules/gl-vec3/subtract.js\")\nvar cross = __webpack_require__(/*! gl-vec3/cross */ \"../../node_modules/gl-vec3/cross.js\")\nvar squaredLength = __webpack_require__(/*! gl-vec3/squaredLength */ \"../../node_modules/gl-vec3/squaredLength.js\")\nvar ab = []\nvar ap = []\nvar cr = []\n\nmodule.exports = function (p, a, b) {\n  // // == vector solution\n  // var normalize = require('gl-vec3/normalize')\n  // var scaleAndAdd = require('gl-vec3/scaleAndAdd')\n  // var dot = require('gl-vec3/dot')\n  // var squaredDistance = require('gl-vec3/squaredDistance')\n  // // n = vector `ab` normalized\n  // var n = []\n  // // projection = projection of `point` on `n`\n  // var projection = []\n  // normalize(n, subtract(n, a, b))\n  // scaleAndAdd(projection, a, n, dot(n, p))\n  // return squaredDistance(projection, p)\n\n  // == parallelogram solution\n  //\n  //            s\n  //      __a________b__\n  //       /   |    /\n  //      /   h|   /\n  //     /_____|__/\n  //    p\n  //\n  //  s = b - a\n  //  area = s * h\n  //  |ap x s| = s * h\n  //  h = |ap x s| / s\n  //\n  subtract(ab, b, a)\n  subtract(ap, p, a)\n  var area = squaredLength(cross(cr, ap, ab))\n  var s = squaredLength(ab)\n  if (s === 0) {\n    throw Error('a and b are the same point')\n  }\n  return area / s\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/point-line-distance/squared.js?");

/***/ }),

/***/ "../../node_modules/polygon-clipping/dist/polygon-clipping.umd.js":
/*!*******************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/polygon-clipping/dist/polygon-clipping.umd.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, function () { 'use strict';\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  /* follows \"An implementation of top-down splaying\"\n   * by D. Sleator <sleator@cs.cmu.edu> March 1992\n   */\n\n  /**\n   * @typedef {*} Key\n   */\n\n  /**\n   * @typedef {*} Value\n   */\n\n  /**\n   * @typedef {function(node:Node):void} Visitor\n   */\n\n  /**\n   * @typedef {function(a:Key, b:Key):number} Comparator\n   */\n\n  /**\n   * @param {function(node:Node):string} NodePrinter\n   */\n\n  /**\n   * @typedef {Object}  Node\n   * @property {Key}    Key\n   * @property {Value=} data\n   * @property {Node}   left\n   * @property {Node}   right\n   */\n  var Node = function Node(key, data) {\n    _classCallCheck(this, Node);\n\n    this.key = key;\n    this.data = data;\n    this.left = null;\n    this.right = null;\n  };\n\n  function DEFAULT_COMPARE(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n  /**\n   * Simple top down splay, not requiring i to be in the tree t.\n   * @param {Key} i\n   * @param {Node?} t\n   * @param {Comparator} comparator\n   */\n\n\n  function splay(i, t, comparator) {\n    if (t === null) return t;\n    var l, r, y;\n    var N = new Node();\n    l = r = N;\n\n    while (true) {\n      var cmp = comparator(i, t.key); //if (i < t.key) {\n\n      if (cmp < 0) {\n        if (t.left === null) break; //if (i < t.left.key) {\n\n        if (comparator(i, t.left.key) < 0) {\n          y = t.left;\n          /* rotate right */\n\n          t.left = y.right;\n          y.right = t;\n          t = y;\n          if (t.left === null) break;\n        }\n\n        r.left = t;\n        /* link right */\n\n        r = t;\n        t = t.left; //} else if (i > t.key) {\n      } else if (cmp > 0) {\n        if (t.right === null) break; //if (i > t.right.key) {\n\n        if (comparator(i, t.right.key) > 0) {\n          y = t.right;\n          /* rotate left */\n\n          t.right = y.left;\n          y.left = t;\n          t = y;\n          if (t.right === null) break;\n        }\n\n        l.right = t;\n        /* link left */\n\n        l = t;\n        t = t.right;\n      } else {\n        break;\n      }\n    }\n    /* assemble */\n\n\n    l.right = t.left;\n    r.left = t.right;\n    t.left = N.right;\n    t.right = N.left;\n    return t;\n  }\n  /**\n   * @param  {Key}        i\n   * @param  {Value}      data\n   * @param  {Comparator} comparator\n   * @param  {Tree}       tree\n   * @return {Node}      root\n   */\n\n\n  function _insert(i, data, t, comparator, tree) {\n    var node = new Node(i, data);\n    tree._size++;\n\n    if (t === null) {\n      node.left = node.right = null;\n      return node;\n    }\n\n    t = splay(i, t, comparator);\n    var cmp = comparator(i, t.key);\n\n    if (cmp < 0) {\n      node.left = t.left;\n      node.right = t;\n      t.left = null;\n    } else if (cmp >= 0) {\n      node.right = t.right;\n      node.left = t;\n      t.right = null;\n    }\n\n    return node;\n  }\n  /**\n   * Insert i into the tree t, unless it's already there.\n   * @param  {Key}        i\n   * @param  {Value}      data\n   * @param  {Comparator} comparator\n   * @param  {Tree}       tree\n   * @return {Node}       root\n   */\n\n\n  function _add(i, data, t, comparator, tree) {\n    var node = new Node(i, data);\n\n    if (t === null) {\n      node.left = node.right = null;\n      tree._size++;\n      return node;\n    }\n\n    t = splay(i, t, comparator);\n    var cmp = comparator(i, t.key);\n    if (cmp === 0) return t;else {\n      if (cmp < 0) {\n        node.left = t.left;\n        node.right = t;\n        t.left = null;\n      } else if (cmp > 0) {\n        node.right = t.right;\n        node.left = t;\n        t.right = null;\n      }\n\n      tree._size++;\n      return node;\n    }\n  }\n  /**\n   * Deletes i from the tree if it's there\n   * @param {Key}        i\n   * @param {Tree}       tree\n   * @param {Comparator} comparator\n   * @param {Tree}       tree\n   * @return {Node}      new root\n   */\n\n\n  function _remove(i, t, comparator, tree) {\n    var x;\n    if (t === null) return null;\n    t = splay(i, t, comparator);\n    var cmp = comparator(i, t.key);\n\n    if (cmp === 0) {\n      /* found it */\n      if (t.left === null) {\n        x = t.right;\n      } else {\n        x = splay(i, t.left, comparator);\n        x.right = t.right;\n      }\n\n      tree._size--;\n      return x;\n    }\n\n    return t;\n    /* It wasn't there */\n  }\n\n  function _split(key, v, comparator) {\n    var left, right;\n\n    if (v === null) {\n      left = right = null;\n    } else {\n      v = splay(key, v, comparator);\n      var cmp = comparator(v.key, key);\n\n      if (cmp === 0) {\n        left = v.left;\n        right = v.right;\n      } else if (cmp < 0) {\n        right = v.right;\n        v.right = null;\n        left = v;\n      } else {\n        left = v.left;\n        v.left = null;\n        right = v;\n      }\n    }\n\n    return {\n      left: left,\n      right: right\n    };\n  }\n\n  function merge(left, right, comparator) {\n    if (right === null) return left;\n    if (left === null) return right;\n    right = splay(left.key, right, comparator);\n    right.left = left;\n    return right;\n  }\n  /**\n   * Prints level of the tree\n   * @param  {Node}                        root\n   * @param  {String}                      prefix\n   * @param  {Boolean}                     isTail\n   * @param  {Array<string>}               out\n   * @param  {Function(node:Node):String}  printNode\n   */\n\n\n  function printRow(root, prefix, isTail, out, printNode) {\n    if (root) {\n      out(\"\".concat(prefix).concat(isTail ? '└── ' : '├── ').concat(printNode(root), \"\\n\"));\n      var indent = prefix + (isTail ? '    ' : '│   ');\n      if (root.left) printRow(root.left, indent, false, out, printNode);\n      if (root.right) printRow(root.right, indent, true, out, printNode);\n    }\n  }\n\n  var Tree =\n  /*#__PURE__*/\n  function () {\n    function Tree() {\n      var comparator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_COMPARE;\n\n      _classCallCheck(this, Tree);\n\n      this._comparator = comparator;\n      this._root = null;\n      this._size = 0;\n    }\n    /**\n     * Inserts a key, allows duplicates\n     * @param  {Key}    key\n     * @param  {Value=} data\n     * @return {Node|null}\n     */\n\n\n    _createClass(Tree, [{\n      key: \"insert\",\n      value: function insert(key, data) {\n        return this._root = _insert(key, data, this._root, this._comparator, this);\n      }\n      /**\n       * Adds a key, if it is not present in the tree\n       * @param  {Key}    key\n       * @param  {Value=} data\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"add\",\n      value: function add(key, data) {\n        return this._root = _add(key, data, this._root, this._comparator, this);\n      }\n      /**\n       * @param  {Key} key\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove(key) {\n        this._root = _remove(key, this._root, this._comparator, this);\n      }\n      /**\n       * Removes and returns the node with smallest key\n       * @return {?Node}\n       */\n\n    }, {\n      key: \"pop\",\n      value: function pop() {\n        var node = this._root;\n\n        if (node) {\n          while (node.left) {\n            node = node.left;\n          }\n\n          this._root = splay(node.key, this._root, this._comparator);\n          this._root = _remove(node.key, this._root, this._comparator, this);\n          return {\n            key: node.key,\n            data: node.data\n          };\n        }\n\n        return null;\n      }\n      /**\n       * @param  {Key} key\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"findStatic\",\n      value: function findStatic(key) {\n        var current = this._root;\n        var compare = this._comparator;\n\n        while (current) {\n          var cmp = compare(key, current.key);\n          if (cmp === 0) return current;else if (cmp < 0) current = current.left;else current = current.right;\n        }\n\n        return null;\n      }\n      /**\n       * @param  {Key} key\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"find\",\n      value: function find(key) {\n        if (this._root) {\n          this._root = splay(key, this._root, this._comparator);\n          if (this._comparator(key, this._root.key) !== 0) return null;\n        }\n\n        return this._root;\n      }\n      /**\n       * @param  {Key} key\n       * @return {Boolean}\n       */\n\n    }, {\n      key: \"contains\",\n      value: function contains(key) {\n        var current = this._root;\n        var compare = this._comparator;\n\n        while (current) {\n          var cmp = compare(key, current.key);\n          if (cmp === 0) return true;else if (cmp < 0) current = current.left;else current = current.right;\n        }\n\n        return false;\n      }\n      /**\n       * @param  {Visitor} visitor\n       * @param  {*=}      ctx\n       * @return {SplayTree}\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(visitor, ctx) {\n        var current = this._root;\n        var Q = [];\n        /* Initialize stack s */\n\n        var done = false;\n\n        while (!done) {\n          if (current !== null) {\n            Q.push(current);\n            current = current.left;\n          } else {\n            if (Q.length !== 0) {\n              current = Q.pop();\n              visitor.call(ctx, current);\n              current = current.right;\n            } else done = true;\n          }\n        }\n\n        return this;\n      }\n      /**\n       * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n       * @param  {Key}      low\n       * @param  {Key}      high\n       * @param  {Function} fn\n       * @param  {*?}       ctx\n       * @return {SplayTree}\n       */\n\n    }, {\n      key: \"range\",\n      value: function range(low, high, fn, ctx) {\n        var Q = [];\n        var compare = this._comparator;\n        var node = this._root,\n            cmp;\n\n        while (Q.length !== 0 || node) {\n          if (node) {\n            Q.push(node);\n            node = node.left;\n          } else {\n            node = Q.pop();\n            cmp = compare(node.key, high);\n\n            if (cmp > 0) {\n              break;\n            } else if (compare(node.key, low) >= 0) {\n              if (fn.call(ctx, node)) return this; // stop if smth is returned\n            }\n\n            node = node.right;\n          }\n        }\n\n        return this;\n      }\n      /**\n       * Returns array of keys\n       * @return {Array<Key>}\n       */\n\n    }, {\n      key: \"keys\",\n      value: function keys() {\n        var keys = [];\n        this.forEach(function (_ref) {\n          var key = _ref.key;\n          return keys.push(key);\n        });\n        return keys;\n      }\n      /**\n       * Returns array of all the data in the nodes\n       * @return {Array<Value>}\n       */\n\n    }, {\n      key: \"values\",\n      value: function values() {\n        var values = [];\n        this.forEach(function (_ref2) {\n          var data = _ref2.data;\n          return values.push(data);\n        });\n        return values;\n      }\n      /**\n       * @return {Key|null}\n       */\n\n    }, {\n      key: \"min\",\n      value: function min() {\n        if (this._root) return this.minNode(this._root).key;\n        return null;\n      }\n      /**\n       * @return {Key|null}\n       */\n\n    }, {\n      key: \"max\",\n      value: function max() {\n        if (this._root) return this.maxNode(this._root).key;\n        return null;\n      }\n      /**\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"minNode\",\n      value: function minNode() {\n        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._root;\n        if (t) while (t.left) {\n          t = t.left;\n        }\n        return t;\n      }\n      /**\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"maxNode\",\n      value: function maxNode() {\n        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._root;\n        if (t) while (t.right) {\n          t = t.right;\n        }\n        return t;\n      }\n      /**\n       * Returns node at given index\n       * @param  {number} index\n       * @return {?Node}\n       */\n\n    }, {\n      key: \"at\",\n      value: function at(index) {\n        var current = this._root,\n            done = false,\n            i = 0;\n        var Q = [];\n\n        while (!done) {\n          if (current) {\n            Q.push(current);\n            current = current.left;\n          } else {\n            if (Q.length > 0) {\n              current = Q.pop();\n              if (i === index) return current;\n              i++;\n              current = current.right;\n            } else done = true;\n          }\n        }\n\n        return null;\n      }\n      /**\n       * @param  {Node}   d\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"next\",\n      value: function next(d) {\n        var root = this._root;\n        var successor = null;\n\n        if (d.right) {\n          successor = d.right;\n\n          while (successor.left) {\n            successor = successor.left;\n          }\n\n          return successor;\n        }\n\n        var comparator = this._comparator;\n\n        while (root) {\n          var cmp = comparator(d.key, root.key);\n          if (cmp === 0) break;else if (cmp < 0) {\n            successor = root;\n            root = root.left;\n          } else root = root.right;\n        }\n\n        return successor;\n      }\n      /**\n       * @param  {Node} d\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"prev\",\n      value: function prev(d) {\n        var root = this._root;\n        var predecessor = null;\n\n        if (d.left !== null) {\n          predecessor = d.left;\n\n          while (predecessor.right) {\n            predecessor = predecessor.right;\n          }\n\n          return predecessor;\n        }\n\n        var comparator = this._comparator;\n\n        while (root) {\n          var cmp = comparator(d.key, root.key);\n          if (cmp === 0) break;else if (cmp < 0) root = root.left;else {\n            predecessor = root;\n            root = root.right;\n          }\n        }\n\n        return predecessor;\n      }\n      /**\n       * @return {SplayTree}\n       */\n\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        this._root = null;\n        this._size = 0;\n        return this;\n      }\n      /**\n       * @return {NodeList}\n       */\n\n    }, {\n      key: \"toList\",\n      value: function toList() {\n        return _toList(this._root);\n      }\n      /**\n       * Bulk-load items. Both array have to be same size\n       * @param  {Array<Key>}    keys\n       * @param  {Array<Value>}  [values]\n       * @param  {Boolean}       [presort=false] Pre-sort keys and values, using\n       *                                         tree's comparator. Sorting is done\n       *                                         in-place\n       * @return {AVLTree}\n       */\n\n    }, {\n      key: \"load\",\n      value: function load() {\n        var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var presort = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var size = keys.length;\n        var comparator = this._comparator; // sort if needed\n\n        if (presort) sort(keys, values, 0, size - 1, comparator);\n\n        if (this._root === null) {\n          // empty tree\n          this._root = loadRecursive(this._root, keys, values, 0, size);\n          this._size = size;\n        } else {\n          // that re-builds the whole tree from two in-order traversals\n          var mergedList = mergeLists(this.toList(), createList(keys, values), comparator);\n          size = this._size + size;\n          this._root = sortedListToBST({\n            head: mergedList\n          }, 0, size);\n        }\n\n        return this;\n      }\n      /**\n       * @return {Boolean}\n       */\n\n    }, {\n      key: \"isEmpty\",\n      value: function isEmpty() {\n        return this._root === null;\n      }\n    }, {\n      key: \"toString\",\n\n      /**\n       * @param  {NodePrinter=} printNode\n       * @return {String}\n       */\n      value: function toString() {\n        var printNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (n) {\n          return n.key;\n        };\n        var out = [];\n        printRow(this._root, '', true, function (v) {\n          return out.push(v);\n        }, printNode);\n        return out.join('');\n      }\n    }, {\n      key: \"update\",\n      value: function update(key, newKey, newData) {\n        var comparator = this._comparator;\n\n        var _split2 = _split(key, this._root, comparator),\n            left = _split2.left,\n            right = _split2.right;\n\n        this._size--;\n\n        if (comparator(key, newKey) < 0) {\n          right = _insert(newKey, newData, right, comparator, this);\n        } else {\n          left = _insert(newKey, newData, left, comparator, this);\n        }\n\n        this._root = merge(left, right, comparator);\n      }\n    }, {\n      key: \"split\",\n      value: function split(key) {\n        return _split(key, this._root, this._comparator);\n      }\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this._size;\n      }\n    }]);\n\n    return Tree;\n  }();\n\n  function loadRecursive(parent, keys, values, start, end) {\n    var size = end - start;\n\n    if (size > 0) {\n      var middle = start + Math.floor(size / 2);\n      var key = keys[middle];\n      var data = values[middle];\n      var node = {\n        key: key,\n        data: data,\n        parent: parent\n      };\n      node.left = loadRecursive(node, keys, values, start, middle);\n      node.right = loadRecursive(node, keys, values, middle + 1, end);\n      return node;\n    }\n\n    return null;\n  }\n\n  function createList(keys, values) {\n    var head = {\n      next: null\n    };\n    var p = head;\n\n    for (var i = 0; i < keys.length; i++) {\n      p = p.next = {\n        key: keys[i],\n        data: values[i]\n      };\n    }\n\n    p.next = null;\n    return head.next;\n  }\n\n  function _toList(root) {\n    var current = root;\n    var Q = [],\n        done = false;\n    var head = {\n      next: null\n    };\n    var p = head;\n\n    while (!done) {\n      if (current) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length > 0) {\n          current = p = p.next = Q.pop();\n          current = current.right;\n        } else done = true;\n      }\n    }\n\n    p.next = null; // that'll work even if the tree was empty\n\n    return head.next;\n  }\n\n  function sortedListToBST(list, start, end) {\n    var size = end - start;\n\n    if (size > 0) {\n      var middle = start + Math.floor(size / 2);\n      var left = sortedListToBST(list, start, middle);\n      var root = list.head;\n      root.left = left;\n      list.head = list.head.next;\n      root.right = sortedListToBST(list, middle + 1, end);\n      return root;\n    }\n\n    return null;\n  }\n\n  function mergeLists(l1, l2) {\n    var compare = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (a, b) {\n      return a - b;\n    };\n    var head = {}; // dummy\n\n    var p = head;\n    var p1 = l1;\n    var p2 = l2;\n\n    while (p1 !== null && p2 !== null) {\n      if (compare(p1.key, p2.key) < 0) {\n        p.next = p1;\n        p1 = p1.next;\n      } else {\n        p.next = p2;\n        p2 = p2.next;\n      }\n\n      p = p.next;\n    }\n\n    if (p1 !== null) p.next = p1;else if (p2 !== null) p.next = p2;\n    return head.next;\n  }\n\n  function sort(keys, values, left, right, compare) {\n    if (left >= right) return;\n    var pivot = keys[left + right >> 1];\n    var i = left - 1;\n    var j = right + 1;\n\n    while (true) {\n      do {\n        i++;\n      } while (compare(keys[i], pivot) < 0);\n\n      do {\n        j--;\n      } while (compare(keys[j], pivot) > 0);\n\n      if (i >= j) break;\n      var tmp = keys[i];\n      keys[i] = keys[j];\n      keys[j] = tmp;\n      tmp = values[i];\n      values[i] = values[j];\n      values[j] = tmp;\n    }\n\n    sort(keys, values, left, j, compare);\n    sort(keys, values, j + 1, right, compare);\n  }\n\n  /* Javascript doesn't do integer math. Everything is\n   * floating point with percision Number.EPSILON.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n   */\n  var epsilon = Number.EPSILON; // IE Polyfill\n\n  if (epsilon === undefined) epsilon = Math.pow(2, -52);\n  var EPSILON_SQ = epsilon * epsilon;\n  /* FLP comparator */\n\n  var cmp = function cmp(a, b) {\n    // check if they're both 0\n    if (-epsilon < a && a < epsilon) {\n      if (-epsilon < b && b < epsilon) {\n        return 0;\n      }\n    } // check if they're flp equal\n\n\n    if ((a - b) * (a - b) < EPSILON_SQ * a * b) {\n      return 0;\n    } // normal comparison\n\n\n    return a < b ? -1 : 1;\n  };\n  /* Greedy comparison. Two numbers are defined to touch\n   * if their midpoint is indistinguishable from either. */\n\n  var touch = function touch(a, b) {\n    var m = (a + b) / 2;\n    return cmp(m, a) === 0 || cmp(m, b) === 0;\n  };\n  /* Greedy comparison. Two points are defined to touch\n   * if their midpoint is indistinguishable from either. */\n\n  var touchPoints = function touchPoints(aPt, bPt) {\n    // call directly to (skip touch()) cmp() for performance boost\n    var mx = (aPt.x + bPt.x) / 2;\n    var aXMiss = cmp(mx, aPt.x) !== 0;\n    if (aXMiss && cmp(mx, bPt.x) !== 0) return false;\n    var my = (aPt.y + bPt.y) / 2;\n    var aYMiss = cmp(my, aPt.y) !== 0;\n    if (aYMiss && cmp(my, bPt.y) !== 0) return false; // we have touching on both x & y, we have to make sure it's\n    // not just on opposite points thou\n\n    if (aYMiss && aYMiss) return true;\n    if (!aYMiss && !aYMiss) return true;\n    return false;\n  };\n\n  /* Cross Product of two vectors with first point at origin */\n\n  var crossProduct = function crossProduct(a, b) {\n    return a.x * b.y - a.y * b.x;\n  };\n  /* Dot Product of two vectors with first point at origin */\n\n  var dotProduct = function dotProduct(a, b) {\n    return a.x * b.x + a.y * b.y;\n  };\n  /* Comparator for two vectors with same starting point */\n\n  var compareVectorAngles = function compareVectorAngles(basePt, endPt1, endPt2) {\n    var v1 = {\n      x: endPt1.x - basePt.x,\n      y: endPt1.y - basePt.y\n    };\n    var v2 = {\n      x: endPt2.x - basePt.x,\n      y: endPt2.y - basePt.y\n    };\n    var kross = crossProduct(v1, v2);\n    return cmp(kross, 0);\n  };\n  var length = function length(v) {\n    return Math.sqrt(dotProduct(v, v));\n  };\n  /* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\n\n  var sineOfAngle = function sineOfAngle(pShared, pBase, pAngle) {\n    var vBase = {\n      x: pBase.x - pShared.x,\n      y: pBase.y - pShared.y\n    };\n    var vAngle = {\n      x: pAngle.x - pShared.x,\n      y: pAngle.y - pShared.y\n    };\n    return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase);\n  };\n  /* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\n\n  var cosineOfAngle = function cosineOfAngle(pShared, pBase, pAngle) {\n    var vBase = {\n      x: pBase.x - pShared.x,\n      y: pBase.y - pShared.y\n    };\n    var vAngle = {\n      x: pAngle.x - pShared.x,\n      y: pAngle.y - pShared.y\n    };\n    return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase);\n  };\n  /* Get the closest point on an line (defined by two points)\n   * to another point. */\n\n  var closestPoint = function closestPoint(ptA1, ptA2, ptB) {\n    if (ptA1.x === ptA2.x) return {\n      x: ptA1.x,\n      y: ptB.y // vertical vector\n\n    };\n    if (ptA1.y === ptA2.y) return {\n      x: ptB.x,\n      y: ptA1.y // horizontal vector\n      // determinne which point is further away\n\n    };\n    var v1 = {\n      x: ptA1.x - ptB.x,\n      y: ptA1.y - ptB.y\n    };\n    var v2 = {\n      x: ptA2.x - ptB.x,\n      y: ptA2.y - ptB.y\n    };\n    var nearPt = ptA1;\n    var farPt = ptA2;\n\n    if (dotProduct(v1, v1) > dotProduct(v2, v2)) {\n      farPt = ptA1;\n      nearPt = ptA2;\n    } // use the further point as our base in the calculation, so that the\n    // vectors are more parallel, providing more accurate dot product\n\n\n    var vA = {\n      x: nearPt.x - farPt.x,\n      y: nearPt.y - farPt.y\n    };\n    var vB = {\n      x: ptB.x - farPt.x,\n      y: ptB.y - farPt.y\n    };\n    var dist = dotProduct(vA, vB) / dotProduct(vA, vA);\n    return {\n      x: farPt.x + dist * vA.x,\n      y: farPt.y + dist * vA.y\n    };\n  };\n  /* Get the x coordinate where the given line (defined by a point and vector)\n   * crosses the horizontal line with the given y coordiante.\n   * In the case of parrallel lines (including overlapping ones) returns null. */\n\n  var horizontalIntersection = function horizontalIntersection(pt, v, y) {\n    if (v.y === 0) return null;\n    return {\n      x: pt.x + v.x / v.y * (y - pt.y),\n      y: y\n    };\n  };\n  /* Get the y coordinate where the given line (defined by a point and vector)\n   * crosses the vertical line with the given x coordiante.\n   * In the case of parrallel lines (including overlapping ones) returns null. */\n\n  var verticalIntersection = function verticalIntersection(pt, v, x) {\n    if (v.x === 0) return null;\n    return {\n      x: x,\n      y: pt.y + v.y / v.x * (x - pt.x)\n    };\n  };\n  /* Get the intersection of two lines, each defined by a base point and a vector.\n   * In the case of parrallel lines (including overlapping ones) returns null. */\n\n  var intersection = function intersection(pt1, v1, pt2, v2) {\n    // take some shortcuts for vertical and horizontal lines\n    // this also ensures we don't calculate an intersection and then discover\n    // it's actually outside the bounding box of the line\n    if (v1.x === 0) return verticalIntersection(pt2, v2, pt1.x);\n    if (v2.x === 0) return verticalIntersection(pt1, v1, pt2.x);\n    if (v1.y === 0) return horizontalIntersection(pt2, v2, pt1.y);\n    if (v2.y === 0) return horizontalIntersection(pt1, v1, pt2.y); // General case for non-overlapping segments.\n    // This algorithm is based on Schneider and Eberly.\n    // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\n\n    var kross = crossProduct(v1, v2);\n    if (kross == 0) return null;\n    var ve = {\n      x: pt2.x - pt1.x,\n      y: pt2.y - pt1.y\n    };\n    var d1 = crossProduct(ve, v1) / kross;\n    var d2 = crossProduct(ve, v2) / kross; // take the average of the two calculations to minimize rounding error\n\n    var x1 = pt1.x + d2 * v1.x,\n        x2 = pt2.x + d1 * v2.x;\n    var y1 = pt1.y + d2 * v1.y,\n        y2 = pt2.y + d1 * v2.y;\n    var x = (x1 + x2) / 2;\n    var y = (y1 + y2) / 2;\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  /**\n   * This class rounds incoming values sufficiently so that\n   * floating points problems are, for the most part, avoided.\n   *\n   * Incoming points are have their x & y values tested against\n   * all previously seen x & y values. If either is 'too close'\n   * to a previously seen value, it's value is 'snapped' to the\n   * previously seen value.\n   *\n   * All points should be rounded by this class before being\n   * stored in any data structures in the rest of this algorithm.\n   */\n\n  var PtRounder =\n  /*#__PURE__*/\n  function () {\n    function PtRounder() {\n      _classCallCheck(this, PtRounder);\n\n      this.reset();\n    }\n\n    _createClass(PtRounder, [{\n      key: \"reset\",\n      value: function reset() {\n        this.xRounder = new CoordRounder();\n        this.yRounder = new CoordRounder();\n      }\n    }, {\n      key: \"round\",\n      value: function round(x, y) {\n        return {\n          x: this.xRounder.round(x),\n          y: this.yRounder.round(y)\n        };\n      }\n    }]);\n\n    return PtRounder;\n  }();\n\n  var CoordRounder =\n  /*#__PURE__*/\n  function () {\n    function CoordRounder() {\n      _classCallCheck(this, CoordRounder);\n\n      this.tree = new Tree(); // preseed with 0 so we don't end up with values < Number.EPSILON\n\n      this.round(0);\n    } // Note: this can rounds input values backwards or forwards.\n    //       You might ask, why not restrict this to just rounding\n    //       forwards? Wouldn't that allow left endpoints to always\n    //       remain left endpoints during splitting (never change to\n    //       right). No - it wouldn't, because we snap intersections\n    //       to endpoints (to establish independence from the segment\n    //       angle for t-intersections).\n\n\n    _createClass(CoordRounder, [{\n      key: \"round\",\n      value: function round(coord) {\n        var node = this.tree.add(coord);\n        var prevNode = this.tree.prev(node);\n\n        if (prevNode !== null && cmp(node.key, prevNode.key) === 0) {\n          this.tree.remove(coord);\n          return prevNode.key;\n        }\n\n        var nextNode = this.tree.next(node);\n\n        if (nextNode !== null && cmp(node.key, nextNode.key) === 0) {\n          this.tree.remove(coord);\n          return nextNode.key;\n        }\n\n        return coord;\n      }\n    }]);\n\n    return CoordRounder;\n  }(); // singleton available by import\n\n\n  var rounder = new PtRounder();\n\n  /* Given input geometry as a standard array-of-arrays geojson-style\n   * geometry, return one that uses objects as points, for better perf */\n\n  var pointsAsObjects = function pointsAsObjects(geom) {\n    // we can handle well-formed multipolys and polys\n    var output = [];\n\n    if (!Array.isArray(geom)) {\n      throw new Error('Input is not a Polygon or MultiPolygon');\n    }\n\n    for (var i = 0, iMax = geom.length; i < iMax; i++) {\n      if (!Array.isArray(geom[i]) || geom[i].length == 0) {\n        throw new Error('Input is not a Polygon or MultiPolygon');\n      }\n\n      output.push([]);\n\n      for (var j = 0, jMax = geom[i].length; j < jMax; j++) {\n        if (!Array.isArray(geom[i][j]) || geom[i][j].length == 0) {\n          throw new Error('Input is not a Polygon or MultiPolygon');\n        }\n\n        if (Array.isArray(geom[i][j][0])) {\n          // multipolygon\n          output[i].push([]);\n\n          for (var k = 0, kMax = geom[i][j].length; k < kMax; k++) {\n            if (!Array.isArray(geom[i][j][k]) || geom[i][j][k].length < 2) {\n              throw new Error('Input is not a Polygon or MultiPolygon');\n            }\n\n            if (geom[i][j][k].length > 2) {\n              throw new Error('Input has more than two coordinates. ' + 'Only 2-dimensional polygons supported.');\n            }\n\n            output[i][j].push(rounder.round(geom[i][j][k][0], geom[i][j][k][1]));\n          }\n        } else {\n          // polygon\n          if (geom[i][j].length < 2) {\n            throw new Error('Input is not a Polygon or MultiPolygon');\n          }\n\n          if (geom[i][j].length > 2) {\n            throw new Error('Input has more than two coordinates. ' + 'Only 2-dimensional polygons supported.');\n          }\n\n          output[i].push(rounder.round(geom[i][j][0], geom[i][j][1]));\n        }\n      }\n    }\n\n    return output;\n  };\n  /* WARN: input modified directly */\n\n  var forceMultiPoly = function forceMultiPoly(geom) {\n    if (Array.isArray(geom)) {\n      if (geom.length === 0) return; // allow empty multipolys\n\n      if (Array.isArray(geom[0])) {\n        if (Array.isArray(geom[0][0])) {\n          if (typeof geom[0][0][0].x === 'number' && typeof geom[0][0][0].y === 'number') {\n            // multipolygon\n            return;\n          }\n        }\n\n        if (typeof geom[0][0].x === 'number' && typeof geom[0][0].y === 'number') {\n          // polygon\n          geom.unshift(geom.splice(0));\n          return;\n        }\n      }\n    }\n\n    throw new Error('Unrecognized input - not a polygon nor multipolygon');\n  };\n  /* WARN: input modified directly */\n\n  var cleanMultiPoly = function cleanMultiPoly(multipoly) {\n    var i = 0;\n\n    while (i < multipoly.length) {\n      var poly = multipoly[i];\n\n      if (poly.length === 0) {\n        multipoly.splice(i, 1);\n        continue;\n      }\n\n      var exteriorRing = poly[0];\n      cleanRing(exteriorRing); // poly is dropped if exteriorRing is degenerate\n\n      if (exteriorRing.length === 0) {\n        multipoly.splice(i, 1);\n        continue;\n      }\n\n      var j = 1;\n\n      while (j < poly.length) {\n        var interiorRing = poly[j];\n        cleanRing(interiorRing);\n        if (interiorRing.length === 0) poly.splice(j, 1);else j++;\n      }\n\n      i++;\n    }\n  };\n  /* Clean ring:\n   *  - remove duplicate points\n   *  - remove colinear points\n   *  - remove rings with no area (less than 3 distinct points)\n   *  - un-close rings (last point should not repeat first)\n   *\n   * WARN: input modified directly */\n\n  var cleanRing = function cleanRing(ring) {\n    if (ring.length === 0) return;\n    var firstPt = ring[0];\n    var lastPt = ring[ring.length - 1];\n    if (firstPt.x === lastPt.x && firstPt.y === lastPt.y) ring.pop();\n\n    var isPointUncessary = function isPointUncessary(prevPt, pt, nextPt) {\n      return prevPt.x === pt.x && prevPt.y === pt.y || nextPt.x === pt.x && nextPt.y === pt.y || compareVectorAngles(pt, prevPt, nextPt) === 0;\n    };\n\n    var i = 0;\n    var prevPt, nextPt;\n\n    while (i < ring.length) {\n      prevPt = i === 0 ? ring[ring.length - 1] : ring[i - 1];\n      nextPt = i === ring.length - 1 ? ring[0] : ring[i + 1];\n      if (isPointUncessary(prevPt, ring[i], nextPt)) ring.splice(i, 1);else i++;\n    } // if our ring has less than 3 distinct points now (so is degenerate)\n    // shrink it down to the empty array to communicate to our caller to\n    // drop it\n\n\n    while (ring.length < 3 && ring.length > 0) {\n      ring.pop();\n    }\n  };\n\n  var SweepEvent =\n  /*#__PURE__*/\n  function () {\n    _createClass(SweepEvent, null, [{\n      key: \"compare\",\n      // for ordering sweep events in the sweep event queue\n      value: function compare(a, b) {\n        // favor event with a point that the sweep line hits first\n        var ptCmp = SweepEvent.comparePoints(a.point, b.point);\n        if (ptCmp !== 0) return ptCmp; // the points are the same, so link them if needed\n\n        if (a.point !== b.point) a.link(b); // favor right events over left\n\n        if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1; // we have two matching left or right endpoints\n        // ordering of this case is the same as for their segments\n\n        return Segment.compare(a.segment, b.segment);\n      } // for ordering points in sweep line order\n\n    }, {\n      key: \"comparePoints\",\n      value: function comparePoints(aPt, bPt) {\n        if (aPt.x < bPt.x) return -1;\n        if (aPt.x > bPt.x) return 1;\n        if (aPt.y < bPt.y) return -1;\n        if (aPt.y > bPt.y) return 1;\n        return 0;\n      } // Warning: 'point' input will be modified and re-used (for performance)\n\n    }]);\n\n    function SweepEvent(point, isLeft) {\n      _classCallCheck(this, SweepEvent);\n\n      if (point.events === undefined) point.events = [this];else point.events.push(this);\n      this.point = point;\n      this.isLeft = isLeft; // this.segment, this.otherSE set by factory\n    }\n\n    _createClass(SweepEvent, [{\n      key: \"link\",\n      value: function link(other) {\n        if (other.point === this.point) {\n          throw new Error('Tried to link already linked events');\n        }\n\n        var otherEvents = other.point.events;\n\n        for (var i = 0, iMax = otherEvents.length; i < iMax; i++) {\n          var evt = otherEvents[i];\n          this.point.events.push(evt);\n          evt.point = this.point;\n        }\n\n        this.checkForConsuming();\n      }\n      /* Do a pass over our linked events and check to see if any pair\n       * of segments match, and should be consumed. */\n\n    }, {\n      key: \"checkForConsuming\",\n      value: function checkForConsuming() {\n        // FIXME: The loops in this method run O(n^2) => no good.\n        //        Maintain little ordered sweep event trees?\n        //        Can we maintaining an ordering that avoids the need\n        //        for the re-sorting with getLeftmostComparator in geom-out?\n        // Compare each pair of events to see if other events also match\n        var numEvents = this.point.events.length;\n\n        for (var i = 0; i < numEvents; i++) {\n          var evt1 = this.point.events[i];\n          if (evt1.segment.consumedBy !== undefined) continue;\n\n          for (var j = i + 1; j < numEvents; j++) {\n            var evt2 = this.point.events[j];\n            if (evt2.consumedBy !== undefined) continue;\n            if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue;\n            evt1.segment.consume(evt2.segment);\n          }\n        }\n      }\n    }, {\n      key: \"getAvailableLinkedEvents\",\n      value: function getAvailableLinkedEvents() {\n        // point.events is always of length 2 or greater\n        var events = [];\n\n        for (var i = 0, iMax = this.point.events.length; i < iMax; i++) {\n          var evt = this.point.events[i];\n\n          if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {\n            events.push(evt);\n          }\n        }\n\n        return events;\n      }\n      /**\n       * Returns a comparator function for sorting linked events that will\n       * favor the event that will give us the smallest left-side angle.\n       * All ring construction starts as low as possible heading to the right,\n       * so by always turning left as sharp as possible we'll get polygons\n       * without uncessary loops & holes.\n       *\n       * The comparator function has a compute cache such that it avoids\n       * re-computing already-computed values.\n       */\n\n    }, {\n      key: \"getLeftmostComparator\",\n      value: function getLeftmostComparator(baseEvent) {\n        var _this = this;\n\n        var cache = new Map();\n\n        var fillCache = function fillCache(linkedEvent) {\n          var nextEvent = linkedEvent.otherSE;\n          cache.set(linkedEvent, {\n            sine: sineOfAngle(_this.point, baseEvent.point, nextEvent.point),\n            cosine: cosineOfAngle(_this.point, baseEvent.point, nextEvent.point)\n          });\n        };\n\n        return function (a, b) {\n          if (!cache.has(a)) fillCache(a);\n          if (!cache.has(b)) fillCache(b);\n\n          var _cache$get = cache.get(a),\n              asine = _cache$get.sine,\n              acosine = _cache$get.cosine;\n\n          var _cache$get2 = cache.get(b),\n              bsine = _cache$get2.sine,\n              bcosine = _cache$get2.cosine; // both on or above x-axis\n\n\n          if (asine >= 0 && bsine >= 0) {\n            if (acosine < bcosine) return 1;\n            if (acosine > bcosine) return -1;\n            return 0;\n          } // both below x-axis\n\n\n          if (asine < 0 && bsine < 0) {\n            if (acosine < bcosine) return -1;\n            if (acosine > bcosine) return 1;\n            return 0;\n          } // one above x-axis, one below\n\n\n          if (bsine < asine) return -1;\n          if (bsine > asine) return 1;\n          return 0;\n        };\n      }\n    }]);\n\n    return SweepEvent;\n  }();\n\n  /**\n   * A bounding box has the format:\n   *\n   *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\n   *\n   */\n\n  var isInBbox = function isInBbox(bbox, point) {\n    return bbox.ll.x <= point.x && point.x <= bbox.ur.x && bbox.ll.y <= point.y && point.y <= bbox.ur.y;\n  };\n  /* Greedy comparison with a bbox. A point is defined to 'touch'\n   * a bbox if:\n   *  - it is inside the bbox\n   *  - it 'touches' one of the sides (another greedy comparison) */\n\n  var touchesBbox = function touchesBbox(bbox, point) {\n    return (bbox.ll.x <= point.x || touch(bbox.ll.x, point.x)) && (point.x <= bbox.ur.x || touch(point.x, bbox.ur.x)) && (bbox.ll.y <= point.y || touch(bbox.ll.y, point.y)) && (point.y <= bbox.ur.y || touch(point.y, bbox.ur.y));\n  };\n  /* Returns either null, or a bbox (aka an ordered pair of points)\n   * If there is only one point of overlap, a bbox with identical points\n   * will be returned */\n\n  var getBboxOverlap = function getBboxOverlap(b1, b2) {\n    // check if the bboxes overlap at all\n    if (b2.ur.x < b1.ll.x || b1.ur.x < b2.ll.x || b2.ur.y < b1.ll.y || b1.ur.y < b2.ll.y) return null; // find the middle two X values\n\n    var lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x;\n    var upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x; // find the middle two Y values\n\n    var lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y;\n    var upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y; // put those middle values together to get the overlap\n\n    return {\n      ll: {\n        x: lowerX,\n        y: lowerY\n      },\n      ur: {\n        x: upperX,\n        y: upperY\n      }\n    };\n  };\n\n  // segments and sweep events when all else is identical\n\n  var segmentId = 0;\n\n  var Segment =\n  /*#__PURE__*/\n  function () {\n    _createClass(Segment, null, [{\n      key: \"compare\",\n\n      /* This compare() function is for ordering segments in the sweep\n       * line tree, and does so according to the following criteria:\n       *\n       * Consider the vertical line that lies an infinestimal step to the\n       * right of the right-more of the two left endpoints of the input\n       * segments. Imagine slowly moving a point up from negative infinity\n       * in the increasing y direction. Which of the two segments will that\n       * point intersect first? That segment comes 'before' the other one.\n       *\n       * If neither segment would be intersected by such a line, (if one\n       * or more of the segments are vertical) then the line to be considered\n       * is directly on the right-more of the two left inputs.\n       */\n      value: function compare(a, b) {\n        var alx = a.leftSE.point.x;\n        var blx = b.leftSE.point.x;\n        var arx = a.rightSE.point.x;\n        var brx = b.rightSE.point.x; // check if they're even in the same vertical plane\n\n        if (brx < alx) return 1;\n        if (arx < blx) return -1;\n        var aly = a.leftSE.point.y;\n        var bly = b.leftSE.point.y;\n        var ary = a.rightSE.point.y;\n        var bry = b.rightSE.point.y; // is left endpoint of segment B the right-more?\n\n        if (alx < blx) {\n          // are the two segments in the same horizontal plane?\n          if (bly < aly && bly < ary) return 1;\n          if (bly > aly && bly > ary) return -1; // is the B left endpoint colinear to segment A?\n\n          var aCmpBLeft = a.comparePoint(b.leftSE.point);\n          if (aCmpBLeft < 0) return 1;\n          if (aCmpBLeft > 0) return -1; // is the A right endpoint colinear to segment B ?\n\n          var bCmpARight = b.comparePoint(a.rightSE.point);\n          if (bCmpARight !== 0) return bCmpARight; // colinear segments, consider the one with left-more\n          // left endpoint to be first (arbitrary?)\n\n          return -1;\n        } // is left endpoint of segment A the right-more?\n\n\n        if (alx > blx) {\n          if (aly < bly && aly < bry) return -1;\n          if (aly > bly && aly > bry) return 1; // is the A left endpoint colinear to segment B?\n\n          var bCmpALeft = b.comparePoint(a.leftSE.point);\n          if (bCmpALeft !== 0) return bCmpALeft; // is the B right endpoint colinear to segment A?\n\n          var aCmpBRight = a.comparePoint(b.rightSE.point);\n          if (aCmpBRight < 0) return 1;\n          if (aCmpBRight > 0) return -1; // colinear segments, consider the one with left-more\n          // left endpoint to be first (arbitrary?)\n\n          return 1;\n        } // if we get here, the two left endpoints are in the same\n        // vertical plane, ie alx === blx\n        // consider the lower left-endpoint to come first\n\n\n        if (aly < bly) return -1;\n        if (aly > bly) return 1; // left endpoints are identical\n        // check for colinearity by using the left-more right endpoint\n        // is the A right endpoint more left-more?\n\n        if (arx < brx) {\n          var _bCmpARight = b.comparePoint(a.rightSE.point);\n\n          if (_bCmpARight !== 0) return _bCmpARight; // colinear segments with matching left endpoints,\n          // consider the one with more left-more right endpoint to be first\n\n          return -1;\n        } // is the B right endpoint more left-more?\n\n\n        if (arx > brx) {\n          var _aCmpBRight = a.comparePoint(b.rightSE.point);\n\n          if (_aCmpBRight < 0) return 1;\n          if (_aCmpBRight > 0) return -1; // colinear segments with matching left endpoints,\n          // consider the one with more left-more right endpoint to be first\n\n          return 1;\n        } // if we get here, two two right endpoints are in the same\n        // vertical plane, ie arx === brx\n        // consider the lower right-endpoint to come first\n\n\n        if (ary < bry) return -1;\n        if (ary > bry) return 1; // right endpoints identical as well, so the segments are idential\n        // fall back on creation order as consistent tie-breaker\n\n        if (a.id < b.id) return -1;\n        if (a.id > b.id) return 1; // identical segment, ie a === b\n\n        return 0;\n      }\n      /* Warning: a reference to ringsIn input will be stored,\n       *  and possibly will be later modified */\n\n    }]);\n\n    function Segment(leftSE, rightSE, ringsIn) {\n      _classCallCheck(this, Segment);\n\n      this.id = ++segmentId;\n      this.leftSE = leftSE;\n      leftSE.segment = this;\n      leftSE.otherSE = rightSE;\n      this.rightSE = rightSE;\n      rightSE.segment = this;\n      rightSE.otherSE = leftSE;\n      this.ringsIn = ringsIn;\n      this._cache = {}; // left unset for performance, set later in algorithm\n      // this.ringOut, this.consumedBy, this.prev\n    }\n\n    _createClass(Segment, [{\n      key: \"replaceRightSE\",\n\n      /* When a segment is split, the rightSE is replaced with a new sweep event */\n      value: function replaceRightSE(newRightSE) {\n        this.rightSE = newRightSE;\n        this.rightSE.segment = this;\n        this.rightSE.otherSE = this.leftSE;\n        this.leftSE.otherSE = this.rightSE;\n      }\n    }, {\n      key: \"bbox\",\n      value: function bbox() {\n        var y1 = this.leftSE.point.y;\n        var y2 = this.rightSE.point.y;\n        return {\n          ll: {\n            x: this.leftSE.point.x,\n            y: y1 < y2 ? y1 : y2\n          },\n          ur: {\n            x: this.rightSE.point.x,\n            y: y1 > y2 ? y1 : y2\n          }\n        };\n      }\n      /* A vector from the left point to the right */\n\n    }, {\n      key: \"vector\",\n      value: function vector() {\n        return {\n          x: this.rightSE.point.x - this.leftSE.point.x,\n          y: this.rightSE.point.y - this.leftSE.point.y\n        };\n      }\n    }, {\n      key: \"isAnEndpoint\",\n      value: function isAnEndpoint(pt) {\n        return pt.x === this.leftSE.point.x && pt.y === this.leftSE.point.y || pt.x === this.rightSE.point.x && pt.y === this.rightSE.point.y;\n      }\n      /* Compare this segment with a point. Return value indicates:\n       *     1: point lies above or to the left of segment\n       *     0: point is colinear to segment\n       *    -1: point is below or to the right of segment */\n\n    }, {\n      key: \"comparePoint\",\n      value: function comparePoint(point) {\n        if (this.isAnEndpoint(point)) return 0;\n        var interPt = closestPoint(this.leftSE.point, this.rightSE.point, point);\n        if (point.y < interPt.y) return -1;\n        if (point.y > interPt.y) return 1; // depending on if our segment angles up or down,\n        // the x coord comparison means oppposite things\n\n        if (point.x < interPt.x) {\n          if (this.leftSE.point.y < this.rightSE.point.y) return 1;\n          if (this.leftSE.point.y > this.rightSE.point.y) return -1;\n        }\n\n        if (point.x > interPt.x) {\n          if (this.leftSE.point.y < this.rightSE.point.y) return -1;\n          if (this.leftSE.point.y > this.rightSE.point.y) return 1;\n        } // on the line\n\n\n        return 0;\n      }\n      /* Does the point in question touch the given segment?\n       * Greedy - essentially a 2 * Number.EPSILON comparison.\n       * If it's not possible to add an independent point between the\n       * point and the segment, we say the point 'touches' the segment. */\n\n    }, {\n      key: \"touches\",\n      value: function touches(point) {\n        if (!touchesBbox(this.bbox(), point)) return false; // if the points have been linked already, performance boost use that\n\n        if (point === this.leftSE.point || point === this.rightSE.point) return true; // avoid doing vector math on tiny vectors\n\n        if (touchPoints(this.leftSE.point, point)) return true;\n        if (touchPoints(this.rightSE.point, point)) return true;\n        var cPt1 = closestPoint(this.leftSE.point, this.rightSE.point, point);\n        var avgPt1 = {\n          x: (cPt1.x + point.x) / 2,\n          y: (cPt1.y + point.y) / 2\n        };\n        return touchPoints(avgPt1, cPt1) || touchPoints(avgPt1, point);\n      }\n      /**\n       * Given another segment, returns the first non-trivial intersection\n       * between the two segments (in terms of sweep line ordering), if it exists.\n       *\n       * A 'non-trivial' intersection is one that will cause one or both of the\n       * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:\n       *\n       *   * endpoint of segA with endpoint of segB --> trivial\n       *   * endpoint of segA with point along segB --> non-trivial\n       *   * endpoint of segB with point along segA --> non-trivial\n       *   * point along segA with point along segB --> non-trivial\n       *\n       * If no non-trivial intersection exists, return null\n       * Else, return null.\n       */\n\n    }, {\n      key: \"getIntersection\",\n      value: function getIntersection(other) {\n        // If bboxes don't overlap, there can't be any intersections\n        var bboxOverlap = getBboxOverlap(this.bbox(), other.bbox());\n        if (bboxOverlap === null) return null; // We first check to see if the endpoints can be considered intersections.\n        // This will 'snap' intersections to endpoints if possible, and will\n        // handle cases of colinearity.\n        // does each endpoint touch the other segment?\n\n        var touchesOtherLSE = this.touches(other.leftSE.point);\n        var touchesThisLSE = other.touches(this.leftSE.point);\n        var touchesOtherRSE = this.touches(other.rightSE.point);\n        var touchesThisRSE = other.touches(this.rightSE.point); // do left endpoints match?\n\n        if (touchesThisLSE && touchesOtherLSE) {\n          // these two cases are for colinear segments with matching left\n          // endpoints, and one segment being longer than the other\n          if (touchesThisRSE && !touchesOtherRSE) return this.rightSE.point;\n          if (!touchesThisRSE && touchesOtherRSE) return other.rightSE.point; // either the two segments match exactly (two trival intersections)\n          // or just on their left endpoint (one trivial intersection\n\n          return null;\n        } // does this left endpoint matches (other doesn't)\n\n\n        if (touchesThisLSE) {\n          // check for segments that just intersect on opposing endpoints\n          if (touchesOtherRSE && touchPoints(this.leftSE.point, other.rightSE.point)) return null; // t-intersection on left endpoint\n\n          return this.leftSE.point;\n        } // does other left endpoint matches (this doesn't)\n\n\n        if (touchesOtherLSE) {\n          // check for segments that just intersect on opposing endpoints\n          if (touchesThisRSE && touchPoints(this.rightSE.point, other.leftSE.point)) return null; // t-intersection on left endpoint\n\n          return other.leftSE.point;\n        } // trivial intersection on right endpoints\n\n\n        if (touchesThisRSE && touchesOtherRSE) return null; // t-intersections on just one right endpoint\n\n        if (touchesThisRSE) return this.rightSE.point;\n        if (touchesOtherRSE) return other.rightSE.point; // None of our endpoints intersect. Look for a general intersection between\n        // infinite lines laid over the segments\n\n        var pt = intersection(this.leftSE.point, this.vector(), other.leftSE.point, other.vector()); // are the segments parrallel? Note that if they were colinear with overlap,\n        // they would have an endpoint intersection and that case was already handled above\n\n        if (pt === null) return null; // is the intersection found between the lines not on the segments?\n\n        if (!isInBbox(bboxOverlap, pt)) return null; // round the the computed point if needed\n\n        return rounder.round(pt.x, pt.y);\n      }\n      /**\n       * Split the given segment into multiple segments on the given points.\n       *  * Each existing segment will retain its leftSE and a new rightSE will be\n       *    generated for it.\n       *  * A new segment will be generated which will adopt the original segment's\n       *    rightSE, and a new leftSE will be generated for it.\n       *  * If there are more than two points given to split on, new segments\n       *    in the middle will be generated with new leftSE and rightSE's.\n       *  * An array of the newly generated SweepEvents will be returned.\n       *\n       * Warning: input array of points is modified\n       */\n\n    }, {\n      key: \"split\",\n      value: function split(point) {\n        var newEvents = [];\n        var alreadyLinked = point.events !== undefined;\n        var newLeftSE = new SweepEvent(point, true);\n        var newRightSE = new SweepEvent(point, false);\n        var oldRightSE = this.rightSE;\n        this.replaceRightSE(newRightSE);\n        newEvents.push(newRightSE);\n        newEvents.push(newLeftSE);\n        new Segment(newLeftSE, oldRightSE, this.ringsIn.slice()); // in the point we just used to create new sweep events with was already\n        // linked to other events, we need to check if either of the affected\n        // segments should be consumed\n\n        if (alreadyLinked) {\n          newLeftSE.checkForConsuming();\n          newRightSE.checkForConsuming();\n        }\n\n        return newEvents;\n      }\n      /* Consume another segment. We take their ringsIn under our wing\n       * and mark them as consumed. Use for perfectly overlapping segments */\n\n    }, {\n      key: \"consume\",\n      value: function consume(other) {\n        var consumer = this;\n        var consumee = other;\n\n        while (consumer.consumedBy) {\n          consumer = consumer.consumedBy;\n        }\n\n        while (consumee.consumedBy) {\n          consumee = consumee.consumedBy;\n        }\n\n        var cmp$$1 = Segment.compare(consumer, consumee);\n        if (cmp$$1 === 0) return; // already consumed\n        // the winner of the consumption is the earlier segment\n        // according to sweep line ordering\n\n        if (cmp$$1 > 0) {\n          var tmp = consumer;\n          consumer = consumee;\n          consumee = tmp;\n        } // make sure a segment doesn't consume it's prev\n\n\n        if (consumer.prev === consumee) {\n          var _tmp = consumer;\n          consumer = consumee;\n          consumee = _tmp;\n        }\n\n        for (var i = 0, iMax = consumee.ringsIn.length; i < iMax; i++) {\n          consumer.ringsIn.push(consumee.ringsIn[i]);\n        }\n\n        consumee.ringsIn = null;\n        consumee.consumedBy = consumer; // mark sweep events consumed as to maintain ordering in sweep event queue\n\n        consumee.leftSE.consumedBy = consumer.leftSE;\n        consumee.rightSE.consumedBy = consumer.rightSE;\n      }\n      /* The first segment previous segment chain that is in the result */\n\n    }, {\n      key: \"prevInResult\",\n      value: function prevInResult() {\n        var key = 'prevInResult';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_prevInResult\",\n      value: function _prevInResult() {\n        if (!this.prev) return null;\n        if (this.prev.isInResult()) return this.prev;\n        return this.prev.prevInResult();\n      }\n    }, {\n      key: \"ringsBefore\",\n      value: function ringsBefore() {\n        var key = 'ringsBefore';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_ringsBefore\",\n      value: function _ringsBefore() {\n        if (!this.prev) return [];\n        return (this.prev.consumedBy || this.prev).ringsAfter();\n      }\n    }, {\n      key: \"ringsAfter\",\n      value: function ringsAfter() {\n        var key = 'ringsAfter';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_ringsAfter\",\n      value: function _ringsAfter() {\n        var rings = this.ringsBefore().slice(0);\n\n        for (var i = 0, iMax = this.ringsIn.length; i < iMax; i++) {\n          var ring = this.ringsIn[i];\n          var index = rings.indexOf(ring);\n          if (index === -1) rings.push(ring);else rings.splice(index, 1);\n        }\n\n        return rings;\n      }\n    }, {\n      key: \"multiPolysBefore\",\n      value: function multiPolysBefore() {\n        var key = 'multiPolysBefore';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_multiPolysBefore\",\n      value: function _multiPolysBefore() {\n        if (!this.prev) return [];\n        return (this.prev.consumedBy || this.prev).multiPolysAfter();\n      }\n    }, {\n      key: \"multiPolysAfter\",\n      value: function multiPolysAfter() {\n        var key = 'multiPolysAfter';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_multiPolysAfter\",\n      value: function _multiPolysAfter() {\n        // first calcualte our polysAfter\n        var polysAfter = [];\n        var polysExclude = [];\n        var ringsAfter = this.ringsAfter();\n\n        for (var i = 0, iMax = ringsAfter.length; i < iMax; i++) {\n          var ring = ringsAfter[i];\n          var poly = ring.poly;\n          if (polysExclude.indexOf(poly) !== -1) continue;\n          if (ring.isExterior) polysAfter.push(poly);else {\n            if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly);\n            var index = polysAfter.indexOf(ring.poly);\n            if (index !== -1) polysAfter.splice(index, 1);\n          }\n        } // now calculate our multiPolysAfter\n\n\n        var mps = [];\n\n        for (var _i = 0, _iMax = polysAfter.length; _i < _iMax; _i++) {\n          var mp = polysAfter[_i].multiPoly;\n          if (mps.indexOf(mp) === -1) mps.push(mp);\n        }\n\n        return mps;\n      }\n      /* Is this segment part of the final result? */\n\n    }, {\n      key: \"isInResult\",\n      value: function isInResult() {\n        var key = 'isInResult';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_isInResult\",\n      value: function _isInResult() {\n        // if we've been consumed, we're not in the result\n        if (this.consumedBy) return false;\n        var mpsBefore = this.multiPolysBefore();\n        var mpsAfter = this.multiPolysAfter();\n\n        switch (operation.type) {\n          case 'union':\n            {\n              // UNION - included iff:\n              //  * On one side of us there is 0 poly interiors AND\n              //  * On the other side there is 1 or more.\n              var noBefores = mpsBefore.length === 0;\n              var noAfters = mpsAfter.length === 0;\n              return noBefores !== noAfters;\n            }\n\n          case 'intersection':\n            {\n              // INTERSECTION - included iff:\n              //  * on one side of us all multipolys are rep. with poly interiors AND\n              //  * on the other side of us, not all multipolys are repsented\n              //    with poly interiors\n              var least;\n              var most;\n\n              if (mpsBefore.length < mpsAfter.length) {\n                least = mpsBefore.length;\n                most = mpsAfter.length;\n              } else {\n                least = mpsAfter.length;\n                most = mpsBefore.length;\n              }\n\n              return most === operation.numMultiPolys && least < most;\n            }\n\n          case 'xor':\n            {\n              // XOR - included iff:\n              //  * the difference between the number of multipolys represented\n              //    with poly interiors on our two sides is an odd number\n              var diff = Math.abs(mpsBefore.length - mpsAfter.length);\n              return diff % 2 === 1;\n            }\n\n          case 'difference':\n            {\n              // DIFFERENCE included iff:\n              //  * on exactly one side, we have just the subject\n              var isJustSubject = function isJustSubject(mps) {\n                return mps.length === 1 && mps[0].isSubject;\n              };\n\n              return isJustSubject(mpsBefore) !== isJustSubject(mpsAfter);\n            }\n\n          default:\n            throw new Error(\"Unrecognized operation type found \".concat(operation.type));\n        }\n      }\n    }], [{\n      key: \"fromRing\",\n      value: function fromRing(pt1, pt2, ring) {\n        var leftPt, rightPt; // ordering the two points according to sweep line ordering\n\n        var cmpPts = SweepEvent.comparePoints(pt1, pt2);\n\n        if (cmpPts < 0) {\n          leftPt = pt1;\n          rightPt = pt2;\n        } else if (cmpPts > 0) {\n          leftPt = pt2;\n          rightPt = pt1;\n        } else throw new Error(\"Tried to create degenerate segment at [\".concat(pt1.x, \", \").concat(pt1.y, \"]\"));\n\n        var leftSE = new SweepEvent(leftPt, true);\n        var rightSE = new SweepEvent(rightPt, false);\n        return new Segment(leftSE, rightSE, [ring]);\n      }\n    }]);\n\n    return Segment;\n  }();\n\n  var RingIn =\n  /*#__PURE__*/\n  function () {\n    function RingIn(geomRing, poly, isExterior) {\n      _classCallCheck(this, RingIn);\n\n      this.poly = poly;\n      this.isExterior = isExterior;\n      this.segments = [];\n      var prevPoint = geomRing[0];\n\n      for (var i = 1, iMax = geomRing.length; i < iMax; i++) {\n        var point = geomRing[i];\n        this.segments.push(Segment.fromRing(prevPoint, point, this));\n        prevPoint = point;\n      }\n\n      this.segments.push(Segment.fromRing(prevPoint, geomRing[0], this));\n    }\n\n    _createClass(RingIn, [{\n      key: \"getSweepEvents\",\n      value: function getSweepEvents() {\n        var sweepEvents = [];\n\n        for (var i = 0, iMax = this.segments.length; i < iMax; i++) {\n          var segment = this.segments[i];\n          sweepEvents.push(segment.leftSE);\n          sweepEvents.push(segment.rightSE);\n        }\n\n        return sweepEvents;\n      }\n    }]);\n\n    return RingIn;\n  }();\n  var PolyIn =\n  /*#__PURE__*/\n  function () {\n    function PolyIn(geomPoly, multiPoly) {\n      _classCallCheck(this, PolyIn);\n\n      this.exteriorRing = new RingIn(geomPoly[0], this, true);\n      this.interiorRings = [];\n\n      for (var i = 1, iMax = geomPoly.length; i < iMax; i++) {\n        this.interiorRings.push(new RingIn(geomPoly[i], this, false));\n      }\n\n      this.multiPoly = multiPoly;\n    }\n\n    _createClass(PolyIn, [{\n      key: \"getSweepEvents\",\n      value: function getSweepEvents() {\n        var sweepEvents = this.exteriorRing.getSweepEvents();\n\n        for (var i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n          var ringSweepEvents = this.interiorRings[i].getSweepEvents();\n\n          for (var j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n            sweepEvents.push(ringSweepEvents[j]);\n          }\n        }\n\n        return sweepEvents;\n      }\n    }]);\n\n    return PolyIn;\n  }();\n  var MultiPolyIn =\n  /*#__PURE__*/\n  function () {\n    function MultiPolyIn(geomMultiPoly) {\n      _classCallCheck(this, MultiPolyIn);\n\n      this.polys = [];\n\n      for (var i = 0, iMax = geomMultiPoly.length; i < iMax; i++) {\n        this.polys.push(new PolyIn(geomMultiPoly[i], this));\n      }\n\n      this.isSubject = false;\n    }\n\n    _createClass(MultiPolyIn, [{\n      key: \"markAsSubject\",\n      value: function markAsSubject() {\n        this.isSubject = true;\n      }\n    }, {\n      key: \"getSweepEvents\",\n      value: function getSweepEvents() {\n        var sweepEvents = [];\n\n        for (var i = 0, iMax = this.polys.length; i < iMax; i++) {\n          var polySweepEvents = this.polys[i].getSweepEvents();\n\n          for (var j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n            sweepEvents.push(polySweepEvents[j]);\n          }\n        }\n\n        return sweepEvents;\n      }\n    }]);\n\n    return MultiPolyIn;\n  }();\n\n  var RingOut =\n  /*#__PURE__*/\n  function () {\n    _createClass(RingOut, null, [{\n      key: \"factory\",\n\n      /* Given the segments from the sweep line pass, compute & return a series\n       * of closed rings from all the segments marked to be part of the result */\n      value: function factory(allSegments) {\n        var ringsOut = [];\n\n        for (var i = 0, iMax = allSegments.length; i < iMax; i++) {\n          var segment = allSegments[i];\n          if (!segment.isInResult() || segment.ringOut) continue;\n          var prevEvent = null;\n          var event = segment.leftSE;\n          var nextEvent = segment.rightSE;\n          var events = [event];\n          var startingPoint = event.point;\n          var intersectionLEs = [];\n          /* Walk the chain of linked events to form a closed ring */\n\n          while (true) {\n            prevEvent = event;\n            event = nextEvent;\n            events.push(event);\n            /* Is the ring complete? */\n\n            if (event.point === startingPoint) break;\n\n            while (true) {\n              var availableLEs = event.getAvailableLinkedEvents();\n              /* Did we hit a dead end? This shouldn't happen. Indicates some earlier\n               * part of the algorithm malfunctioned... please file a bug report. */\n\n              if (availableLEs.length === 0) {\n                var firstPt = events[0].point;\n                var lastPt = events[events.length - 1].point;\n                throw new Error(\"Unable to complete output ring starting at [\".concat(firstPt.x, \",\") + \" \".concat(firstPt.y, \"]. Last matching segment found ends at\") + \" [\".concat(lastPt.x, \", \").concat(lastPt.y, \"].\"));\n              }\n              /* Only one way to go, so cotinue on the path */\n\n\n              if (availableLEs.length === 1) {\n                nextEvent = availableLEs[0].otherSE;\n                break;\n              }\n              /* We must have an intersection. Check for a completed loop */\n\n\n              var indexLE = null;\n\n              for (var j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n                if (intersectionLEs[j].point === event.point) {\n                  indexLE = j;\n                  break;\n                }\n              }\n              /* Found a completed loop. Cut that off and make a ring */\n\n\n              if (indexLE !== null) {\n                var intersectionLE = intersectionLEs.splice(indexLE)[0];\n                var ringEvents = events.splice(intersectionLE.index);\n                ringEvents.unshift(ringEvents[0].otherSE);\n                ringsOut.push(new RingOut(ringEvents.reverse()));\n                continue;\n              }\n              /* register the intersection */\n\n\n              intersectionLEs.push({\n                index: events.length,\n                point: event.point\n              });\n              /* Choose the left-most option to continue the walk */\n\n              var comparator = event.getLeftmostComparator(prevEvent);\n              nextEvent = availableLEs.sort(comparator)[0].otherSE;\n              break;\n            }\n          }\n\n          ringsOut.push(new RingOut(events));\n        }\n\n        return ringsOut;\n      }\n    }]);\n\n    function RingOut(events) {\n      _classCallCheck(this, RingOut);\n\n      this.events = events;\n\n      for (var i = 0, iMax = events.length; i < iMax; i++) {\n        events[i].segment.ringOut = this;\n      }\n\n      this.poly = null;\n    }\n\n    _createClass(RingOut, [{\n      key: \"getGeom\",\n      value: function getGeom() {\n        // Remove superfluous points (ie extra points along a straight line),\n        var prevPt = this.events[0].point;\n        var points = [prevPt];\n\n        for (var i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n          var _pt = this.events[i].point;\n          var _nextPt = this.events[i + 1].point;\n          if (compareVectorAngles(_pt, prevPt, _nextPt) === 0) continue;\n          points.push(_pt);\n          prevPt = _pt;\n        } // ring was all (within rounding error of angle calc) colinear points\n\n\n        if (points.length === 1) return null; // check if the starting point is necessary\n\n        var pt = points[0];\n        var nextPt = points[1];\n        if (compareVectorAngles(pt, prevPt, nextPt) === 0) points.shift();\n        points.push(points[0]);\n        var step = this.isExteriorRing() ? 1 : -1;\n        var iStart = this.isExteriorRing() ? 0 : points.length - 1;\n        var iEnd = this.isExteriorRing() ? points.length : -1;\n        var orderedPoints = [];\n\n        for (var _i = iStart; _i != iEnd; _i += step) {\n          orderedPoints.push([points[_i].x, points[_i].y]);\n        }\n\n        return orderedPoints;\n      }\n    }, {\n      key: \"isExteriorRing\",\n      value: function isExteriorRing() {\n        if (this._isExteriorRing === undefined) {\n          var enclosing = this.enclosingRing();\n          this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true;\n        }\n\n        return this._isExteriorRing;\n      }\n    }, {\n      key: \"enclosingRing\",\n      value: function enclosingRing() {\n        if (this._enclosingRing === undefined) {\n          this._enclosingRing = this._calcEnclosingRing();\n        }\n\n        return this._enclosingRing;\n      }\n      /* Returns the ring that encloses this one, if any */\n\n    }, {\n      key: \"_calcEnclosingRing\",\n      value: function _calcEnclosingRing() {\n        // start with the ealier sweep line event so that the prevSeg\n        // chain doesn't lead us inside of a loop of ours\n        var leftMostEvt = this.events[0];\n\n        for (var i = 1, iMax = this.events.length; i < iMax; i++) {\n          var evt = this.events[i];\n          if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt;\n        }\n\n        var prevSeg = leftMostEvt.segment.prevInResult();\n        var prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;\n\n        while (true) {\n          // no segment found, thus no ring can enclose us\n          if (!prevSeg) return null; // no segments below prev segment found, thus the ring of the prev\n          // segment must loop back around and enclose us\n\n          if (!prevPrevSeg) return prevSeg.ringOut; // if the two segments are of different rings, the ring of the prev\n          // segment must either loop around us or the ring of the prev prev\n          // seg, which would make us and the ring of the prev peers\n\n          if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n            if (prevPrevSeg.ringOut.enclosingRing() !== prevSeg.ringOut) {\n              return prevSeg.ringOut;\n            } else return prevSeg.ringOut.enclosingRing();\n          } // two segments are from the same ring, so this was a penisula\n          // of that ring. iterate downward, keep searching\n\n\n          prevSeg = prevPrevSeg.prevInResult();\n          prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;\n        }\n      }\n    }]);\n\n    return RingOut;\n  }();\n  var PolyOut =\n  /*#__PURE__*/\n  function () {\n    function PolyOut(exteriorRing) {\n      _classCallCheck(this, PolyOut);\n\n      this.exteriorRing = exteriorRing;\n      exteriorRing.poly = this;\n      this.interiorRings = [];\n    }\n\n    _createClass(PolyOut, [{\n      key: \"addInterior\",\n      value: function addInterior(ring) {\n        this.interiorRings.push(ring);\n        ring.poly = this;\n      }\n    }, {\n      key: \"getGeom\",\n      value: function getGeom() {\n        var geom = [this.exteriorRing.getGeom()]; // exterior ring was all (within rounding error of angle calc) colinear points\n\n        if (geom[0] === null) return null;\n\n        for (var i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n          var ringGeom = this.interiorRings[i].getGeom(); // interior ring was all (within rounding error of angle calc) colinear points\n\n          if (ringGeom === null) continue;\n          geom.push(ringGeom);\n        }\n\n        return geom;\n      }\n    }]);\n\n    return PolyOut;\n  }();\n  var MultiPolyOut =\n  /*#__PURE__*/\n  function () {\n    function MultiPolyOut(rings) {\n      _classCallCheck(this, MultiPolyOut);\n\n      this.rings = rings;\n      this.polys = this._composePolys(rings);\n    }\n\n    _createClass(MultiPolyOut, [{\n      key: \"getGeom\",\n      value: function getGeom() {\n        var geom = [];\n\n        for (var i = 0, iMax = this.polys.length; i < iMax; i++) {\n          var polyGeom = this.polys[i].getGeom(); // exterior ring was all (within rounding error of angle calc) colinear points\n\n          if (polyGeom === null) continue;\n          geom.push(polyGeom);\n        }\n\n        return geom;\n      }\n    }, {\n      key: \"_composePolys\",\n      value: function _composePolys(rings) {\n        var polys = [];\n\n        for (var i = 0, iMax = rings.length; i < iMax; i++) {\n          var ring = rings[i];\n          if (ring.poly) continue;\n          if (ring.isExteriorRing()) polys.push(new PolyOut(ring));else {\n            var enclosingRing = ring.enclosingRing();\n            if (!enclosingRing.poly) polys.push(new PolyOut(enclosingRing));\n            enclosingRing.poly.addInterior(ring);\n          }\n        }\n\n        return polys;\n      }\n    }]);\n\n    return MultiPolyOut;\n  }();\n\n  /**\n   * NOTE:  We must be careful not to change any segments while\n   *        they are in the SplayTree. AFAIK, there's no way to tell\n   *        the tree to rebalance itself - thus before splitting\n   *        a segment that's in the tree, we remove it from the tree,\n   *        do the split, then re-insert it. (Even though splitting a\n   *        segment *shouldn't* change its correct position in the\n   *        sweep line tree, the reality is because of rounding errors,\n   *        it sometimes does.)\n   */\n\n  var SweepLine =\n  /*#__PURE__*/\n  function () {\n    function SweepLine(queue) {\n      var comparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Segment.compare;\n\n      _classCallCheck(this, SweepLine);\n\n      this.queue = queue;\n      this.tree = new Tree(comparator);\n      this.segments = [];\n    }\n\n    _createClass(SweepLine, [{\n      key: \"process\",\n      value: function process(event) {\n        var segment = event.segment;\n        var newEvents = []; // if we've already been consumed by another segment,\n        // clean up our body parts and get out\n\n        if (event.consumedBy) {\n          if (event.isLeft) this.queue.remove(event.otherSE);else this.tree.remove(segment);\n          return newEvents;\n        }\n\n        var node = event.isLeft ? this.tree.insert(segment) : this.tree.find(segment);\n        if (!node) throw new Error(\"Unable to find segment #\".concat(segment.id, \" \") + \"[\".concat(segment.leftSE.point.x, \", \").concat(segment.leftSE.point.y, \"] -> \") + \"[\".concat(segment.rightSE.point.x, \", \").concat(segment.rightSE.point.y, \"] \") + 'in SweepLine tree. Please submit a bug report.');\n        var prevNode = node;\n        var nextNode = node;\n        var prevSeg = undefined;\n        var nextSeg = undefined; // skip consumed segments still in tree\n\n        while (prevSeg === undefined) {\n          prevNode = this.tree.prev(prevNode);\n          if (prevNode === null) prevSeg = null;else if (prevNode.key.consumedBy === undefined) prevSeg = prevNode.key;\n        } // skip consumed segments still in tree\n\n\n        while (nextSeg === undefined) {\n          nextNode = this.tree.next(nextNode);\n          if (nextNode === null) nextSeg = null;else if (nextNode.key.consumedBy === undefined) nextSeg = nextNode.key;\n        }\n\n        if (event.isLeft) {\n          // Check for intersections against the previous segment in the sweep line\n          var prevMySplitter = null;\n\n          if (prevSeg) {\n            var prevInter = prevSeg.getIntersection(segment);\n\n            if (prevInter !== null) {\n              if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter;\n\n              if (!prevSeg.isAnEndpoint(prevInter)) {\n                var newEventsFromSplit = this._splitSafely(prevSeg, prevInter);\n\n                for (var i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n                  newEvents.push(newEventsFromSplit[i]);\n                }\n              }\n            }\n          } // Check for intersections against the next segment in the sweep line\n\n\n          var nextMySplitter = null;\n\n          if (nextSeg) {\n            var nextInter = nextSeg.getIntersection(segment);\n\n            if (nextInter !== null) {\n              if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter;\n\n              if (!nextSeg.isAnEndpoint(nextInter)) {\n                var _newEventsFromSplit = this._splitSafely(nextSeg, nextInter);\n\n                for (var _i = 0, _iMax = _newEventsFromSplit.length; _i < _iMax; _i++) {\n                  newEvents.push(_newEventsFromSplit[_i]);\n                }\n              }\n            }\n          } // For simplicity, even if we find more than one intersection we only\n          // spilt on the 'earliest' (sweep-line style) of the intersections.\n          // The other intersection will be handled in a future process().\n\n\n          if (prevMySplitter !== null || nextMySplitter !== null) {\n            var mySplitter = null;\n            if (prevMySplitter === null) mySplitter = nextMySplitter;else if (nextMySplitter === null) mySplitter = prevMySplitter;else {\n              var cmpSplitters = SweepEvent.comparePoints(prevMySplitter, nextMySplitter);\n              if (cmpSplitters < 0) mySplitter = prevMySplitter;\n              if (cmpSplitters > 0) mySplitter = nextMySplitter; // the two splitters are the exact same point\n\n              mySplitter = prevMySplitter;\n            } // Rounding errors can cause changes in ordering,\n            // so remove afected segments and right sweep events before splitting\n\n            this.queue.remove(segment.rightSE);\n            newEvents.push(segment.rightSE);\n\n            var _newEventsFromSplit2 = segment.split(mySplitter);\n\n            for (var _i2 = 0, _iMax2 = _newEventsFromSplit2.length; _i2 < _iMax2; _i2++) {\n              newEvents.push(_newEventsFromSplit2[_i2]);\n            }\n          }\n\n          if (newEvents.length > 0) {\n            // We found some intersections, so re-do the current event to\n            // make sure sweep line ordering is totally consistent for later\n            // use with the segment 'prev' pointers\n            this.tree.remove(segment);\n            newEvents.push(event);\n          } else {\n            // done with left event\n            this.segments.push(segment);\n            segment.prev = prevSeg;\n          }\n        } else {\n          // event.isRight\n          // since we're about to be removed from the sweep line, check for\n          // intersections between our previous and next segments\n          if (prevSeg && nextSeg) {\n            var inter = prevSeg.getIntersection(nextSeg);\n\n            if (inter !== null) {\n              if (!prevSeg.isAnEndpoint(inter)) {\n                var _newEventsFromSplit3 = this._splitSafely(prevSeg, inter);\n\n                for (var _i3 = 0, _iMax3 = _newEventsFromSplit3.length; _i3 < _iMax3; _i3++) {\n                  newEvents.push(_newEventsFromSplit3[_i3]);\n                }\n              }\n\n              if (!nextSeg.isAnEndpoint(inter)) {\n                var _newEventsFromSplit4 = this._splitSafely(nextSeg, inter);\n\n                for (var _i4 = 0, _iMax4 = _newEventsFromSplit4.length; _i4 < _iMax4; _i4++) {\n                  newEvents.push(_newEventsFromSplit4[_i4]);\n                }\n              }\n            }\n          }\n\n          this.tree.remove(segment);\n        }\n\n        return newEvents;\n      }\n      /* Safely split a segment that is currently in the datastructures\n       * IE - a segment other than the one that is currently being processed. */\n\n    }, {\n      key: \"_splitSafely\",\n      value: function _splitSafely(seg, pt) {\n        // Rounding errors can cause changes in ordering,\n        // so remove afected segments and right sweep events before splitting\n        // removeNode() doesn't work, so have re-find the seg\n        // https://github.com/w8r/splay-tree/pull/5\n        this.tree.remove(seg);\n        var rightSE = seg.rightSE;\n        this.queue.remove(rightSE);\n        var newEvents = seg.split(pt);\n        newEvents.push(rightSE); // splitting can trigger consumption\n\n        if (seg.consumedBy === undefined) this.tree.insert(seg);\n        return newEvents;\n      }\n    }]);\n\n    return SweepLine;\n  }();\n\n  var Operation =\n  /*#__PURE__*/\n  function () {\n    function Operation() {\n      _classCallCheck(this, Operation);\n    }\n\n    _createClass(Operation, [{\n      key: \"run\",\n      value: function run(type, geom, moreGeoms) {\n        operation.type = type;\n        rounder.reset();\n        /* Make a copy of the input geometry with rounded points as objects */\n\n        var geoms = [pointsAsObjects(geom)];\n\n        for (var i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n          geoms.push(pointsAsObjects(moreGeoms[i]));\n        }\n        /* Clean inputs */\n\n\n        for (var _i = 0, _iMax = geoms.length; _i < _iMax; _i++) {\n          forceMultiPoly(geoms[_i]);\n          cleanMultiPoly(geoms[_i]);\n        }\n        /* Convert inputs to MultiPoly objects, mark subject */\n\n\n        var multipolys = [];\n\n        for (var _i2 = 0, _iMax2 = geoms.length; _i2 < _iMax2; _i2++) {\n          multipolys.push(new MultiPolyIn(geoms[_i2]));\n        }\n\n        multipolys[0].markAsSubject();\n        operation.numMultiPolys = multipolys.length;\n        /* Put segment endpoints in a priority queue */\n\n        var queue = new Tree(SweepEvent.compare);\n\n        for (var _i3 = 0, _iMax3 = multipolys.length; _i3 < _iMax3; _i3++) {\n          var sweepEvents = multipolys[_i3].getSweepEvents();\n\n          for (var j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n            queue.insert(sweepEvents[j]);\n          }\n        }\n        /* Pass the sweep line over those endpoints */\n\n\n        var sweepLine = new SweepLine(queue);\n        var prevQueueSize = queue.size;\n        var node = queue.pop();\n\n        while (node) {\n          var evt = node.key;\n\n          if (queue.size === prevQueueSize) {\n            // prevents an infinite loop, an otherwise common manifestation of bugs\n            throw new Error(\"Unable to pop() SweepEvent [\".concat(evt.point.x, \", \").concat(evt.point.y, \"] from \") + \"segment #\".concat(evt.segment.id, \" from queue. Please file a bug report.\"));\n          }\n\n          var newEvents = sweepLine.process(evt);\n\n          for (var _i4 = 0, _iMax4 = newEvents.length; _i4 < _iMax4; _i4++) {\n            var _evt = newEvents[_i4];\n            if (_evt.consumedBy === undefined) queue.insert(_evt);\n          }\n\n          prevQueueSize = queue.size;\n          node = queue.pop();\n        } // free some memory we don't need anymore\n\n\n        rounder.reset();\n        /* Collect and compile segments we're keeping into a multipolygon */\n\n        var ringsOut = RingOut.factory(sweepLine.segments);\n        var result = new MultiPolyOut(ringsOut);\n        return result.getGeom();\n      }\n    }]);\n\n    return Operation;\n  }(); // singleton available by import\n\n  var operation = new Operation();\n\n  var union = function union(geom) {\n    for (var _len = arguments.length, moreGeoms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      moreGeoms[_key - 1] = arguments[_key];\n    }\n\n    return operation.run('union', geom, moreGeoms);\n  };\n\n  var intersection$1 = function intersection(geom) {\n    for (var _len2 = arguments.length, moreGeoms = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      moreGeoms[_key2 - 1] = arguments[_key2];\n    }\n\n    return operation.run('intersection', geom, moreGeoms);\n  };\n\n  var xor = function xor(geom) {\n    for (var _len3 = arguments.length, moreGeoms = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      moreGeoms[_key3 - 1] = arguments[_key3];\n    }\n\n    return operation.run('xor', geom, moreGeoms);\n  };\n\n  var difference = function difference(subjectGeom) {\n    for (var _len4 = arguments.length, clippingGeoms = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      clippingGeoms[_key4 - 1] = arguments[_key4];\n    }\n\n    return operation.run('difference', subjectGeom, clippingGeoms);\n  };\n\n  var index = {\n    union: union,\n    intersection: intersection$1,\n    xor: xor,\n    difference: difference\n  };\n\n  return index;\n\n}));\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/polygon-clipping/dist/polygon-clipping.umd.js?");

/***/ }),

/***/ "../../node_modules/process/browser.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/process/browser.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/process/browser.js?");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/Face.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/Face.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DELETED = exports.NON_CONVEX = exports.VISIBLE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dot = __webpack_require__(/*! gl-vec3/dot */ \"../../node_modules/gl-vec3/dot.js\");\n\nvar _dot2 = _interopRequireDefault(_dot);\n\nvar _add = __webpack_require__(/*! gl-vec3/add */ \"../../node_modules/gl-vec3/add.js\");\n\nvar _add2 = _interopRequireDefault(_add);\n\nvar _subtract = __webpack_require__(/*! gl-vec3/subtract */ \"../../node_modules/gl-vec3/subtract.js\");\n\nvar _subtract2 = _interopRequireDefault(_subtract);\n\nvar _cross = __webpack_require__(/*! gl-vec3/cross */ \"../../node_modules/gl-vec3/cross.js\");\n\nvar _cross2 = _interopRequireDefault(_cross);\n\nvar _copy = __webpack_require__(/*! gl-vec3/copy */ \"../../node_modules/gl-vec3/copy.js\");\n\nvar _copy2 = _interopRequireDefault(_copy);\n\nvar _length = __webpack_require__(/*! gl-vec3/length */ \"../../node_modules/gl-vec3/length.js\");\n\nvar _length2 = _interopRequireDefault(_length);\n\nvar _scale = __webpack_require__(/*! gl-vec3/scale */ \"../../node_modules/gl-vec3/scale.js\");\n\nvar _scale2 = _interopRequireDefault(_scale);\n\nvar _scaleAndAdd = __webpack_require__(/*! gl-vec3/scaleAndAdd */ \"../../node_modules/gl-vec3/scaleAndAdd.js\");\n\nvar _scaleAndAdd2 = _interopRequireDefault(_scaleAndAdd);\n\nvar _normalize = __webpack_require__(/*! gl-vec3/normalize */ \"../../node_modules/gl-vec3/normalize.js\");\n\nvar _normalize2 = _interopRequireDefault(_normalize);\n\nvar _HalfEdge = __webpack_require__(/*! ./HalfEdge */ \"../../node_modules/quickhull3d/dist/HalfEdge.js\");\n\nvar _HalfEdge2 = _interopRequireDefault(_HalfEdge);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/debug/src/browser.js\")('face');\n\nvar VISIBLE = exports.VISIBLE = 0;\nvar NON_CONVEX = exports.NON_CONVEX = 1;\nvar DELETED = exports.DELETED = 2;\n\nvar Face = function () {\n  function Face() {\n    _classCallCheck(this, Face);\n\n    this.normal = [];\n    this.centroid = [];\n    // signed distance from face to the origin\n    this.offset = 0;\n    // pointer to the a vertex in a double linked list this face can see\n    this.outside = null;\n    this.mark = VISIBLE;\n    this.edge = null;\n    this.nVertices = 0;\n  }\n\n  _createClass(Face, [{\n    key: 'getEdge',\n    value: function getEdge(i) {\n      if (typeof i !== 'number') {\n        throw Error('requires a number');\n      }\n      var it = this.edge;\n      while (i > 0) {\n        it = it.next;\n        i -= 1;\n      }\n      while (i < 0) {\n        it = it.prev;\n        i += 1;\n      }\n      return it;\n    }\n  }, {\n    key: 'computeNormal',\n    value: function computeNormal() {\n      var e0 = this.edge;\n      var e1 = e0.next;\n      var e2 = e1.next;\n      var v2 = (0, _subtract2.default)([], e1.head().point, e0.head().point);\n      var t = [];\n      var v1 = [];\n\n      this.nVertices = 2;\n      this.normal = [0, 0, 0];\n      while (e2 !== e0) {\n        (0, _copy2.default)(v1, v2);\n        (0, _subtract2.default)(v2, e2.head().point, e0.head().point);\n        (0, _add2.default)(this.normal, this.normal, (0, _cross2.default)(t, v1, v2));\n        e2 = e2.next;\n        this.nVertices += 1;\n      }\n      this.area = (0, _length2.default)(this.normal);\n      // normalize the vector, since we've already calculated the area\n      // it's cheaper to scale the vector using this quantity instead of\n      // doing the same operation again\n      this.normal = (0, _scale2.default)(this.normal, this.normal, 1 / this.area);\n    }\n  }, {\n    key: 'computeNormalMinArea',\n    value: function computeNormalMinArea(minArea) {\n      this.computeNormal();\n      if (this.area < minArea) {\n        // compute the normal without the longest edge\n        var maxEdge = void 0;\n        var maxSquaredLength = 0;\n        var edge = this.edge;\n\n        // find the longest edge (in length) in the chain of edges\n        do {\n          var lengthSquared = edge.lengthSquared();\n          if (lengthSquared > maxSquaredLength) {\n            maxEdge = edge;\n            maxSquaredLength = lengthSquared;\n          }\n          edge = edge.next;\n        } while (edge !== this.edge);\n\n        var p1 = maxEdge.tail().point;\n        var p2 = maxEdge.head().point;\n        var maxVector = (0, _subtract2.default)([], p2, p1);\n        var maxLength = Math.sqrt(maxSquaredLength);\n        // maxVector is normalized after this operation\n        (0, _scale2.default)(maxVector, maxVector, 1 / maxLength);\n        // compute the projection of maxVector over this face normal\n        var maxProjection = (0, _dot2.default)(this.normal, maxVector);\n        // subtract the quantity maxEdge adds on the normal\n        (0, _scaleAndAdd2.default)(this.normal, this.normal, maxVector, -maxProjection);\n        // renormalize `this.normal`\n        (0, _normalize2.default)(this.normal, this.normal);\n      }\n    }\n  }, {\n    key: 'computeCentroid',\n    value: function computeCentroid() {\n      this.centroid = [0, 0, 0];\n      var edge = this.edge;\n      do {\n        (0, _add2.default)(this.centroid, this.centroid, edge.head().point);\n        edge = edge.next;\n      } while (edge !== this.edge);\n      (0, _scale2.default)(this.centroid, this.centroid, 1 / this.nVertices);\n    }\n  }, {\n    key: 'computeNormalAndCentroid',\n    value: function computeNormalAndCentroid(minArea) {\n      if (typeof minArea !== 'undefined') {\n        this.computeNormalMinArea(minArea);\n      } else {\n        this.computeNormal();\n      }\n      this.computeCentroid();\n      this.offset = (0, _dot2.default)(this.normal, this.centroid);\n    }\n  }, {\n    key: 'distanceToPlane',\n    value: function distanceToPlane(point) {\n      return (0, _dot2.default)(this.normal, point) - this.offset;\n    }\n\n    /**\n     * @private\n     *\n     * Connects two edges assuming that prev.head().point === next.tail().point\n     *\n     * @param {HalfEdge} prev\n     * @param {HalfEdge} next\n     */\n\n  }, {\n    key: 'connectHalfEdges',\n    value: function connectHalfEdges(prev, next) {\n      var discardedFace = void 0;\n      if (prev.opposite.face === next.opposite.face) {\n        // `prev` is remove a redundant edge\n        var oppositeFace = next.opposite.face;\n        var oppositeEdge = void 0;\n        if (prev === this.edge) {\n          this.edge = next;\n        }\n        if (oppositeFace.nVertices === 3) {\n          // case:\n          // remove the face on the right\n          //\n          //       /|\\\n          //      / | \\ the face on the right\n          //     /  |  \\ --> opposite edge\n          //    / a |   \\\n          //   *----*----*\n          //  /     b  |  \\\n          //           ▾\n          //      redundant edge\n          //\n          // Note: the opposite edge is actually in the face to the right\n          // of the face to be destroyed\n          oppositeEdge = next.opposite.prev.opposite;\n          oppositeFace.mark = DELETED;\n          discardedFace = oppositeFace;\n        } else {\n          // case:\n          //          t\n          //        *----\n          //       /| <- right face's redundant edge\n          //      / | opposite edge\n          //     /  |  ▴   /\n          //    / a |  |  /\n          //   *----*----*\n          //  /     b  |  \\\n          //           ▾\n          //      redundant edge\n          oppositeEdge = next.opposite.next;\n          // make sure that the link `oppositeFace.edge` points correctly even\n          // after the right face redundant edge is removed\n          if (oppositeFace.edge === oppositeEdge.prev) {\n            oppositeFace.edge = oppositeEdge;\n          }\n\n          //       /|   /\n          //      / | t/opposite edge\n          //     /  | / ▴  /\n          //    / a |/  | /\n          //   *----*----*\n          //  /     b     \\\n          oppositeEdge.prev = oppositeEdge.prev.prev;\n          oppositeEdge.prev.next = oppositeEdge;\n        }\n        //       /|\n        //      / |\n        //     /  |\n        //    / a |\n        //   *----*----*\n        //  /     b  ▴  \\\n        //           |\n        //     redundant edge\n        next.prev = prev.prev;\n        next.prev.next = next;\n\n        //       / \\  \\\n        //      /   \\->\\\n        //     /     \\<-\\ opposite edge\n        //    / a     \\  \\\n        //   *----*----*\n        //  /     b  ^  \\\n        next.setOpposite(oppositeEdge);\n\n        oppositeFace.computeNormalAndCentroid();\n      } else {\n        // trivial case\n        //        *\n        //       /|\\\n        //      / | \\\n        //     /  |--> next\n        //    / a |   \\\n        //   *----*----*\n        //    \\ b |   /\n        //     \\  |--> prev\n        //      \\ | /\n        //       \\|/\n        //        *\n        prev.next = next;\n        next.prev = prev;\n      }\n      return discardedFace;\n    }\n  }, {\n    key: 'mergeAdjacentFaces',\n    value: function mergeAdjacentFaces(adjacentEdge, discardedFaces) {\n      var oppositeEdge = adjacentEdge.opposite;\n      var oppositeFace = oppositeEdge.face;\n\n      discardedFaces.push(oppositeFace);\n      oppositeFace.mark = DELETED;\n\n      // find the chain of edges whose opposite face is `oppositeFace`\n      //\n      //                ===>\n      //      \\         face         /\n      //       * ---- * ---- * ---- *\n      //      /     opposite face    \\\n      //                <===\n      //\n      var adjacentEdgePrev = adjacentEdge.prev;\n      var adjacentEdgeNext = adjacentEdge.next;\n      var oppositeEdgePrev = oppositeEdge.prev;\n      var oppositeEdgeNext = oppositeEdge.next;\n\n      // left edge\n      while (adjacentEdgePrev.opposite.face === oppositeFace) {\n        adjacentEdgePrev = adjacentEdgePrev.prev;\n        oppositeEdgeNext = oppositeEdgeNext.next;\n      }\n      // right edge\n      while (adjacentEdgeNext.opposite.face === oppositeFace) {\n        adjacentEdgeNext = adjacentEdgeNext.next;\n        oppositeEdgePrev = oppositeEdgePrev.prev;\n      }\n      // adjacentEdgePrev  \\         face         / adjacentEdgeNext\n      //                    * ---- * ---- * ---- *\n      // oppositeEdgeNext  /     opposite face    \\ oppositeEdgePrev\n\n      // fix the face reference of all the opposite edges that are not part of\n      // the edges whose opposite face is not `face` i.e. all the edges that\n      // `face` and `oppositeFace` do not have in common\n      var edge = void 0;\n      for (edge = oppositeEdgeNext; edge !== oppositeEdgePrev.next; edge = edge.next) {\n        edge.face = this;\n      }\n\n      // make sure that `face.edge` is not one of the edges to be destroyed\n      // Note: it's important for it to be a `next` edge since `prev` edges\n      // might be destroyed on `connectHalfEdges`\n      this.edge = adjacentEdgeNext;\n\n      // connect the extremes\n      // Note: it might be possible that after connecting the edges a triangular\n      // face might be redundant\n      var discardedFace = void 0;\n      discardedFace = this.connectHalfEdges(oppositeEdgePrev, adjacentEdgeNext);\n      if (discardedFace) {\n        discardedFaces.push(discardedFace);\n      }\n      discardedFace = this.connectHalfEdges(adjacentEdgePrev, oppositeEdgeNext);\n      if (discardedFace) {\n        discardedFaces.push(discardedFace);\n      }\n\n      this.computeNormalAndCentroid();\n      // TODO: additional consistency checks\n      return discardedFaces;\n    }\n  }, {\n    key: 'collectIndices',\n    value: function collectIndices() {\n      var indices = [];\n      var edge = this.edge;\n      do {\n        indices.push(edge.head().index);\n        edge = edge.next;\n      } while (edge !== this.edge);\n      return indices;\n    }\n  }], [{\n    key: 'createTriangle',\n    value: function createTriangle(v0, v1, v2) {\n      var minArea = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      var face = new Face();\n      var e0 = new _HalfEdge2.default(v0, face);\n      var e1 = new _HalfEdge2.default(v1, face);\n      var e2 = new _HalfEdge2.default(v2, face);\n\n      // join edges\n      e0.next = e2.prev = e1;\n      e1.next = e0.prev = e2;\n      e2.next = e1.prev = e0;\n\n      // main half edge reference\n      face.edge = e0;\n      face.computeNormalAndCentroid(minArea);\n      if (debug.enabled) {\n        debug('face created %j', face.collectIndices());\n      }\n      return face;\n    }\n  }]);\n\n  return Face;\n}();\n\nexports.default = Face;\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/Face.js?");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/HalfEdge.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/HalfEdge.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _distance = __webpack_require__(/*! gl-vec3/distance */ \"../../node_modules/gl-vec3/distance.js\");\n\nvar _distance2 = _interopRequireDefault(_distance);\n\nvar _squaredDistance = __webpack_require__(/*! gl-vec3/squaredDistance */ \"../../node_modules/gl-vec3/squaredDistance.js\");\n\nvar _squaredDistance2 = _interopRequireDefault(_squaredDistance);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/debug/src/browser.js\")('halfedge');\n\nvar HalfEdge = function () {\n  function HalfEdge(vertex, face) {\n    _classCallCheck(this, HalfEdge);\n\n    this.vertex = vertex;\n    this.face = face;\n    this.next = null;\n    this.prev = null;\n    this.opposite = null;\n  }\n\n  _createClass(HalfEdge, [{\n    key: 'head',\n    value: function head() {\n      return this.vertex;\n    }\n  }, {\n    key: 'tail',\n    value: function tail() {\n      return this.prev ? this.prev.vertex : null;\n    }\n  }, {\n    key: 'length',\n    value: function length() {\n      if (this.tail()) {\n        return (0, _distance2.default)(this.tail().point, this.head().point);\n      }\n      return -1;\n    }\n  }, {\n    key: 'lengthSquared',\n    value: function lengthSquared() {\n      if (this.tail()) {\n        return (0, _squaredDistance2.default)(this.tail().point, this.head().point);\n      }\n      return -1;\n    }\n  }, {\n    key: 'setOpposite',\n    value: function setOpposite(edge) {\n      var me = this;\n      if (debug.enabled) {\n        debug('opposite ' + me.tail().index + ' <--> ' + me.head().index + ' between ' + me.face.collectIndices() + ', ' + edge.face.collectIndices());\n      }\n      this.opposite = edge;\n      edge.opposite = this;\n    }\n  }]);\n\n  return HalfEdge;\n}();\n\nexports.default = HalfEdge;\nmodule.exports = exports['default'];\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/HalfEdge.js?");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/QuickHull.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/QuickHull.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _pointLineDistance = __webpack_require__(/*! point-line-distance */ \"../../node_modules/point-line-distance/index.js\");\n\nvar _pointLineDistance2 = _interopRequireDefault(_pointLineDistance);\n\nvar _getPlaneNormal = __webpack_require__(/*! get-plane-normal */ \"../../node_modules/get-plane-normal/index.js\");\n\nvar _getPlaneNormal2 = _interopRequireDefault(_getPlaneNormal);\n\nvar _dot = __webpack_require__(/*! gl-vec3/dot */ \"../../node_modules/gl-vec3/dot.js\");\n\nvar _dot2 = _interopRequireDefault(_dot);\n\nvar _VertexList = __webpack_require__(/*! ./VertexList */ \"../../node_modules/quickhull3d/dist/VertexList.js\");\n\nvar _VertexList2 = _interopRequireDefault(_VertexList);\n\nvar _Vertex = __webpack_require__(/*! ./Vertex */ \"../../node_modules/quickhull3d/dist/Vertex.js\");\n\nvar _Vertex2 = _interopRequireDefault(_Vertex);\n\nvar _Face = __webpack_require__(/*! ./Face */ \"../../node_modules/quickhull3d/dist/Face.js\");\n\nvar _Face2 = _interopRequireDefault(_Face);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/debug/src/browser.js\")('quickhull');\n\n// merge types\n// non convex with respect to the large face\nvar MERGE_NON_CONVEX_WRT_LARGER_FACE = 1;\nvar MERGE_NON_CONVEX = 2;\n\nvar QuickHull = function () {\n  function QuickHull(points) {\n    _classCallCheck(this, QuickHull);\n\n    if (!Array.isArray(points)) {\n      throw TypeError('input is not a valid array');\n    }\n    if (points.length < 4) {\n      throw Error('cannot build a simplex out of <4 points');\n    }\n\n    this.tolerance = -1;\n\n    // buffers\n    this.nFaces = 0;\n    this.nPoints = points.length;\n\n    this.faces = [];\n    this.newFaces = [];\n    // helpers\n    //\n    // let `a`, `b` be `Face` instances\n    // let `v` be points wrapped as instance of `Vertex`\n    //\n    //     [v, v, ..., v, v, v, ...]\n    //      ^             ^\n    //      |             |\n    //  a.outside     b.outside\n    //\n    this.claimed = new _VertexList2.default();\n    this.unclaimed = new _VertexList2.default();\n\n    // vertices of the hull(internal representation of points)\n    this.vertices = [];\n    for (var i = 0; i < points.length; i += 1) {\n      this.vertices.push(new _Vertex2.default(points[i], i));\n    }\n    this.discardedFaces = [];\n    this.vertexPointIndices = [];\n  }\n\n  _createClass(QuickHull, [{\n    key: 'addVertexToFace',\n    value: function addVertexToFace(vertex, face) {\n      vertex.face = face;\n      if (!face.outside) {\n        this.claimed.add(vertex);\n      } else {\n        this.claimed.insertBefore(face.outside, vertex);\n      }\n      face.outside = vertex;\n    }\n\n    /**\n     * Removes `vertex` for the `claimed` list of vertices, it also makes sure\n     * that the link from `face` to the first vertex it sees in `claimed` is\n     * linked correctly after the removal\n     *\n     * @param {Vertex} vertex\n     * @param {Face} face\n     */\n\n  }, {\n    key: 'removeVertexFromFace',\n    value: function removeVertexFromFace(vertex, face) {\n      if (vertex === face.outside) {\n        // fix face.outside link\n        if (vertex.next && vertex.next.face === face) {\n          // face has at least 2 outside vertices, move the `outside` reference\n          face.outside = vertex.next;\n        } else {\n          // vertex was the only outside vertex that face had\n          face.outside = null;\n        }\n      }\n      this.claimed.remove(vertex);\n    }\n\n    /**\n     * Removes all the visible vertices that `face` is able to see which are\n     * stored in the `claimed` vertext list\n     *\n     * @param {Face} face\n     * @return {Vertex|undefined} If face had visible vertices returns\n     * `face.outside`, otherwise undefined\n     */\n\n  }, {\n    key: 'removeAllVerticesFromFace',\n    value: function removeAllVerticesFromFace(face) {\n      if (face.outside) {\n        // pointer to the last vertex of this face\n        // [..., outside, ..., end, outside, ...]\n        //          |           |      |\n        //          a           a      b\n        var end = face.outside;\n        while (end.next && end.next.face === face) {\n          end = end.next;\n        }\n        this.claimed.removeChain(face.outside, end);\n        //                            b\n        //                       [ outside, ...]\n        //                            |  removes this link\n        //     [ outside, ..., end ] -┘\n        //          |           |\n        //          a           a\n        end.next = null;\n        return face.outside;\n      }\n    }\n\n    /**\n     * Removes all the visible vertices that `face` is able to see, additionally\n     * checking the following:\n     *\n     * If `absorbingFace` doesn't exist then all the removed vertices will be\n     * added to the `unclaimed` vertex list\n     *\n     * If `absorbingFace` exists then this method will assign all the vertices of\n     * `face` that can see `absorbingFace`, if a vertex cannot see `absorbingFace`\n     * it's added to the `unclaimed` vertex list\n     *\n     * @param {Face} face\n     * @param {Face} [absorbingFace]\n     */\n\n  }, {\n    key: 'deleteFaceVertices',\n    value: function deleteFaceVertices(face, absorbingFace) {\n      var faceVertices = this.removeAllVerticesFromFace(face);\n      if (faceVertices) {\n        if (!absorbingFace) {\n          // mark the vertices to be reassigned to some other face\n          this.unclaimed.addAll(faceVertices);\n        } else {\n          // if there's an absorbing face try to assign as many vertices\n          // as possible to it\n\n          // the reference `vertex.next` might be destroyed on\n          // `this.addVertexToFace` (see VertexList#add), nextVertex is a\n          // reference to it\n          var nextVertex = void 0;\n          for (var vertex = faceVertices; vertex; vertex = nextVertex) {\n            nextVertex = vertex.next;\n            var distance = absorbingFace.distanceToPlane(vertex.point);\n\n            // check if `vertex` is able to see `absorbingFace`\n            if (distance > this.tolerance) {\n              this.addVertexToFace(vertex, absorbingFace);\n            } else {\n              this.unclaimed.add(vertex);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Reassigns as many vertices as possible from the unclaimed list to the new\n     * faces\n     *\n     * @param {Faces[]} newFaces\n     */\n\n  }, {\n    key: 'resolveUnclaimedPoints',\n    value: function resolveUnclaimedPoints(newFaces) {\n      // cache next vertex so that if `vertex.next` is destroyed it's still\n      // recoverable\n      var vertexNext = this.unclaimed.first();\n      for (var vertex = vertexNext; vertex; vertex = vertexNext) {\n        vertexNext = vertex.next;\n        var maxDistance = this.tolerance;\n        var maxFace = void 0;\n        for (var i = 0; i < newFaces.length; i += 1) {\n          var face = newFaces[i];\n          if (face.mark === _Face.VISIBLE) {\n            var dist = face.distanceToPlane(vertex.point);\n            if (dist > maxDistance) {\n              maxDistance = dist;\n              maxFace = face;\n            }\n            if (maxDistance > 1000 * this.tolerance) {\n              break;\n            }\n          }\n        }\n\n        if (maxFace) {\n          this.addVertexToFace(vertex, maxFace);\n        }\n      }\n    }\n\n    /**\n     * Computes the extremes of a tetrahedron which will be the initial hull\n     *\n     * @return {number[]} The min/max vertices in the x,y,z directions\n     */\n\n  }, {\n    key: 'computeExtremes',\n    value: function computeExtremes() {\n      var me = this;\n      var min = [];\n      var max = [];\n\n      // min vertex on the x,y,z directions\n      var minVertices = [];\n      // max vertex on the x,y,z directions\n      var maxVertices = [];\n\n      var i = void 0,\n          j = void 0;\n\n      // initially assume that the first vertex is the min/max\n      for (i = 0; i < 3; i += 1) {\n        minVertices[i] = maxVertices[i] = this.vertices[0];\n      }\n      // copy the coordinates of the first vertex to min/max\n      for (i = 0; i < 3; i += 1) {\n        min[i] = max[i] = this.vertices[0].point[i];\n      }\n\n      // compute the min/max vertex on all 6 directions\n      for (i = 1; i < this.vertices.length; i += 1) {\n        var vertex = this.vertices[i];\n        var point = vertex.point;\n        // update the min coordinates\n        for (j = 0; j < 3; j += 1) {\n          if (point[j] < min[j]) {\n            min[j] = point[j];\n            minVertices[j] = vertex;\n          }\n        }\n        // update the max coordinates\n        for (j = 0; j < 3; j += 1) {\n          if (point[j] > max[j]) {\n            max[j] = point[j];\n            maxVertices[j] = vertex;\n          }\n        }\n      }\n\n      // compute epsilon\n      this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min[0]), Math.abs(max[0])) + Math.max(Math.abs(min[1]), Math.abs(max[1])) + Math.max(Math.abs(min[2]), Math.abs(max[2])));\n      if (debug.enabled) {\n        debug('tolerance %d', me.tolerance);\n      }\n      return [minVertices, maxVertices];\n    }\n\n    /**\n     * Compues the initial tetrahedron assigning to its faces all the points that\n     * are candidates to form part of the hull\n     */\n\n  }, {\n    key: 'createInitialSimplex',\n    value: function createInitialSimplex() {\n      var vertices = this.vertices;\n\n      var _computeExtremes = this.computeExtremes(),\n          _computeExtremes2 = _slicedToArray(_computeExtremes, 2),\n          min = _computeExtremes2[0],\n          max = _computeExtremes2[1];\n\n      var v0 = void 0,\n          v1 = void 0,\n          v2 = void 0,\n          v3 = void 0;\n      var i = void 0,\n          j = void 0;\n\n      // Find the two vertices with the greatest 1d separation\n      // (max.x - min.x)\n      // (max.y - min.y)\n      // (max.z - min.z)\n      var maxDistance = 0;\n      var indexMax = 0;\n      for (i = 0; i < 3; i += 1) {\n        var distance = max[i].point[i] - min[i].point[i];\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          indexMax = i;\n        }\n      }\n      v0 = min[indexMax];\n      v1 = max[indexMax];\n\n      // the next vertex is the one farthest to the line formed by `v0` and `v1`\n      maxDistance = 0;\n      for (i = 0; i < this.vertices.length; i += 1) {\n        var vertex = this.vertices[i];\n        if (vertex !== v0 && vertex !== v1) {\n          var _distance = (0, _pointLineDistance2.default)(vertex.point, v0.point, v1.point);\n          if (_distance > maxDistance) {\n            maxDistance = _distance;\n            v2 = vertex;\n          }\n        }\n      }\n\n      // the next vertes is the one farthest to the plane `v0`, `v1`, `v2`\n      // normalize((v2 - v1) x (v0 - v1))\n      var normal = (0, _getPlaneNormal2.default)([], v0.point, v1.point, v2.point);\n      // distance from the origin to the plane\n      var distPO = (0, _dot2.default)(v0.point, normal);\n      maxDistance = -1;\n      for (i = 0; i < this.vertices.length; i += 1) {\n        var _vertex = this.vertices[i];\n        if (_vertex !== v0 && _vertex !== v1 && _vertex !== v2) {\n          var _distance2 = Math.abs((0, _dot2.default)(normal, _vertex.point) - distPO);\n          if (_distance2 > maxDistance) {\n            maxDistance = _distance2;\n            v3 = _vertex;\n          }\n        }\n      }\n\n      // initial simplex\n      // Taken from http://everything2.com/title/How+to+paint+a+tetrahedron\n      //\n      //                              v2\n      //                             ,|,\n      //                           ,7``\\'VA,\n      //                         ,7`   |, `'VA,\n      //                       ,7`     `\\    `'VA,\n      //                     ,7`        |,      `'VA,\n      //                   ,7`          `\\         `'VA,\n      //                 ,7`             |,           `'VA,\n      //               ,7`               `\\       ,..ooOOTK` v3\n      //             ,7`                  |,.ooOOT''`    AV\n      //           ,7`            ,..ooOOT`\\`           /7\n      //         ,7`      ,..ooOOT''`      |,          AV\n      //        ,T,..ooOOT''`              `\\         /7\n      //     v0 `'TTs.,                     |,       AV\n      //            `'TTs.,                 `\\      /7\n      //                 `'TTs.,             |,    AV\n      //                      `'TTs.,        `\\   /7\n      //                           `'TTs.,    |, AV\n      //                                `'TTs.,\\/7\n      //                                     `'T`\n      //                                       v1\n      //\n      var faces = [];\n      if ((0, _dot2.default)(v3.point, normal) - distPO < 0) {\n        // the face is not able to see the point so `planeNormal`\n        // is pointing outside the tetrahedron\n        faces.push(_Face2.default.createTriangle(v0, v1, v2), _Face2.default.createTriangle(v3, v1, v0), _Face2.default.createTriangle(v3, v2, v1), _Face2.default.createTriangle(v3, v0, v2));\n\n        // set the opposite edge\n        for (i = 0; i < 3; i += 1) {\n          var _j = (i + 1) % 3;\n          // join face[i] i > 0, with the first face\n          faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge(_j));\n          // join face[i] with face[i + 1], 1 <= i <= 3\n          faces[i + 1].getEdge(1).setOpposite(faces[_j + 1].getEdge(0));\n        }\n      } else {\n        // the face is able to see the point so `planeNormal`\n        // is pointing inside the tetrahedron\n        faces.push(_Face2.default.createTriangle(v0, v2, v1), _Face2.default.createTriangle(v3, v0, v1), _Face2.default.createTriangle(v3, v1, v2), _Face2.default.createTriangle(v3, v2, v0));\n\n        // set the opposite edge\n        for (i = 0; i < 3; i += 1) {\n          var _j2 = (i + 1) % 3;\n          // join face[i] i > 0, with the first face\n          faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge((3 - i) % 3));\n          // join face[i] with face[i + 1]\n          faces[i + 1].getEdge(0).setOpposite(faces[_j2 + 1].getEdge(1));\n        }\n      }\n\n      // the initial hull is the tetrahedron\n      for (i = 0; i < 4; i += 1) {\n        this.faces.push(faces[i]);\n      }\n\n      // initial assignment of vertices to the faces of the tetrahedron\n      for (i = 0; i < vertices.length; i += 1) {\n        var _vertex2 = vertices[i];\n        if (_vertex2 !== v0 && _vertex2 !== v1 && _vertex2 !== v2 && _vertex2 !== v3) {\n          maxDistance = this.tolerance;\n          var maxFace = void 0;\n          for (j = 0; j < 4; j += 1) {\n            var _distance3 = faces[j].distanceToPlane(_vertex2.point);\n            if (_distance3 > maxDistance) {\n              maxDistance = _distance3;\n              maxFace = faces[j];\n            }\n          }\n\n          if (maxFace) {\n            this.addVertexToFace(_vertex2, maxFace);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'reindexFaceAndVertices',\n    value: function reindexFaceAndVertices() {\n      // remove inactive faces\n      var activeFaces = [];\n      for (var i = 0; i < this.faces.length; i += 1) {\n        var face = this.faces[i];\n        if (face.mark === _Face.VISIBLE) {\n          activeFaces.push(face);\n        }\n      }\n      this.faces = activeFaces;\n    }\n  }, {\n    key: 'collectFaces',\n    value: function collectFaces(skipTriangulation) {\n      var faceIndices = [];\n      for (var i = 0; i < this.faces.length; i += 1) {\n        if (this.faces[i].mark !== _Face.VISIBLE) {\n          throw Error('attempt to include a destroyed face in the hull');\n        }\n        var indices = this.faces[i].collectIndices();\n        if (skipTriangulation) {\n          faceIndices.push(indices);\n        } else {\n          for (var j = 0; j < indices.length - 2; j += 1) {\n            faceIndices.push([indices[0], indices[j + 1], indices[j + 2]]);\n          }\n        }\n      }\n      return faceIndices;\n    }\n\n    /**\n     * Finds the next vertex to make faces with the current hull\n     *\n     * - let `face` be the first face existing in the `claimed` vertex list\n     *  - if `face` doesn't exist then return since there're no vertices left\n     *  - otherwise for each `vertex` that face sees find the one furthest away\n     *  from `face`\n     *\n     * @return {Vertex|undefined} Returns undefined when there're no more\n     * visible vertices\n     */\n\n  }, {\n    key: 'nextVertexToAdd',\n    value: function nextVertexToAdd() {\n      if (!this.claimed.isEmpty()) {\n        var eyeVertex = void 0,\n            vertex = void 0;\n        var maxDistance = 0;\n        var eyeFace = this.claimed.first().face;\n        for (vertex = eyeFace.outside; vertex && vertex.face === eyeFace; vertex = vertex.next) {\n          var distance = eyeFace.distanceToPlane(vertex.point);\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            eyeVertex = vertex;\n          }\n        }\n        return eyeVertex;\n      }\n    }\n\n    /**\n     * Computes a chain of half edges in ccw order called the `horizon`, for an\n     * edge to be part of the horizon it must join a face that can see\n     * `eyePoint` and a face that cannot see `eyePoint`\n     *\n     * @param {number[]} eyePoint - The coordinates of a point\n     * @param {HalfEdge} crossEdge - The edge used to jump to the current `face`\n     * @param {Face} face - The current face being tested\n     * @param {HalfEdge[]} horizon - The edges that form part of the horizon in\n     * ccw order\n     */\n\n  }, {\n    key: 'computeHorizon',\n    value: function computeHorizon(eyePoint, crossEdge, face, horizon) {\n      // moves face's vertices to the `unclaimed` vertex list\n      this.deleteFaceVertices(face);\n\n      face.mark = _Face.DELETED;\n\n      var edge = void 0;\n      if (!crossEdge) {\n        edge = crossEdge = face.getEdge(0);\n      } else {\n        // start from the next edge since `crossEdge` was already analyzed\n        // (actually `crossEdge.opposite` was the face who called this method\n        // recursively)\n        edge = crossEdge.next;\n      }\n\n      // All the faces that are able to see `eyeVertex` are defined as follows\n      //\n      //       v    /\n      //           / <== visible face\n      //          /\n      //         |\n      //         | <== not visible face\n      //\n      //  dot(v, visible face normal) - visible face offset > this.tolerance\n      //\n      do {\n        var oppositeEdge = edge.opposite;\n        var oppositeFace = oppositeEdge.face;\n        if (oppositeFace.mark === _Face.VISIBLE) {\n          if (oppositeFace.distanceToPlane(eyePoint) > this.tolerance) {\n            this.computeHorizon(eyePoint, oppositeEdge, oppositeFace, horizon);\n          } else {\n            horizon.push(edge);\n          }\n        }\n        edge = edge.next;\n      } while (edge !== crossEdge);\n    }\n\n    /**\n     * Creates a face with the points `eyeVertex.point`, `horizonEdge.tail` and\n     * `horizonEdge.tail` in ccw order\n     *\n     * @param {Vertex} eyeVertex\n     * @param {HalfEdge} horizonEdge\n     * @return {HalfEdge} The half edge whose vertex is the eyeVertex\n     */\n\n  }, {\n    key: 'addAdjoiningFace',\n    value: function addAdjoiningFace(eyeVertex, horizonEdge) {\n      // all the half edges are created in ccw order thus the face is always\n      // pointing outside the hull\n      // edges:\n      //\n      //                  eyeVertex.point\n      //                       / \\\n      //                      /   \\\n      //                  1  /     \\  0\n      //                    /       \\\n      //                   /         \\\n      //                  /           \\\n      //          horizon.tail --- horizon.head\n      //                        2\n      //\n      var face = _Face2.default.createTriangle(eyeVertex, horizonEdge.tail(), horizonEdge.head());\n      this.faces.push(face);\n      // join face.getEdge(-1) with the horizon's opposite edge\n      // face.getEdge(-1) = face.getEdge(2)\n      face.getEdge(-1).setOpposite(horizonEdge.opposite);\n      return face.getEdge(0);\n    }\n\n    /**\n     * Adds horizon.length faces to the hull, each face will be 'linked' with the\n     * horizon opposite face and the face on the left/right\n     *\n     * @param {Vertex} eyeVertex\n     * @param {HalfEdge[]} horizon - A chain of half edges in ccw order\n     */\n\n  }, {\n    key: 'addNewFaces',\n    value: function addNewFaces(eyeVertex, horizon) {\n      this.newFaces = [];\n      var firstSideEdge = void 0,\n          previousSideEdge = void 0;\n      for (var i = 0; i < horizon.length; i += 1) {\n        var horizonEdge = horizon[i];\n        // returns the right side edge\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\n        if (!firstSideEdge) {\n          firstSideEdge = sideEdge;\n        } else {\n          // joins face.getEdge(1) with previousFace.getEdge(0)\n          sideEdge.next.setOpposite(previousSideEdge);\n        }\n        this.newFaces.push(sideEdge.face);\n        previousSideEdge = sideEdge;\n      }\n      firstSideEdge.next.setOpposite(previousSideEdge);\n    }\n\n    /**\n     * Computes the distance from `edge` opposite face's centroid to\n     * `edge.face`\n     *\n     * @param {HalfEdge} edge\n     * @return {number}\n     * - A positive number when the centroid of the opposite face is above the\n     *   face i.e. when the faces are concave\n     * - A negative number when the centroid of the opposite face is below the\n     *   face i.e. when the faces are convex\n     */\n\n  }, {\n    key: 'oppositeFaceDistance',\n    value: function oppositeFaceDistance(edge) {\n      return edge.face.distanceToPlane(edge.opposite.face.centroid);\n    }\n\n    /**\n     * Merges a face with none/any/all its neighbors according to the strategy\n     * used\n     *\n     * if `mergeType` is MERGE_NON_CONVEX_WRT_LARGER_FACE then the merge will be\n     * decided based on the face with the larger area, the centroid of the face\n     * with the smaller area will be checked against the one with the larger area\n     * to see if it's in the merge range [tolerance, -tolerance] i.e.\n     *\n     *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance\n     *\n     * Note that the first check (with +tolerance) was done on `computeHorizon`\n     *\n     * If the above is not true then the check is done with respect to the smaller\n     * face i.e.\n     *\n     *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance\n     *\n     * If true then it means that two faces are non convex (concave), even if the\n     * dot(...) - offset value is > 0 (that's the point of doing the merge in the\n     * first place)\n     *\n     * If two faces are concave then the check must also be done on the other face\n     * but this is done in another merge pass, for this to happen the face is\n     * marked in a temporal NON_CONVEX state\n     *\n     * if `mergeType` is MERGE_NON_CONVEX then two faces will be merged only if\n     * they pass the following conditions\n     *\n     *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance\n     *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance\n     *\n     * @param {Face} face\n     * @param {number} mergeType - Either MERGE_NON_CONVEX_WRT_LARGER_FACE or\n     * MERGE_NON_CONVEX\n     */\n\n  }, {\n    key: 'doAdjacentMerge',\n    value: function doAdjacentMerge(face, mergeType) {\n      var edge = face.edge;\n      var convex = true;\n      var it = 0;\n      do {\n        if (it >= face.nVertices) {\n          throw Error('merge recursion limit exceeded');\n        }\n        var oppositeFace = edge.opposite.face;\n        var merge = false;\n\n        // Important notes about the algorithm to merge faces\n        //\n        // - Given a vertex `eyeVertex` that will be added to the hull\n        //   all the faces that cannot see `eyeVertex` are defined as follows\n        //\n        //      dot(v, not visible face normal) - not visible offset < tolerance\n        //\n        // - Two faces can be merged when the centroid of one of these faces\n        // projected to the normal of the other face minus the other face offset\n        // is in the range [tolerance, -tolerance]\n        // - Since `face` (given in the input for this method) has passed the\n        // check above we only have to check the lower bound e.g.\n        //\n        //      dot(v, not visible face normal) - not visible offset > -tolerance\n        //\n        if (mergeType === MERGE_NON_CONVEX) {\n          if (this.oppositeFaceDistance(edge) > -this.tolerance || this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n            merge = true;\n          }\n        } else {\n          if (face.area > oppositeFace.area) {\n            if (this.oppositeFaceDistance(edge) > -this.tolerance) {\n              merge = true;\n            } else if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n              convex = false;\n            }\n          } else {\n            if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n              merge = true;\n            } else if (this.oppositeFaceDistance(edge) > -this.tolerance) {\n              convex = false;\n            }\n          }\n        }\n\n        if (merge) {\n          debug('face merge');\n          // when two faces are merged it might be possible that redundant faces\n          // are destroyed, in that case move all the visible vertices from the\n          // destroyed faces to the `unclaimed` vertex list\n          var discardedFaces = face.mergeAdjacentFaces(edge, []);\n          for (var i = 0; i < discardedFaces.length; i += 1) {\n            this.deleteFaceVertices(discardedFaces[i], face);\n          }\n          return true;\n        }\n\n        edge = edge.next;\n        it += 1;\n      } while (edge !== face.edge);\n      if (!convex) {\n        face.mark = _Face.NON_CONVEX;\n      }\n      return false;\n    }\n\n    /**\n     * Adds a vertex to the hull with the following algorithm\n     *\n     * - Compute the `horizon` which is a chain of half edges, for an edge to\n     *   belong to this group it must be the edge connecting a face that can\n     *   see `eyeVertex` and a face which cannot see `eyeVertex`\n     * - All the faces that can see `eyeVertex` have its visible vertices removed\n     *   from the claimed VertexList\n     * - A new set of faces is created with each edge of the `horizon` and\n     *   `eyeVertex`, each face is connected with the opposite horizon face and\n     *   the face on the left/right\n     * - The new faces are merged if possible with the opposite horizon face first\n     *   and then the faces on the right/left\n     * - The vertices removed from all the visible faces are assigned to the new\n     *   faces if possible\n     *\n     * @param {Vertex} eyeVertex\n     */\n\n  }, {\n    key: 'addVertexToHull',\n    value: function addVertexToHull(eyeVertex) {\n      var horizon = [];\n\n      this.unclaimed.clear();\n\n      // remove `eyeVertex` from `eyeVertex.face` so that it can't be added to the\n      // `unclaimed` vertex list\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\n      if (debug.enabled) {\n        debug('horizon %j', horizon.map(function (edge) {\n          return edge.head().index;\n        }));\n      }\n      this.addNewFaces(eyeVertex, horizon);\n\n      debug('first merge');\n\n      // first merge pass\n      // Do the merge with respect to the larger face\n      for (var i = 0; i < this.newFaces.length; i += 1) {\n        var face = this.newFaces[i];\n        if (face.mark === _Face.VISIBLE) {\n          while (this.doAdjacentMerge(face, MERGE_NON_CONVEX_WRT_LARGER_FACE)) {}\n        }\n      }\n\n      debug('second merge');\n\n      // second merge pass\n      // Do the merge on non convex faces (a face is marked as non convex in the\n      // first pass)\n      for (var _i = 0; _i < this.newFaces.length; _i += 1) {\n        var _face = this.newFaces[_i];\n        if (_face.mark === _Face.NON_CONVEX) {\n          _face.mark = _Face.VISIBLE;\n          while (this.doAdjacentMerge(_face, MERGE_NON_CONVEX)) {}\n        }\n      }\n\n      debug('reassigning points to newFaces');\n      // reassign `unclaimed` vertices to the new faces\n      this.resolveUnclaimedPoints(this.newFaces);\n    }\n  }, {\n    key: 'build',\n    value: function build() {\n      var iterations = 0;\n      var eyeVertex = void 0;\n      this.createInitialSimplex();\n      while (eyeVertex = this.nextVertexToAdd()) {\n        iterations += 1;\n        debug('== iteration %j ==', iterations);\n        debug('next vertex to add = %d %j', eyeVertex.index, eyeVertex.point);\n        this.addVertexToHull(eyeVertex);\n        debug('end');\n      }\n      this.reindexFaceAndVertices();\n    }\n  }]);\n\n  return QuickHull;\n}();\n\nexports.default = QuickHull;\nmodule.exports = exports['default'];\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/QuickHull.js?");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/Vertex.js":
/*!************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/Vertex.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Vertex = function Vertex(point, index) {\n  _classCallCheck(this, Vertex);\n\n  this.point = point;\n  // index in the input array\n  this.index = index;\n  // vertex is a double linked list node\n  this.next = null;\n  this.prev = null;\n  // the face that is able to see this point\n  this.face = null;\n};\n\nexports.default = Vertex;\nmodule.exports = exports[\"default\"];\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/Vertex.js?");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/VertexList.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/VertexList.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VertexList = function () {\n  function VertexList() {\n    _classCallCheck(this, VertexList);\n\n    this.head = null;\n    this.tail = null;\n  }\n\n  _createClass(VertexList, [{\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n    }\n\n    /**\n     * Inserts a `node` before `target`, it's assumed that\n     * `target` belongs to this doubly linked list\n     *\n     * @param {*} target\n     * @param {*} node\n     */\n\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(target, node) {\n      node.prev = target.prev;\n      node.next = target;\n      if (!node.prev) {\n        this.head = node;\n      } else {\n        node.prev.next = node;\n      }\n      target.prev = node;\n    }\n\n    /**\n     * Inserts a `node` after `target`, it's assumed that\n     * `target` belongs to this doubly linked list\n     *\n     * @param {Vertex} target\n     * @param {Vertex} node\n     */\n\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(target, node) {\n      node.prev = target;\n      node.next = target.next;\n      if (!node.next) {\n        this.tail = node;\n      } else {\n        node.next.prev = node;\n      }\n      target.next = node;\n    }\n\n    /**\n     * Appends a `node` to the end of this doubly linked list\n     * Note: `node.next` will be unlinked from `node`\n     * Note: if `node` is part of another linked list call `addAll` instead\n     *\n     * @param {*} node\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(node) {\n      if (!this.head) {\n        this.head = node;\n      } else {\n        this.tail.next = node;\n      }\n      node.prev = this.tail;\n      // since node is the new end it doesn't have a next node\n      node.next = null;\n      this.tail = node;\n    }\n\n    /**\n     * Appends a chain of nodes where `node` is the head,\n     * the difference with `add` is that it correctly sets the position\n     * of the node list `tail` property\n     *\n     * @param {*} node\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function addAll(node) {\n      if (!this.head) {\n        this.head = node;\n      } else {\n        this.tail.next = node;\n      }\n      node.prev = this.tail;\n\n      // find the end of the list\n      while (node.next) {\n        node = node.next;\n      }\n      this.tail = node;\n    }\n\n    /**\n     * Deletes a `node` from this linked list, it's assumed that `node` is a\n     * member of this linked list\n     *\n     * @param {*} node\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      if (!node.prev) {\n        this.head = node.next;\n      } else {\n        node.prev.next = node.next;\n      }\n\n      if (!node.next) {\n        this.tail = node.prev;\n      } else {\n        node.next.prev = node.prev;\n      }\n    }\n\n    /**\n     * Removes a chain of nodes whose head is `a` and whose tail is `b`,\n     * it's assumed that `a` and `b` belong to this list and also that `a`\n     * comes before `b` in the linked list\n     *\n     * @param {*} a\n     * @param {*} b\n     */\n\n  }, {\n    key: \"removeChain\",\n    value: function removeChain(a, b) {\n      if (!a.prev) {\n        this.head = b.next;\n      } else {\n        a.prev.next = b.next;\n      }\n\n      if (!b.next) {\n        this.tail = a.prev;\n      } else {\n        b.next.prev = a.prev;\n      }\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !this.head;\n    }\n  }]);\n\n  return VertexList;\n}();\n\nexports.default = VertexList;\nmodule.exports = exports[\"default\"];\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/VertexList.js?");

/***/ }),

/***/ "../../node_modules/string.prototype.codepointat/codepointat.js":
/*!*****************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/string.prototype.codepointat/codepointat.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n\t(function() {\n\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tvar codePointAt = function(position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tvar string = String(this);\n\t\t\tvar size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tvar index = position ? Number(position) : 0;\n\t\t\tif (index != index) { // better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// Get the first code unit\n\t\t\tvar first = string.charCodeAt(index);\n\t\t\tvar second;\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t'value': codePointAt,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t}\n\t}());\n}\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/string.prototype.codepointat/codepointat.js?");

/***/ }),

/***/ "../../node_modules/tess2/index.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tess2/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/tess2 */ \"../../node_modules/tess2/src/tess2.js\");\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tess2/index.js?");

/***/ }),

/***/ "../../node_modules/tess2/src/tess2.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tess2/src/tess2.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n** SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008) \n** Copyright (C) [dates of first publication] Silicon Graphics, Inc.\n** All Rights Reserved.\n**\n** Permission is hereby granted, free of charge, to any person obtaining a copy\n** of this software and associated documentation files (the \"Software\"), to deal\n** in the Software without restriction, including without limitation the rights\n** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n** of the Software, and to permit persons to whom the Software is furnished to do so,\n** subject to the following conditions:\n** \n** The above copyright notice including the dates of first publication and either this\n** permission notice or a reference to http://oss.sgi.com/projects/FreeB/ shall be\n** included in all copies or substantial portions of the Software. \n**\n** THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n** INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n** PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL SILICON GRAPHICS, INC.\n** BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\n** OR OTHER DEALINGS IN THE SOFTWARE.\n** \n** Except as contained in this notice, the name of Silicon Graphics, Inc. shall not\n** be used in advertising or otherwise to promote the sale, use or other dealings in\n** this Software without prior written authorization from Silicon Graphics, Inc.\n*/\n/*\n** Author: Mikko Mononen, Aug 2013.\n** The code is based on GLU libtess by Eric Veach, July 1994\n*/\n\n\t\n\n\t/* Public API */\n\n\tvar Tess2 = {};\n\n\tmodule.exports = Tess2;\n\t\n\tTess2.WINDING_ODD = 0;\n\tTess2.WINDING_NONZERO = 1;\n\tTess2.WINDING_POSITIVE = 2;\n\tTess2.WINDING_NEGATIVE = 3;\n\tTess2.WINDING_ABS_GEQ_TWO = 4;\n\n\tTess2.POLYGONS = 0;\n\tTess2.CONNECTED_POLYGONS = 1;\n\tTess2.BOUNDARY_CONTOURS = 2;\n\n\tTess2.tesselate = function(opts) {\n\t\tvar debug =  opts.debug || false;\n\t\tvar tess = new Tesselator();\n\t\tfor (var i = 0; i < opts.contours.length; i++) {\n\t\t\ttess.addContour(opts.vertexSize || 2, opts.contours[i]);\n\t\t}\n\t\ttess.tesselate(opts.windingRule || Tess2.WINDING_ODD,\n\t\t\t\t\t   opts.elementType || Tess2.POLYGONS,\n\t\t\t\t\t   opts.polySize || 3,\n\t\t\t\t\t   opts.vertexSize || 2,\n\t\t\t\t\t   opts.normal || [0,0,1]);\n\t\treturn {\n\t\t\tvertices: tess.vertices,\n\t\t\tvertexIndices: tess.vertexIndices,\n\t\t\tvertexCount: tess.vertexCount,\n\t\t\telements: tess.elements,\n\t\t\telementCount: tess.elementCount,\n\t\t\tmesh: debug ? tess.mesh : undefined\n\t\t};\n\t};\n\n\t/* Internal */\n\n\tvar assert = function(cond) {\n\t\tif (!cond) {\n\t\t\tthrow \"Assertion Failed!\";\n\t\t}\n\t}\n\n\t/* The mesh structure is similar in spirit, notation, and operations\n\t* to the \"quad-edge\" structure (see L. Guibas and J. Stolfi, Primitives\n\t* for the manipulation of general subdivisions and the computation of\n\t* Voronoi diagrams, ACM Transactions on Graphics, 4(2):74-123, April 1985).\n\t* For a simplified description, see the course notes for CS348a,\n\t* \"Mathematical Foundations of Computer Graphics\", available at the\n\t* Stanford bookstore (and taught during the fall quarter).\n\t* The implementation also borrows a tiny subset of the graph-based approach\n\t* use in Mantyla's Geometric Work Bench (see M. Mantyla, An Introduction\n\t* to Sold Modeling, Computer Science Press, Rockville, Maryland, 1988).\n\t*\n\t* The fundamental data structure is the \"half-edge\".  Two half-edges\n\t* go together to make an edge, but they point in opposite directions.\n\t* Each half-edge has a pointer to its mate (the \"symmetric\" half-edge Sym),\n\t* its origin vertex (Org), the face on its left side (Lface), and the\n\t* adjacent half-edges in the CCW direction around the origin vertex\n\t* (Onext) and around the left face (Lnext).  There is also a \"next\"\n\t* pointer for the global edge list (see below).\n\t*\n\t* The notation used for mesh navigation:\n\t*  Sym   = the mate of a half-edge (same edge, but opposite direction)\n\t*  Onext = edge CCW around origin vertex (keep same origin)\n\t*  Dnext = edge CCW around destination vertex (keep same dest)\n\t*  Lnext = edge CCW around left face (dest becomes new origin)\n\t*  Rnext = edge CCW around right face (origin becomes new dest)\n\t*\n\t* \"prev\" means to substitute CW for CCW in the definitions above.\n\t*\n\t* The mesh keeps global lists of all vertices, faces, and edges,\n\t* stored as doubly-linked circular lists with a dummy header node.\n\t* The mesh stores pointers to these dummy headers (vHead, fHead, eHead).\n\t*\n\t* The circular edge list is special; since half-edges always occur\n\t* in pairs (e and e->Sym), each half-edge stores a pointer in only\n\t* one direction.  Starting at eHead and following the e->next pointers\n\t* will visit each *edge* once (ie. e or e->Sym, but not both).\n\t* e->Sym stores a pointer in the opposite direction, thus it is\n\t* always true that e->Sym->next->Sym->next == e.\n\t*\n\t* Each vertex has a pointer to next and previous vertices in the\n\t* circular list, and a pointer to a half-edge with this vertex as\n\t* the origin (NULL if this is the dummy header).  There is also a\n\t* field \"data\" for client data.\n\t*\n\t* Each face has a pointer to the next and previous faces in the\n\t* circular list, and a pointer to a half-edge with this face as\n\t* the left face (NULL if this is the dummy header).  There is also\n\t* a field \"data\" for client data.\n\t*\n\t* Note that what we call a \"face\" is really a loop; faces may consist\n\t* of more than one loop (ie. not simply connected), but there is no\n\t* record of this in the data structure.  The mesh may consist of\n\t* several disconnected regions, so it may not be possible to visit\n\t* the entire mesh by starting at a half-edge and traversing the edge\n\t* structure.\n\t*\n\t* The mesh does NOT support isolated vertices; a vertex is deleted along\n\t* with its last edge.  Similarly when two faces are merged, one of the\n\t* faces is deleted (see tessMeshDelete below).  For mesh operations,\n\t* all face (loop) and vertex pointers must not be NULL.  However, once\n\t* mesh manipulation is finished, TESSmeshZapFace can be used to delete\n\t* faces of the mesh, one at a time.  All external faces can be \"zapped\"\n\t* before the mesh is returned to the client; then a NULL face indicates\n\t* a region which is not part of the output polygon.\n\t*/\n\n\tfunction TESSvertex() {\n\t\tthis.next = null;\t/* next vertex (never NULL) */\n\t\tthis.prev = null;\t/* previous vertex (never NULL) */\n\t\tthis.anEdge = null;\t/* a half-edge with this origin */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.coords = [0,0,0];\t/* vertex location in 3D */\n\t\tthis.s = 0.0;\n\t\tthis.t = 0.0;\t\t\t/* projection onto the sweep plane */\n\t\tthis.pqHandle = 0;\t\t/* to allow deletion from priority queue */\n\t\tthis.n = 0;\t\t\t\t/* to allow identify unique vertices */\n\t\tthis.idx = 0;\t\t\t/* to allow map result to original verts */\n\t} \n\n\tfunction TESSface() {\n\t\tthis.next = null;\t\t/* next face (never NULL) */\n\t\tthis.prev = null;\t\t/* previous face (never NULL) */\n\t\tthis.anEdge = null;\t\t/* a half edge with this left face */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.trail = null;\t\t/* \"stack\" for conversion to strips */\n\t\tthis.n = 0;\t\t\t\t/* to allow identiy unique faces */\n\t\tthis.marked = false;\t/* flag for conversion to strips */\n\t\tthis.inside = false;\t/* this face is in the polygon interior */\n\t};\n\n\tfunction TESShalfEdge(side) {\n\t\tthis.next = null;\t\t/* doubly-linked list (prev==Sym->next) */\n\t\tthis.Sym = null;\t\t/* same edge, opposite direction */\n\t\tthis.Onext = null;\t\t/* next edge CCW around origin */\n\t\tthis.Lnext = null;\t\t/* next edge CCW around left face */\n\t\tthis.Org = null;\t\t/* origin vertex (Overtex too long) */\n\t\tthis.Lface = null;\t\t/* left face */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.activeRegion = null;\t/* a region with this upper edge (sweep.c) */\n\t\tthis.winding = 0;\t\t\t/* change in winding number when crossing\n\t\t\t\t\t\t\t\t\t   from the right face to the left face */\n\t\tthis.side = side;\n\t};\n\n\tTESShalfEdge.prototype = {\n\t\tget Rface() { return this.Sym.Lface; },\n\t\tset Rface(v) { this.Sym.Lface = v; },\n\t\tget Dst() { return this.Sym.Org; },\n\t\tset Dst(v) { this.Sym.Org = v; },\n\t\tget Oprev() { return this.Sym.Lnext; },\n\t\tset Oprev(v) { this.Sym.Lnext = v; },\n\t\tget Lprev() { return this.Onext.Sym; },\n\t\tset Lprev(v) { this.Onext.Sym = v; },\n\t\tget Dprev() { return this.Lnext.Sym; },\n\t\tset Dprev(v) { this.Lnext.Sym = v; },\n\t\tget Rprev() { return this.Sym.Onext; },\n\t\tset Rprev(v) { this.Sym.Onext = v; },\n\t\tget Dnext() { return /*this.Rprev*/this.Sym.Onext.Sym; },  /* 3 pointers */\n\t\tset Dnext(v) { /*this.Rprev*/this.Sym.Onext.Sym = v; },  /* 3 pointers */\n\t\tget Rnext() { return /*this.Oprev*/this.Sym.Lnext.Sym; },  /* 3 pointers */\n\t\tset Rnext(v) { /*this.Oprev*/this.Sym.Lnext.Sym = v; },  /* 3 pointers */\n\t};\n\n\n\n\tfunction TESSmesh() {\n\t\tvar v = new TESSvertex();\n\t\tvar f = new TESSface();\n\t\tvar e = new TESShalfEdge(0);\n\t\tvar eSym = new TESShalfEdge(1);\n\n\t\tv.next = v.prev = v;\n\t\tv.anEdge = null;\n\n\t\tf.next = f.prev = f;\n\t\tf.anEdge = null;\n\t\tf.trail = null;\n\t\tf.marked = false;\n\t\tf.inside = false;\n\n\t\te.next = e;\n\t\te.Sym = eSym;\n\t\te.Onext = null;\n\t\te.Lnext = null;\n\t\te.Org = null;\n\t\te.Lface = null;\n\t\te.winding = 0;\n\t\te.activeRegion = null;\n\n\t\teSym.next = eSym;\n\t\teSym.Sym = e;\n\t\teSym.Onext = null;\n\t\teSym.Lnext = null;\n\t\teSym.Org = null;\n\t\teSym.Lface = null;\n\t\teSym.winding = 0;\n\t\teSym.activeRegion = null;\n\n\t\tthis.vHead = v;\t\t/* dummy header for vertex list */\n\t\tthis.fHead = f;\t\t/* dummy header for face list */\n\t\tthis.eHead = e;\t\t/* dummy header for edge list */\n\t\tthis.eHeadSym = eSym;\t/* and its symmetric counterpart */\n\t};\n\n\t/* The mesh operations below have three motivations: completeness,\n\t* convenience, and efficiency.  The basic mesh operations are MakeEdge,\n\t* Splice, and Delete.  All the other edge operations can be implemented\n\t* in terms of these.  The other operations are provided for convenience\n\t* and/or efficiency.\n\t*\n\t* When a face is split or a vertex is added, they are inserted into the\n\t* global list *before* the existing vertex or face (ie. e->Org or e->Lface).\n\t* This makes it easier to process all vertices or faces in the global lists\n\t* without worrying about processing the same data twice.  As a convenience,\n\t* when a face is split, the \"inside\" flag is copied from the old face.\n\t* Other internal data (v->data, v->activeRegion, f->data, f->marked,\n\t* f->trail, e->winding) is set to zero.\n\t*\n\t* ********************** Basic Edge Operations **************************\n\t*\n\t* tessMeshMakeEdge( mesh ) creates one edge, two vertices, and a loop.\n\t* The loop (face) consists of the two new half-edges.\n\t*\n\t* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\n\t* mesh connectivity and topology.  It changes the mesh so that\n\t*  eOrg->Onext <- OLD( eDst->Onext )\n\t*  eDst->Onext <- OLD( eOrg->Onext )\n\t* where OLD(...) means the value before the meshSplice operation.\n\t*\n\t* This can have two effects on the vertex structure:\n\t*  - if eOrg->Org != eDst->Org, the two vertices are merged together\n\t*  - if eOrg->Org == eDst->Org, the origin is split into two vertices\n\t* In both cases, eDst->Org is changed and eOrg->Org is untouched.\n\t*\n\t* Similarly (and independently) for the face structure,\n\t*  - if eOrg->Lface == eDst->Lface, one loop is split into two\n\t*  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\n\t* In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\n\t*\n\t* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\n\t* if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\n\t* eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\n\t* the newly created loop will contain eDel->Dst.  If the deletion of eDel\n\t* would create isolated vertices, those are deleted as well.\n\t*\n\t* ********************** Other Edge Operations **************************\n\t*\n\t* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\n\t* eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\n\t* eOrg and eNew will have the same left face.\n\t*\n\t* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\n\t* such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\n\t* eOrg and eNew will have the same left face.\n\t*\n\t* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\n\t* to eDst->Org, and returns the corresponding half-edge eNew.\n\t* If eOrg->Lface == eDst->Lface, this splits one loop into two,\n\t* and the newly created loop is eNew->Lface.  Otherwise, two disjoint\n\t* loops are merged into one, and the loop eDst->Lface is destroyed.\n\t*\n\t* ************************ Other Operations *****************************\n\t*\n\t* tessMeshNewMesh() creates a new mesh with no edges, no vertices,\n\t* and no loops (what we usually call a \"face\").\n\t*\n\t* tessMeshUnion( mesh1, mesh2 ) forms the union of all structures in\n\t* both meshes, and returns the new mesh (the old meshes are destroyed).\n\t*\n\t* tessMeshDeleteMesh( mesh ) will free all storage for any valid mesh.\n\t*\n\t* tessMeshZapFace( fZap ) destroys a face and removes it from the\n\t* global face list.  All edges of fZap will have a NULL pointer as their\n\t* left face.  Any edges which also have a NULL pointer as their right face\n\t* are deleted entirely (along with any isolated vertices this produces).\n\t* An entire mesh can be deleted by zapping its faces, one at a time,\n\t* in any order.  Zapped faces cannot be used in further mesh operations!\n\t*\n\t* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\n\t*/\n\n\tTESSmesh.prototype = {\n\n\t\t/* MakeEdge creates a new pair of half-edges which form their own loop.\n\t\t* No vertex or face structures are allocated, but these must be assigned\n\t\t* before the current edge operation is completed.\n\t\t*/\n\t\t//static TESShalfEdge *MakeEdge( TESSmesh* mesh, TESShalfEdge *eNext )\n\t\tmakeEdge_: function(eNext) {\n\t\t\tvar e = new TESShalfEdge(0);\n\t\t\tvar eSym = new TESShalfEdge(1);\n\n\t\t\t/* Make sure eNext points to the first edge of the edge pair */\n\t\t\tif( eNext.Sym.side < eNext.side ) { eNext = eNext.Sym; }\n\n\t\t\t/* Insert in circular doubly-linked list before eNext.\n\t\t\t* Note that the prev pointer is stored in Sym->next.\n\t\t\t*/\n\t\t\tvar ePrev = eNext.Sym.next;\n\t\t\teSym.next = ePrev;\n\t\t\tePrev.Sym.next = e;\n\t\t\te.next = eNext;\n\t\t\teNext.Sym.next = eSym;\n\n\t\t\te.Sym = eSym;\n\t\t\te.Onext = e;\n\t\t\te.Lnext = eSym;\n\t\t\te.Org = null;\n\t\t\te.Lface = null;\n\t\t\te.winding = 0;\n\t\t\te.activeRegion = null;\n\n\t\t\teSym.Sym = e;\n\t\t\teSym.Onext = eSym;\n\t\t\teSym.Lnext = e;\n\t\t\teSym.Org = null;\n\t\t\teSym.Lface = null;\n\t\t\teSym.winding = 0;\n\t\t\teSym.activeRegion = null;\n\n\t\t\treturn e;\n\t\t},\n\n\t\t/* Splice( a, b ) is best described by the Guibas/Stolfi paper or the\n\t\t* CS348a notes (see mesh.h).  Basically it modifies the mesh so that\n\t\t* a->Onext and b->Onext are exchanged.  This can have various effects\n\t\t* depending on whether a and b belong to different face or vertex rings.\n\t\t* For more explanation see tessMeshSplice() below.\n\t\t*/\n\t\t// static void Splice( TESShalfEdge *a, TESShalfEdge *b )\n\t\tsplice_: function(a, b) {\n\t\t\tvar aOnext = a.Onext;\n\t\t\tvar bOnext = b.Onext;\n\t\t\taOnext.Sym.Lnext = b;\n\t\t\tbOnext.Sym.Lnext = a;\n\t\t\ta.Onext = bOnext;\n\t\t\tb.Onext = aOnext;\n\t\t},\n\n\t\t/* MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the\n\t\t* origin of all edges in the vertex loop to which eOrig belongs. \"vNext\" gives\n\t\t* a place to insert the new vertex in the global vertex list.  We insert\n\t\t* the new vertex *before* vNext so that algorithms which walk the vertex\n\t\t* list will not see the newly created vertices.\n\t\t*/\n\t\t//static void MakeVertex( TESSvertex *newVertex, TESShalfEdge *eOrig, TESSvertex *vNext )\n\t\tmakeVertex_: function(newVertex, eOrig, vNext) {\n\t\t\tvar vNew = newVertex;\n\t\t\tassert(vNew !== null);\n\n\t\t\t/* insert in circular doubly-linked list before vNext */\n\t\t\tvar vPrev = vNext.prev;\n\t\t\tvNew.prev = vPrev;\n\t\t\tvPrev.next = vNew;\n\t\t\tvNew.next = vNext;\n\t\t\tvNext.prev = vNew;\n\n\t\t\tvNew.anEdge = eOrig;\n\t\t\t/* leave coords, s, t undefined */\n\n\t\t\t/* fix other edges on this vertex loop */\n\t\t\tvar e = eOrig;\n\t\t\tdo {\n\t\t\t\te.Org = vNew;\n\t\t\t\te = e.Onext;\n\t\t\t} while(e !== eOrig);\n\t\t},\n\n\t\t/* MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left\n\t\t* face of all edges in the face loop to which eOrig belongs.  \"fNext\" gives\n\t\t* a place to insert the new face in the global face list.  We insert\n\t\t* the new face *before* fNext so that algorithms which walk the face\n\t\t* list will not see the newly created faces.\n\t\t*/\n\t\t// static void MakeFace( TESSface *newFace, TESShalfEdge *eOrig, TESSface *fNext )\n\t\tmakeFace_: function(newFace, eOrig, fNext) {\n\t\t\tvar fNew = newFace;\n\t\t\tassert(fNew !== null); \n\n\t\t\t/* insert in circular doubly-linked list before fNext */\n\t\t\tvar fPrev = fNext.prev;\n\t\t\tfNew.prev = fPrev;\n\t\t\tfPrev.next = fNew;\n\t\t\tfNew.next = fNext;\n\t\t\tfNext.prev = fNew;\n\n\t\t\tfNew.anEdge = eOrig;\n\t\t\tfNew.trail = null;\n\t\t\tfNew.marked = false;\n\n\t\t\t/* The new face is marked \"inside\" if the old one was.  This is a\n\t\t\t* convenience for the common case where a face has been split in two.\n\t\t\t*/\n\t\t\tfNew.inside = fNext.inside;\n\n\t\t\t/* fix other edges on this face loop */\n\t\t\tvar e = eOrig;\n\t\t\tdo {\n\t\t\t\te.Lface = fNew;\n\t\t\t\te = e.Lnext;\n\t\t\t} while(e !== eOrig);\n\t\t},\n\n\t\t/* KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),\n\t\t* and removes from the global edge list.\n\t\t*/\n\t\t//static void KillEdge( TESSmesh *mesh, TESShalfEdge *eDel )\n\t\tkillEdge_: function(eDel) {\n\t\t\t/* Half-edges are allocated in pairs, see EdgePair above */\n\t\t\tif( eDel.Sym.side < eDel.side ) { eDel = eDel.Sym; }\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar eNext = eDel.next;\n\t\t\tvar ePrev = eDel.Sym.next;\n\t\t\teNext.Sym.next = ePrev;\n\t\t\tePrev.Sym.next = eNext;\n\t\t},\n\n\n\t\t/* KillVertex( vDel ) destroys a vertex and removes it from the global\n\t\t* vertex list.  It updates the vertex loop to point to a given new vertex.\n\t\t*/\n\t\t//static void KillVertex( TESSmesh *mesh, TESSvertex *vDel, TESSvertex *newOrg )\n\t\tkillVertex_: function(vDel, newOrg) {\n\t\t\tvar eStart = vDel.anEdge;\n\t\t\t/* change the origin of all affected edges */\n\t\t\tvar e = eStart;\n\t\t\tdo {\n\t\t\t\te.Org = newOrg;\n\t\t\t\te = e.Onext;\n\t\t\t} while(e !== eStart);\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar vPrev = vDel.prev;\n\t\t\tvar vNext = vDel.next;\n\t\t\tvNext.prev = vPrev;\n\t\t\tvPrev.next = vNext;\n\t\t},\n\n\t\t/* KillFace( fDel ) destroys a face and removes it from the global face\n\t\t* list.  It updates the face loop to point to a given new face.\n\t\t*/\n\t\t//static void KillFace( TESSmesh *mesh, TESSface *fDel, TESSface *newLface )\n\t\tkillFace_: function(fDel, newLface) {\n\t\t\tvar eStart = fDel.anEdge;\n\n\t\t\t/* change the left face of all affected edges */\n\t\t\tvar e = eStart;\n\t\t\tdo {\n\t\t\t\te.Lface = newLface;\n\t\t\t\te = e.Lnext;\n\t\t\t} while(e !== eStart);\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar fPrev = fDel.prev;\n\t\t\tvar fNext = fDel.next;\n\t\t\tfNext.prev = fPrev;\n\t\t\tfPrev.next = fNext;\n\t\t},\n\n\t\t/****************** Basic Edge Operations **********************/\n\n\t\t/* tessMeshMakeEdge creates one edge, two vertices, and a loop (face).\n\t\t* The loop consists of the two new half-edges.\n\t\t*/\n\t\t//TESShalfEdge *tessMeshMakeEdge( TESSmesh *mesh )\n\t\tmakeEdge: function() {\n\t\t\tvar newVertex1 = new TESSvertex();\n\t\t\tvar newVertex2 = new TESSvertex();\n\t\t\tvar newFace = new TESSface();\n\t\t\tvar e = this.makeEdge_( this.eHead);\n\t\t\tthis.makeVertex_( newVertex1, e, this.vHead );\n\t\t\tthis.makeVertex_( newVertex2, e.Sym, this.vHead );\n\t\t\tthis.makeFace_( newFace, e, this.fHead );\n\t\t\treturn e;\n\t\t},\n\n\t\t/* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\n\t\t* mesh connectivity and topology.  It changes the mesh so that\n\t\t*\teOrg->Onext <- OLD( eDst->Onext )\n\t\t*\teDst->Onext <- OLD( eOrg->Onext )\n\t\t* where OLD(...) means the value before the meshSplice operation.\n\t\t*\n\t\t* This can have two effects on the vertex structure:\n\t\t*  - if eOrg->Org != eDst->Org, the two vertices are merged together\n\t\t*  - if eOrg->Org == eDst->Org, the origin is split into two vertices\n\t\t* In both cases, eDst->Org is changed and eOrg->Org is untouched.\n\t\t*\n\t\t* Similarly (and independently) for the face structure,\n\t\t*  - if eOrg->Lface == eDst->Lface, one loop is split into two\n\t\t*  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\n\t\t* In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\n\t\t*\n\t\t* Some special cases:\n\t\t* If eDst == eOrg, the operation has no effect.\n\t\t* If eDst == eOrg->Lnext, the new face will have a single edge.\n\t\t* If eDst == eOrg->Lprev, the old face will have a single edge.\n\t\t* If eDst == eOrg->Onext, the new vertex will have a single edge.\n\t\t* If eDst == eOrg->Oprev, the old vertex will have a single edge.\n\t\t*/\n\t\t//int tessMeshSplice( TESSmesh* mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst )\n\t\tsplice: function(eOrg, eDst) {\n\t\t\tvar joiningLoops = false;\n\t\t\tvar joiningVertices = false;\n\n\t\t\tif( eOrg === eDst ) return;\n\n\t\t\tif( eDst.Org !== eOrg.Org ) {\n\t\t\t\t/* We are merging two disjoint vertices -- destroy eDst->Org */\n\t\t\t\tjoiningVertices = true;\n\t\t\t\tthis.killVertex_( eDst.Org, eOrg.Org );\n\t\t\t}\n\t\t\tif( eDst.Lface !== eOrg.Lface ) {\n\t\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDst.Lface, eOrg.Lface );\n\t\t\t}\n\n\t\t\t/* Change the edge structure */\n\t\t\tthis.splice_( eDst, eOrg );\n\n\t\t\tif( ! joiningVertices ) {\n\t\t\t\tvar newVertex = new TESSvertex();\n\n\t\t\t\t/* We split one vertex into two -- the new vertex is eDst->Org.\n\t\t\t\t* Make sure the old vertex points to a valid half-edge.\n\t\t\t\t*/\n\t\t\t\tthis.makeVertex_( newVertex, eDst, eOrg.Org );\n\t\t\t\teOrg.Org.anEdge = eOrg;\n\t\t\t}\n\t\t\tif( ! joiningLoops ) {\n\t\t\t\tvar newFace = new TESSface();  \n\n\t\t\t\t/* We split one loop into two -- the new loop is eDst->Lface.\n\t\t\t\t* Make sure the old face points to a valid half-edge.\n\t\t\t\t*/\n\t\t\t\tthis.makeFace_( newFace, eDst, eOrg.Lface );\n\t\t\t\teOrg.Lface.anEdge = eOrg;\n\t\t\t}\n\t\t},\n\n\t\t/* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\n\t\t* if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\n\t\t* eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\n\t\t* the newly created loop will contain eDel->Dst.  If the deletion of eDel\n\t\t* would create isolated vertices, those are deleted as well.\n\t\t*\n\t\t* This function could be implemented as two calls to tessMeshSplice\n\t\t* plus a few calls to memFree, but this would allocate and delete\n\t\t* unnecessary vertices and faces.\n\t\t*/\n\t\t//int tessMeshDelete( TESSmesh *mesh, TESShalfEdge *eDel )\n\t\tdelete: function(eDel) {\n\t\t\tvar eDelSym = eDel.Sym;\n\t\t\tvar joiningLoops = false;\n\n\t\t\t/* First step: disconnect the origin vertex eDel->Org.  We make all\n\t\t\t* changes to get a consistent mesh in this \"intermediate\" state.\n\t\t\t*/\n\t\t\tif( eDel.Lface !== eDel.Rface ) {\n\t\t\t\t/* We are joining two loops into one -- remove the left face */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDel.Lface, eDel.Rface );\n\t\t\t}\n\n\t\t\tif( eDel.Onext === eDel ) {\n\t\t\t\tthis.killVertex_( eDel.Org, null );\n\t\t\t} else {\n\t\t\t\t/* Make sure that eDel->Org and eDel->Rface point to valid half-edges */\n\t\t\t\teDel.Rface.anEdge = eDel.Oprev;\n\t\t\t\teDel.Org.anEdge = eDel.Onext;\n\n\t\t\t\tthis.splice_( eDel, eDel.Oprev );\n\t\t\t\tif( ! joiningLoops ) {\n\t\t\t\t\tvar newFace = new TESSface();\n\n\t\t\t\t\t/* We are splitting one loop into two -- create a new loop for eDel. */\n\t\t\t\t\tthis.makeFace_( newFace, eDel, eDel.Lface );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Claim: the mesh is now in a consistent state, except that eDel->Org\n\t\t\t* may have been deleted.  Now we disconnect eDel->Dst.\n\t\t\t*/\n\t\t\tif( eDelSym.Onext === eDelSym ) {\n\t\t\t\tthis.killVertex_( eDelSym.Org, null );\n\t\t\t\tthis.killFace_( eDelSym.Lface, null );\n\t\t\t} else {\n\t\t\t\t/* Make sure that eDel->Dst and eDel->Lface point to valid half-edges */\n\t\t\t\teDel.Lface.anEdge = eDelSym.Oprev;\n\t\t\t\teDelSym.Org.anEdge = eDelSym.Onext;\n\t\t\t\tthis.splice_( eDelSym, eDelSym.Oprev );\n\t\t\t}\n\n\t\t\t/* Any isolated vertices or faces have already been freed. */\n\t\t\tthis.killEdge_( eDel );\n\t\t},\n\n\t\t/******************** Other Edge Operations **********************/\n\n\t\t/* All these routines can be implemented with the basic edge\n\t\t* operations above.  They are provided for convenience and efficiency.\n\t\t*/\n\n\n\t\t/* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\n\t\t* eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\n\t\t* eOrg and eNew will have the same left face.\n\t\t*/\n\t\t// TESShalfEdge *tessMeshAddEdgeVertex( TESSmesh *mesh, TESShalfEdge *eOrg );\n\t\taddEdgeVertex: function(eOrg) {\n\t\t\tvar eNew = this.makeEdge_( eOrg );\n\t\t\tvar eNewSym = eNew.Sym;\n\n\t\t\t/* Connect the new edge appropriately */\n\t\t\tthis.splice_( eNew, eOrg.Lnext );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teNew.Org = eOrg.Dst;\n\n\t\t\tvar newVertex = new TESSvertex();\n\t\t\tthis.makeVertex_( newVertex, eNewSym, eNew.Org );\n\n\t\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\n\n\t\t\treturn eNew;\n\t\t},\n\n\n\t\t/* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\n\t\t* such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\n\t\t* eOrg and eNew will have the same left face.\n\t\t*/\n\t\t// TESShalfEdge *tessMeshSplitEdge( TESSmesh *mesh, TESShalfEdge *eOrg );\n\t\tsplitEdge: function(eOrg, eDst) {\n\t\t\tvar tempHalfEdge = this.addEdgeVertex( eOrg );\n\t\t\tvar eNew = tempHalfEdge.Sym;\n\n\t\t\t/* Disconnect eOrg from eOrg->Dst and connect it to eNew->Org */\n\t\t\tthis.splice_( eOrg.Sym, eOrg.Sym.Oprev );\n\t\t\tthis.splice_( eOrg.Sym, eNew );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teOrg.Dst = eNew.Org;\n\t\t\teNew.Dst.anEdge = eNew.Sym;\t/* may have pointed to eOrg->Sym */\n\t\t\teNew.Rface = eOrg.Rface;\n\t\t\teNew.winding = eOrg.winding;\t/* copy old winding information */\n\t\t\teNew.Sym.winding = eOrg.Sym.winding;\n\n\t\t\treturn eNew;\n\t\t},\n\n\n\t\t/* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\n\t\t* to eDst->Org, and returns the corresponding half-edge eNew.\n\t\t* If eOrg->Lface == eDst->Lface, this splits one loop into two,\n\t\t* and the newly created loop is eNew->Lface.  Otherwise, two disjoint\n\t\t* loops are merged into one, and the loop eDst->Lface is destroyed.\n\t\t*\n\t\t* If (eOrg == eDst), the new face will have only two edges.\n\t\t* If (eOrg->Lnext == eDst), the old face is reduced to a single edge.\n\t\t* If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.\n\t\t*/\n\n\t\t// TESShalfEdge *tessMeshConnect( TESSmesh *mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst );\n\t\tconnect: function(eOrg, eDst) {\n\t\t\tvar joiningLoops = false;  \n\t\t\tvar eNew = this.makeEdge_( eOrg );\n\t\t\tvar eNewSym = eNew.Sym;\n\n\t\t\tif( eDst.Lface !== eOrg.Lface ) {\n\t\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDst.Lface, eOrg.Lface );\n\t\t\t}\n\n\t\t\t/* Connect the new edge appropriately */\n\t\t\tthis.splice_( eNew, eOrg.Lnext );\n\t\t\tthis.splice_( eNewSym, eDst );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teNew.Org = eOrg.Dst;\n\t\t\teNewSym.Org = eDst.Org;\n\t\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\n\n\t\t\t/* Make sure the old face points to a valid half-edge */\n\t\t\teOrg.Lface.anEdge = eNewSym;\n\n\t\t\tif( ! joiningLoops ) {\n\t\t\t\tvar newFace = new TESSface();\n\t\t\t\t/* We split one loop into two -- the new loop is eNew->Lface */\n\t\t\t\tthis.makeFace_( newFace, eNew, eOrg.Lface );\n\t\t\t}\n\t\t\treturn eNew;\n\t\t},\n\n\t\t/* tessMeshZapFace( fZap ) destroys a face and removes it from the\n\t\t* global face list.  All edges of fZap will have a NULL pointer as their\n\t\t* left face.  Any edges which also have a NULL pointer as their right face\n\t\t* are deleted entirely (along with any isolated vertices this produces).\n\t\t* An entire mesh can be deleted by zapping its faces, one at a time,\n\t\t* in any order.  Zapped faces cannot be used in further mesh operations!\n\t\t*/\n\t\tzapFace: function( fZap )\n\t\t{\n\t\t\tvar eStart = fZap.anEdge;\n\t\t\tvar e, eNext, eSym;\n\t\t\tvar fPrev, fNext;\n\n\t\t\t/* walk around face, deleting edges whose right face is also NULL */\n\t\t\teNext = eStart.Lnext;\n\t\t\tdo {\n\t\t\t\te = eNext;\n\t\t\t\teNext = e.Lnext;\n\n\t\t\t\te.Lface = null;\n\t\t\t\tif( e.Rface === null ) {\n\t\t\t\t\t/* delete the edge -- see TESSmeshDelete above */\n\n\t\t\t\t\tif( e.Onext === e ) {\n\t\t\t\t\t\tthis.killVertex_( e.Org, null );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* Make sure that e->Org points to a valid half-edge */\n\t\t\t\t\t\te.Org.anEdge = e.Onext;\n\t\t\t\t\t\tthis.splice_( e, e.Oprev );\n\t\t\t\t\t}\n\t\t\t\t\teSym = e.Sym;\n\t\t\t\t\tif( eSym.Onext === eSym ) {\n\t\t\t\t\t\tthis.killVertex_( eSym.Org, null );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* Make sure that eSym->Org points to a valid half-edge */\n\t\t\t\t\t\teSym.Org.anEdge = eSym.Onext;\n\t\t\t\t\t\tthis.splice_( eSym, eSym.Oprev );\n\t\t\t\t\t}\n\t\t\t\t\tthis.killEdge_( e );\n\t\t\t\t}\n\t\t\t} while( e != eStart );\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tfPrev = fZap.prev;\n\t\t\tfNext = fZap.next;\n\t\t\tfNext.prev = fPrev;\n\t\t\tfPrev.next = fNext;\n\t\t},\n\n\t\tcountFaceVerts_: function(f) {\n\t\t\tvar eCur = f.anEdge;\n\t\t\tvar n = 0;\n\t\t\tdo\n\t\t\t{\n\t\t\t\tn++;\n\t\t\t\teCur = eCur.Lnext;\n\t\t\t}\n\t\t\twhile (eCur !== f.anEdge);\n\t\t\treturn n;\n\t\t},\n\n\t\t//int tessMeshMergeConvexFaces( TESSmesh *mesh, int maxVertsPerFace )\n\t\tmergeConvexFaces: function(maxVertsPerFace) {\n\t\t\tvar f;\n\t\t\tvar eCur, eNext, eSym;\n\t\t\tvar vStart;\n\t\t\tvar curNv, symNv;\n\n\t\t\tfor( f = this.fHead.next; f !== this.fHead; f = f.next )\n\t\t\t{\n\t\t\t\t// Skip faces which are outside the result.\n\t\t\t\tif( !f.inside )\n\t\t\t\t\tcontinue;\n\n\t\t\t\teCur = f.anEdge;\n\t\t\t\tvStart = eCur.Org;\n\t\t\t\t\t\n\t\t\t\twhile (true)\n\t\t\t\t{\n\t\t\t\t\teNext = eCur.Lnext;\n\t\t\t\t\teSym = eCur.Sym;\n\n\t\t\t\t\t// Try to merge if the neighbour face is valid.\n\t\t\t\t\tif( eSym && eSym.Lface && eSym.Lface.inside )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Try to merge the neighbour faces if the resulting polygons\n\t\t\t\t\t\t// does not exceed maximum number of vertices.\n\t\t\t\t\t\tcurNv = this.countFaceVerts_( f );\n\t\t\t\t\t\tsymNv = this.countFaceVerts_( eSym.Lface );\n\t\t\t\t\t\tif( (curNv+symNv-2) <= maxVertsPerFace )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Merge if the resulting poly is convex.\n\t\t\t\t\t\t\tif( Geom.vertCCW( eCur.Lprev.Org, eCur.Org, eSym.Lnext.Lnext.Org ) &&\n\t\t\t\t\t\t\t\tGeom.vertCCW( eSym.Lprev.Org, eSym.Org, eCur.Lnext.Lnext.Org ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\teNext = eSym.Lnext;\n\t\t\t\t\t\t\t\tthis.delete( eSym );\n\t\t\t\t\t\t\t\teCur = null;\n\t\t\t\t\t\t\t\teSym = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif( eCur && eCur.Lnext.Org === vStart )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t// Continue to next edge.\n\t\t\t\t\teCur = eNext;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t},\n\n\t\t/* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\n\t\t*/\n\t\tcheck: function() {\n\t\t\tvar fHead = this.fHead;\n\t\t\tvar vHead = this.vHead;\n\t\t\tvar eHead = this.eHead;\n\t\t\tvar f, fPrev, v, vPrev, e, ePrev;\n\n\t\t\tfPrev = fHead;\n\t\t\tfor( fPrev = fHead ; (f = fPrev.next) !== fHead; fPrev = f) {\n\t\t\t\tassert( f.prev === fPrev );\n\t\t\t\te = f.anEdge;\n\t\t\t\tdo {\n\t\t\t\t\tassert( e.Sym !== e );\n\t\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t\t\tassert( e.Lface === f );\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t} while( e !== f.anEdge );\n\t\t\t}\n\t\t\tassert( f.prev === fPrev && f.anEdge === null );\n\n\t\t\tvPrev = vHead;\n\t\t\tfor( vPrev = vHead ; (v = vPrev.next) !== vHead; vPrev = v) {\n\t\t\t\tassert( v.prev === vPrev );\n\t\t\t\te = v.anEdge;\n\t\t\t\tdo {\n\t\t\t\t\tassert( e.Sym !== e );\n\t\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t\t\tassert( e.Org === v );\n\t\t\t\t\te = e.Onext;\n\t\t\t\t} while( e !== v.anEdge );\n\t\t\t}\n\t\t\tassert( v.prev === vPrev && v.anEdge === null );\n\n\t\t\tePrev = eHead;\n\t\t\tfor( ePrev = eHead ; (e = ePrev.next) !== eHead; ePrev = e) {\n\t\t\t\tassert( e.Sym.next === ePrev.Sym );\n\t\t\t\tassert( e.Sym !== e );\n\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\tassert( e.Org !== null );\n\t\t\t\tassert( e.Dst !== null );\n\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t}\n\t\t\tassert( e.Sym.next === ePrev.Sym\n\t\t\t\t&& e.Sym === this.eHeadSym\n\t\t\t\t&& e.Sym.Sym === e\n\t\t\t\t&& e.Org === null && e.Dst === null\n\t\t\t\t&& e.Lface === null && e.Rface === null );\n\t\t}\n\n\t};\n\n\tvar Geom = {};\n\n\tGeom.vertEq = function(u,v) {\n\t\treturn (u.s === v.s && u.t === v.t);\n\t};\n\n\t/* Returns TRUE if u is lexicographically <= v. */\n\tGeom.vertLeq = function(u,v) {\n\t\treturn ((u.s < v.s) || (u.s === v.s && u.t <= v.t));\n\t};\n\n\t/* Versions of VertLeq, EdgeSign, EdgeEval with s and t transposed. */\n\tGeom.transLeq = function(u,v) {\n\t\treturn ((u.t < v.t) || (u.t === v.t && u.s <= v.s));\n\t};\n\n\tGeom.edgeGoesLeft = function(e) {\n\t\treturn Geom.vertLeq( e.Dst, e.Org );\n\t};\n\n\tGeom.edgeGoesRight = function(e) {\n\t\treturn Geom.vertLeq( e.Org, e.Dst );\n\t};\n\n\tGeom.vertL1dist = function(u,v) {\n\t\treturn (Math.abs(u.s - v.s) + Math.abs(u.t - v.t));\n\t};\n\n\t//TESSreal tesedgeEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.edgeEval = function( u, v, w ) {\n\t\t/* Given three vertices u,v,w such that VertLeq(u,v) && VertLeq(v,w),\n\t\t* evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n\t\t* Returns v->t - (uw)(v->s), ie. the signed distance from uw to v.\n\t\t* If uw is vertical (and thus passes thru v), the result is zero.\n\t\t*\n\t\t* The calculation is extremely accurate and stable, even when v\n\t\t* is very close to u or w.  In particular if we set v->t = 0 and\n\t\t* let r be the negated result (this evaluates (uw)(v->s)), then\n\t\t* r is guaranteed to satisfy MIN(u->t,w->t) <= r <= MAX(u->t,w->t).\n\t\t*/\n\t\tassert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));\n\n\t\tvar gapL = v.s - u.s;\n\t\tvar gapR = w.s - v.s;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\tif( gapL < gapR ) {\n\t\t\t\treturn (v.t - u.t) + (u.t - w.t) * (gapL / (gapL + gapR));\n\t\t\t} else {\n\t\t\t\treturn (v.t - w.t) + (w.t - u.t) * (gapR / (gapL + gapR));\n\t\t\t}\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\t//TESSreal tesedgeSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.edgeSign = function( u, v, w ) {\n\t\t/* Returns a number whose sign matches EdgeEval(u,v,w) but which\n\t\t* is cheaper to evaluate.  Returns > 0, == 0 , or < 0\n\t\t* as v is above, on, or below the edge uw.\n\t\t*/\n\t\tassert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));\n\n\t\tvar gapL = v.s - u.s;\n\t\tvar gapR = w.s - v.s;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\treturn (v.t - w.t) * gapL + (v.t - u.t) * gapR;\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\n\t/***********************************************************************\n\t* Define versions of EdgeSign, EdgeEval with s and t transposed.\n\t*/\n\n\t//TESSreal testransEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.transEval = function( u, v, w ) {\n\t\t/* Given three vertices u,v,w such that TransLeq(u,v) && TransLeq(v,w),\n\t\t* evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n\t\t* Returns v->s - (uw)(v->t), ie. the signed distance from uw to v.\n\t\t* If uw is vertical (and thus passes thru v), the result is zero.\n\t\t*\n\t\t* The calculation is extremely accurate and stable, even when v\n\t\t* is very close to u or w.  In particular if we set v->s = 0 and\n\t\t* let r be the negated result (this evaluates (uw)(v->t)), then\n\t\t* r is guaranteed to satisfy MIN(u->s,w->s) <= r <= MAX(u->s,w->s).\n\t\t*/\n\t\tassert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));\n\n\t\tvar gapL = v.t - u.t;\n\t\tvar gapR = w.t - v.t;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\tif( gapL < gapR ) {\n\t\t\t\treturn (v.s - u.s) + (u.s - w.s) * (gapL / (gapL + gapR));\n\t\t\t} else {\n\t\t\t\treturn (v.s - w.s) + (w.s - u.s) * (gapR / (gapL + gapR));\n\t\t\t}\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\t//TESSreal testransSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.transSign = function( u, v, w ) {\n\t\t/* Returns a number whose sign matches TransEval(u,v,w) but which\n\t\t* is cheaper to evaluate.  Returns > 0, == 0 , or < 0\n\t\t* as v is above, on, or below the edge uw.\n\t\t*/\n\t\tassert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));\n\n\t\tvar gapL = v.t - u.t;\n\t\tvar gapR = w.t - v.t;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\treturn (v.s - w.s) * gapL + (v.s - u.s) * gapR;\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\n\t//int tesvertCCW( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.vertCCW = function( u, v, w ) {\n\t\t/* For almost-degenerate situations, the results are not reliable.\n\t\t* Unless the floating-point arithmetic can be performed without\n\t\t* rounding errors, *any* implementation will give incorrect results\n\t\t* on some degenerate inputs, so the client must have some way to\n\t\t* handle this situation.\n\t\t*/\n\t\treturn (u.s*(v.t - w.t) + v.s*(w.t - u.t) + w.s*(u.t - v.t)) >= 0.0;\n\t};\n\n\t/* Given parameters a,x,b,y returns the value (b*x+a*y)/(a+b),\n\t* or (x+y)/2 if a==b==0.  It requires that a,b >= 0, and enforces\n\t* this in the rare case that one argument is slightly negative.\n\t* The implementation is extremely stable numerically.\n\t* In particular it guarantees that the result r satisfies\n\t* MIN(x,y) <= r <= MAX(x,y), and the results are very accurate\n\t* even when a and b differ greatly in magnitude.\n\t*/\n\tGeom.interpolate = function(a,x,b,y) {\n\t\treturn (a = (a < 0) ? 0 : a, b = (b < 0) ? 0 : b, ((a <= b) ? ((b == 0) ? ((x+y) / 2) : (x + (y-x) * (a/(a+b)))) : (y + (x-y) * (b/(a+b)))));\n\t};\n\n\t/*\n\t#ifndef FOR_TRITE_TEST_PROGRAM\n\t#define Interpolate(a,x,b,y)\tRealInterpolate(a,x,b,y)\n\t#else\n\n\t// Claim: the ONLY property the sweep algorithm relies on is that\n\t// MIN(x,y) <= r <= MAX(x,y).  This is a nasty way to test that.\n\t#include <stdlib.h>\n\textern int RandomInterpolate;\n\n\tdouble Interpolate( double a, double x, double b, double y)\n\t{\n\t\tprintf(\"*********************%d\\n\",RandomInterpolate);\n\t\tif( RandomInterpolate ) {\n\t\t\ta = 1.2 * drand48() - 0.1;\n\t\t\ta = (a < 0) ? 0 : ((a > 1) ? 1 : a);\n\t\t\tb = 1.0 - a;\n\t\t}\n\t\treturn RealInterpolate(a,x,b,y);\n\t}\n\t#endif*/\n\n\tGeom.intersect = function( o1, d1, o2, d2, v ) {\n\t\t/* Given edges (o1,d1) and (o2,d2), compute their point of intersection.\n\t\t* The computed point is guaranteed to lie in the intersection of the\n\t\t* bounding rectangles defined by each edge.\n\t\t*/\n\t\tvar z1, z2;\n\t\tvar t;\n\n\t\t/* This is certainly not the most efficient way to find the intersection\n\t\t* of two line segments, but it is very numerically stable.\n\t\t*\n\t\t* Strategy: find the two middle vertices in the VertLeq ordering,\n\t\t* and interpolate the intersection s-value from these.  Then repeat\n\t\t* using the TransLeq ordering to find the intersection t-value.\n\t\t*/\n\n\t\tif( ! Geom.vertLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }\n\t\tif( ! Geom.vertLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }\n\t\tif( ! Geom.vertLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; }//swap( o1, o2 ); swap( d1, d2 ); }\n\n\t\tif( ! Geom.vertLeq( o2, d1 )) {\n\t\t\t/* Technically, no intersection -- do our best */\n\t\t\tv.s = (o2.s + d1.s) / 2;\n\t\t} else if( Geom.vertLeq( d1, d2 )) {\n\t\t\t/* Interpolate between o2 and d1 */\n\t\t\tz1 = Geom.edgeEval( o1, o2, d1 );\n\t\t\tz2 = Geom.edgeEval( o2, d1, d2 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.s = Geom.interpolate( z1, o2.s, z2, d1.s );\n\t\t} else {\n\t\t\t/* Interpolate between o2 and d2 */\n\t\t\tz1 = Geom.edgeSign( o1, o2, d1 );\n\t\t\tz2 = -Geom.edgeSign( o1, d2, d1 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.s = Geom.interpolate( z1, o2.s, z2, d2.s );\n\t\t}\n\n\t\t/* Now repeat the process for t */\n\n\t\tif( ! Geom.transLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }\n\t\tif( ! Geom.transLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }\n\t\tif( ! Geom.transLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; } //swap( o1, o2 ); swap( d1, d2 ); }\n\n\t\tif( ! Geom.transLeq( o2, d1 )) {\n\t\t\t/* Technically, no intersection -- do our best */\n\t\t\tv.t = (o2.t + d1.t) / 2;\n\t\t} else if( Geom.transLeq( d1, d2 )) {\n\t\t\t/* Interpolate between o2 and d1 */\n\t\t\tz1 = Geom.transEval( o1, o2, d1 );\n\t\t\tz2 = Geom.transEval( o2, d1, d2 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.t = Geom.interpolate( z1, o2.t, z2, d1.t );\n\t\t} else {\n\t\t\t/* Interpolate between o2 and d2 */\n\t\t\tz1 = Geom.transSign( o1, o2, d1 );\n\t\t\tz2 = -Geom.transSign( o1, d2, d1 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.t = Geom.interpolate( z1, o2.t, z2, d2.t );\n\t\t}\n\t};\n\n\n\n\tfunction DictNode() {\n\t\tthis.key = null;\n\t\tthis.next = null;\n\t\tthis.prev = null;\n\t};\n\n\tfunction Dict(frame, leq) {\n\t\tthis.head = new DictNode();\n\t\tthis.head.next = this.head;\n\t\tthis.head.prev = this.head;\n\t\tthis.frame = frame;\n\t\tthis.leq = leq;\n\t};\n\n\tDict.prototype = {\n\t\tmin: function() {\n\t\t\treturn this.head.next;\n\t\t},\n\n\t\tmax: function() {\n\t\t\treturn this.head.prev;\n\t\t},\n\n\t\tinsert: function(k) {\n\t\t\treturn this.insertBefore(this.head, k);\n\t\t},\n\n\t\tsearch: function(key) {\n\t\t\t/* Search returns the node with the smallest key greater than or equal\n\t\t\t* to the given key.  If there is no such key, returns a node whose\n\t\t\t* key is NULL.  Similarly, Succ(Max(d)) has a NULL key, etc.\n\t\t\t*/\n\t\t\tvar node = this.head;\n\t\t\tdo {\n\t\t\t\tnode = node.next;\n\t\t\t} while( node.key !== null && ! this.leq(this.frame, key, node.key));\n\n\t\t\treturn node;\n\t\t},\n\n\t\tinsertBefore: function(node, key) {\n\t\t\tdo {\n\t\t\t\tnode = node.prev;\n\t\t\t} while( node.key !== null && ! this.leq(this.frame, node.key, key));\n\n\t\t\tvar newNode = new DictNode();\n\t\t\tnewNode.key = key;\n\t\t\tnewNode.next = node.next;\n\t\t\tnode.next.prev = newNode;\n\t\t\tnewNode.prev = node;\n\t\t\tnode.next = newNode;\n\n\t\t\treturn newNode;\n\t\t},\n\n\t\tdelete: function(node) {\n\t\t\tnode.next.prev = node.prev;\n\t\t\tnode.prev.next = node.next;\n\t\t}\n\t};\n\n\n\tfunction PQnode() {\n\t\tthis.handle = null;\n\t}\n\n\tfunction PQhandleElem() {\n\t\tthis.key = null;\n\t\tthis.node = null;\n\t}\n\n\tfunction PriorityQ(size, leq) {\n\t\tthis.size = 0;\n\t\tthis.max = size;\n\n\t\tthis.nodes = [];\n\t\tthis.nodes.length = size+1;\n\t\tfor (var i = 0; i < this.nodes.length; i++)\n\t\t\tthis.nodes[i] = new PQnode();\n\n\t\tthis.handles = [];\n\t\tthis.handles.length = size+1;\n\t\tfor (var i = 0; i < this.handles.length; i++)\n\t\t\tthis.handles[i] = new PQhandleElem();\n\n\t\tthis.initialized = false;\n\t\tthis.freeList = 0;\n\t\tthis.leq = leq;\n\n\t\tthis.nodes[1].handle = 1;\t/* so that Minimum() returns NULL */\n\t\tthis.handles[1].key = null;\n\t};\n\n\tPriorityQ.prototype = {\n\n\t\tfloatDown_: function( curr )\n\t\t{\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hCurr, hChild;\n\t\t\tvar child;\n\n\t\t\thCurr = n[curr].handle;\n\t\t\tfor( ;; ) {\n\t\t\t\tchild = curr << 1;\n\t\t\t\tif( child < this.size && this.leq( h[n[child+1].handle].key, h[n[child].handle].key )) {\n\t\t\t\t\t++child;\n\t\t\t\t}\n\n\t\t\t\tassert(child <= this.max);\n\n\t\t\t\thChild = n[child].handle;\n\t\t\t\tif( child > this.size || this.leq( h[hCurr].key, h[hChild].key )) {\n\t\t\t\t\tn[curr].handle = hCurr;\n\t\t\t\t\th[hCurr].node = curr;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tn[curr].handle = hChild;\n\t\t\t\th[hChild].node = curr;\n\t\t\t\tcurr = child;\n\t\t\t}\n\t\t},\n\n\t\tfloatUp_: function( curr )\n\t\t{\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hCurr, hParent;\n\t\t\tvar parent;\n\n\t\t\thCurr = n[curr].handle;\n\t\t\tfor( ;; ) {\n\t\t\t\tparent = curr >> 1;\n\t\t\t\thParent = n[parent].handle;\n\t\t\t\tif( parent == 0 || this.leq( h[hParent].key, h[hCurr].key )) {\n\t\t\t\t\tn[curr].handle = hCurr;\n\t\t\t\t\th[hCurr].node = curr;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tn[curr].handle = hParent;\n\t\t\t\th[hParent].node = curr;\n\t\t\t\tcurr = parent;\n\t\t\t}\n\t\t},\n\n\t\tinit: function() {\n\t\t\t/* This method of building a heap is O(n), rather than O(n lg n). */\n\t\t\tfor( var i = this.size; i >= 1; --i ) {\n\t\t\t\tthis.floatDown_( i );\n\t\t\t}\n\t\t\tthis.initialized = true;\n\t\t},\n\n\t\tmin: function() {\n\t\t\treturn this.handles[this.nodes[1].handle].key;\n\t\t},\n\n\t\tisEmpty: function() {\n\t\t\tthis.size === 0;\n\t\t},\n\n\t\t/* really pqHeapInsert */\n\t\t/* returns INV_HANDLE iff out of memory */\n\t\t//PQhandle pqHeapInsert( TESSalloc* alloc, PriorityQHeap *pq, PQkey keyNew )\n\t\tinsert: function(keyNew)\n\t\t{\n\t\t\tvar curr;\n\t\t\tvar free;\n\n\t\t\tcurr = ++this.size;\n\t\t\tif( (curr*2) > this.max ) {\n\t\t\t\tthis.max *= 2;\n\t\t\t\tvar s;\n\t\t\t\ts = this.nodes.length;\n\t\t\t\tthis.nodes.length = this.max+1;\n\t\t\t\tfor (var i = s; i < this.nodes.length; i++)\n\t\t\t\t\tthis.nodes[i] = new PQnode();\n\n\t\t\t\ts = this.handles.length;\n\t\t\t\tthis.handles.length = this.max+1;\n\t\t\t\tfor (var i = s; i < this.handles.length; i++)\n\t\t\t\t\tthis.handles[i] = new PQhandleElem();\n\t\t\t}\n\n\t\t\tif( this.freeList === 0 ) {\n\t\t\t\tfree = curr;\n\t\t\t} else {\n\t\t\t\tfree = this.freeList;\n\t\t\t\tthis.freeList = this.handles[free].node;\n\t\t\t}\n\n\t\t\tthis.nodes[curr].handle = free;\n\t\t\tthis.handles[free].node = curr;\n\t\t\tthis.handles[free].key = keyNew;\n\n\t\t\tif( this.initialized ) {\n\t\t\t\tthis.floatUp_( curr );\n\t\t\t}\n\t\t\treturn free;\n\t\t},\n\n\t\t//PQkey pqHeapExtractMin( PriorityQHeap *pq )\n\t\textractMin: function() {\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hMin = n[1].handle;\n\t\t\tvar min = h[hMin].key;\n\n\t\t\tif( this.size > 0 ) {\n\t\t\t\tn[1].handle = n[this.size].handle;\n\t\t\t\th[n[1].handle].node = 1;\n\n\t\t\t\th[hMin].key = null;\n\t\t\t\th[hMin].node = this.freeList;\n\t\t\t\tthis.freeList = hMin;\n\n\t\t\t\t--this.size;\n\t\t\t\tif( this.size > 0 ) {\n\t\t\t\t\tthis.floatDown_( 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn min;\n\t\t},\n\n\t\tdelete: function( hCurr ) {\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar curr;\n\n\t\t\tassert( hCurr >= 1 && hCurr <= this.max && h[hCurr].key !== null );\n\n\t\t\tcurr = h[hCurr].node;\n\t\t\tn[curr].handle = n[this.size].handle;\n\t\t\th[n[curr].handle].node = curr;\n\n\t\t\t--this.size;\n\t\t\tif( curr <= this.size ) {\n\t\t\t\tif( curr <= 1 || this.leq( h[n[curr>>1].handle].key, h[n[curr].handle].key )) {\n\t\t\t\t\tthis.floatDown_( curr );\n\t\t\t\t} else {\n\t\t\t\t\tthis.floatUp_( curr );\n\t\t\t\t}\n\t\t\t}\n\t\t\th[hCurr].key = null;\n\t\t\th[hCurr].node = this.freeList;\n\t\t\tthis.freeList = hCurr;\n\t\t}\n\t};\n\n\n\t/* For each pair of adjacent edges crossing the sweep line, there is\n\t* an ActiveRegion to represent the region between them.  The active\n\t* regions are kept in sorted order in a dynamic dictionary.  As the\n\t* sweep line crosses each vertex, we update the affected regions.\n\t*/\n\n\tfunction ActiveRegion() {\n\t\tthis.eUp = null;\t\t/* upper edge, directed right to left */\n\t\tthis.nodeUp = null;\t/* dictionary node corresponding to eUp */\n\t\tthis.windingNumber = 0;\t/* used to determine which regions are\n\t\t\t\t\t\t\t\t* inside the polygon */\n\t\tthis.inside = false;\t\t/* is this region inside the polygon? */\n\t\tthis.sentinel = false;\t/* marks fake edges at t = +/-infinity */\n\t\tthis.dirty = false;\t\t/* marks regions where the upper or lower\n\t\t\t\t\t\t* edge has changed, but we haven't checked\n\t\t\t\t\t\t* whether they intersect yet */\n\t\tthis.fixUpperEdge = false;\t/* marks temporary edges introduced when\n\t\t\t\t\t\t\t* we process a \"right vertex\" (one without\n\t\t\t\t\t\t\t* any edges leaving to the right) */\n\t};\n\n\tvar Sweep = {};\n\n\tSweep.regionBelow = function(r) {\n\t\treturn r.nodeUp.prev.key;\n\t}\n\n\tSweep.regionAbove = function(r) {\n\t\treturn r.nodeUp.next.key;\n\t}\n\n\tSweep.debugEvent = function( tess ) {\n\t\t// empty\n\t}\n\n\n\t/*\n\t* Invariants for the Edge Dictionary.\n\t* - each pair of adjacent edges e2=Succ(e1) satisfies EdgeLeq(e1,e2)\n\t*   at any valid location of the sweep event\n\t* - if EdgeLeq(e2,e1) as well (at any valid sweep event), then e1 and e2\n\t*   share a common endpoint\n\t* - for each e, e->Dst has been processed, but not e->Org\n\t* - each edge e satisfies VertLeq(e->Dst,event) && VertLeq(event,e->Org)\n\t*   where \"event\" is the current sweep line event.\n\t* - no edge e has zero length\n\t*\n\t* Invariants for the Mesh (the processed portion).\n\t* - the portion of the mesh left of the sweep line is a planar graph,\n\t*   ie. there is *some* way to embed it in the plane\n\t* - no processed edge has zero length\n\t* - no two processed vertices have identical coordinates\n\t* - each \"inside\" region is monotone, ie. can be broken into two chains\n\t*   of monotonically increasing vertices according to VertLeq(v1,v2)\n\t*   - a non-invariant: these chains may intersect (very slightly)\n\t*\n\t* Invariants for the Sweep.\n\t* - if none of the edges incident to the event vertex have an activeRegion\n\t*   (ie. none of these edges are in the edge dictionary), then the vertex\n\t*   has only right-going edges.\n\t* - if an edge is marked \"fixUpperEdge\" (it is a temporary edge introduced\n\t*   by ConnectRightVertex), then it is the only right-going edge from\n\t*   its associated vertex.  (This says that these edges exist only\n\t*   when it is necessary.)\n\t*/\n\n\t/* When we merge two edges into one, we need to compute the combined\n\t* winding of the new edge.\n\t*/\n\tSweep.addWinding = function(eDst,eSrc) {\n\t\teDst.winding += eSrc.winding;\n\t\teDst.Sym.winding += eSrc.Sym.winding;\n\t}\n\n\n\t//static int EdgeLeq( TESStesselator *tess, ActiveRegion *reg1, ActiveRegion *reg2 )\n\tSweep.edgeLeq = function( tess, reg1, reg2 ) {\n\t\t/*\n\t\t* Both edges must be directed from right to left (this is the canonical\n\t\t* direction for the upper edge of each region).\n\t\t*\n\t\t* The strategy is to evaluate a \"t\" value for each edge at the\n\t\t* current sweep line position, given by tess->event.  The calculations\n\t\t* are designed to be very stable, but of course they are not perfect.\n\t\t*\n\t\t* Special case: if both edge destinations are at the sweep event,\n\t\t* we sort the edges by slope (they would otherwise compare equally).\n\t\t*/\n\t\tvar ev = tess.event;\n\t\tvar t1, t2;\n\n\t\tvar e1 = reg1.eUp;\n\t\tvar e2 = reg2.eUp;\n\n\t\tif( e1.Dst === ev ) {\n\t\t\tif( e2.Dst === ev ) {\n\t\t\t\t/* Two edges right of the sweep line which meet at the sweep event.\n\t\t\t\t* Sort them by slope.\n\t\t\t\t*/\n\t\t\t\tif( Geom.vertLeq( e1.Org, e2.Org )) {\n\t\t\t\t\treturn Geom.edgeSign( e2.Dst, e1.Org, e2.Org ) <= 0;\n\t\t\t\t}\n\t\t\t\treturn Geom.edgeSign( e1.Dst, e2.Org, e1.Org ) >= 0;\n\t\t\t}\n\t\t\treturn Geom.edgeSign( e2.Dst, ev, e2.Org ) <= 0;\n\t\t}\n\t\tif( e2.Dst === ev ) {\n\t\t\treturn Geom.edgeSign( e1.Dst, ev, e1.Org ) >= 0;\n\t\t}\n\n\t\t/* General case - compute signed distance *from* e1, e2 to event */\n\t\tvar t1 = Geom.edgeEval( e1.Dst, ev, e1.Org );\n\t\tvar t2 = Geom.edgeEval( e2.Dst, ev, e2.Org );\n\t\treturn (t1 >= t2);\n\t}\n\n\n\t//static void DeleteRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.deleteRegion = function( tess, reg ) {\n\t\tif( reg.fixUpperEdge ) {\n\t\t\t/* It was created with zero winding number, so it better be\n\t\t\t* deleted with zero winding number (ie. it better not get merged\n\t\t\t* with a real edge).\n\t\t\t*/\n\t\t\tassert( reg.eUp.winding === 0 );\n\t\t}\n\t\treg.eUp.activeRegion = null;\n\t\ttess.dict.delete( reg.nodeUp );\n\t}\n\n\t//static int FixUpperEdge( TESStesselator *tess, ActiveRegion *reg, TESShalfEdge *newEdge )\n\tSweep.fixUpperEdge = function( tess, reg, newEdge ) {\n\t\t/*\n\t\t* Replace an upper edge which needs fixing (see ConnectRightVertex).\n\t\t*/\n\t\tassert( reg.fixUpperEdge );\n\t\ttess.mesh.delete( reg.eUp );\n\t\treg.fixUpperEdge = false;\n\t\treg.eUp = newEdge;\n\t\tnewEdge.activeRegion = reg;\n\t}\n\n\t//static ActiveRegion *TopLeftRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.topLeftRegion = function( tess, reg ) {\n\t\tvar org = reg.eUp.Org;\n\t\tvar e;\n\n\t\t/* Find the region above the uppermost edge with the same origin */\n\t\tdo {\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t} while( reg.eUp.Org === org );\n\n\t\t/* If the edge above was a temporary edge introduced by ConnectRightVertex,\n\t\t* now is the time to fix it.\n\t\t*/\n\t\tif( reg.fixUpperEdge ) {\n\t\t\te = tess.mesh.connect( Sweep.regionBelow(reg).eUp.Sym, reg.eUp.Lnext );\n\t\t\tif (e === null) return null;\n\t\t\tSweep.fixUpperEdge( tess, reg, e );\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t}\n\t\treturn reg;\n\t}\n\n\t//static ActiveRegion *TopRightRegion( ActiveRegion *reg )\n\tSweep.topRightRegion = function( reg )\n\t{\n\t\tvar dst = reg.eUp.Dst;\n\t\tvar reg = null;\n\t\t/* Find the region above the uppermost edge with the same destination */\n\t\tdo {\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t} while( reg.eUp.Dst === dst );\n\t\treturn reg;\n\t}\n\n\t//static ActiveRegion *AddRegionBelow( TESStesselator *tess, ActiveRegion *regAbove, TESShalfEdge *eNewUp )\n\tSweep.addRegionBelow = function( tess, regAbove, eNewUp ) {\n\t\t/*\n\t\t* Add a new active region to the sweep line, *somewhere* below \"regAbove\"\n\t\t* (according to where the new edge belongs in the sweep-line dictionary).\n\t\t* The upper edge of the new region will be \"eNewUp\".\n\t\t* Winding number and \"inside\" flag are not updated.\n\t\t*/\n\t\tvar regNew = new ActiveRegion();\n\t\tregNew.eUp = eNewUp;\n\t\tregNew.nodeUp = tess.dict.insertBefore( regAbove.nodeUp, regNew );\n\t//\tif (regNew->nodeUp == NULL) longjmp(tess->env,1);\n\t\tregNew.fixUpperEdge = false;\n\t\tregNew.sentinel = false;\n\t\tregNew.dirty = false;\n\n\t\teNewUp.activeRegion = regNew;\n\t\treturn regNew;\n\t}\n\n\t//static int IsWindingInside( TESStesselator *tess, int n )\n\tSweep.isWindingInside = function( tess, n ) {\n\t\tswitch( tess.windingRule ) {\n\t\t\tcase Tess2.WINDING_ODD:\n\t\t\t\treturn (n & 1) != 0;\n\t\t\tcase Tess2.WINDING_NONZERO:\n\t\t\t\treturn (n != 0);\n\t\t\tcase Tess2.WINDING_POSITIVE:\n\t\t\t\treturn (n > 0);\n\t\t\tcase Tess2.WINDING_NEGATIVE:\n\t\t\t\treturn (n < 0);\n\t\t\tcase Tess2.WINDING_ABS_GEQ_TWO:\n\t\t\t\treturn (n >= 2) || (n <= -2);\n\t\t}\n\t\tassert( false );\n\t\treturn false;\n\t}\n\n\t//static void ComputeWinding( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.computeWinding = function( tess, reg ) {\n\t\treg.windingNumber = Sweep.regionAbove(reg).windingNumber + reg.eUp.winding;\n\t\treg.inside = Sweep.isWindingInside( tess, reg.windingNumber );\n\t}\n\n\n\t//static void FinishRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.finishRegion = function( tess, reg ) {\n\t\t/*\n\t\t* Delete a region from the sweep line.  This happens when the upper\n\t\t* and lower chains of a region meet (at a vertex on the sweep line).\n\t\t* The \"inside\" flag is copied to the appropriate mesh face (we could\n\t\t* not do this before -- since the structure of the mesh is always\n\t\t* changing, this face may not have even existed until now).\n\t\t*/\n\t\tvar e = reg.eUp;\n\t\tvar f = e.Lface;\n\n\t\tf.inside = reg.inside;\n\t\tf.anEdge = e;   /* optimization for tessMeshTessellateMonoRegion() */\n\t\tSweep.deleteRegion( tess, reg );\n\t}\n\n\n\t//static TESShalfEdge *FinishLeftRegions( TESStesselator *tess, ActiveRegion *regFirst, ActiveRegion *regLast )\n\tSweep.finishLeftRegions = function( tess, regFirst, regLast ) {\n\t\t/*\n\t\t* We are given a vertex with one or more left-going edges.  All affected\n\t\t* edges should be in the edge dictionary.  Starting at regFirst->eUp,\n\t\t* we walk down deleting all regions where both edges have the same\n\t\t* origin vOrg.  At the same time we copy the \"inside\" flag from the\n\t\t* active region to the face, since at this point each face will belong\n\t\t* to at most one region (this was not necessarily true until this point\n\t\t* in the sweep).  The walk stops at the region above regLast; if regLast\n\t\t* is NULL we walk as far as possible.  At the same time we relink the\n\t\t* mesh if necessary, so that the ordering of edges around vOrg is the\n\t\t* same as in the dictionary.\n\t\t*/\n\t\tvar e, ePrev;\n\t\tvar reg = null;\n\t\tvar regPrev = regFirst;\n\t\tvar ePrev = regFirst.eUp;\n\t\twhile( regPrev !== regLast ) {\n\t\t\tregPrev.fixUpperEdge = false;\t/* placement was OK */\n\t\t\treg = Sweep.regionBelow( regPrev );\n\t\t\te = reg.eUp;\n\t\t\tif( e.Org != ePrev.Org ) {\n\t\t\t\tif( ! reg.fixUpperEdge ) {\n\t\t\t\t\t/* Remove the last left-going edge.  Even though there are no further\n\t\t\t\t\t* edges in the dictionary with this origin, there may be further\n\t\t\t\t\t* such edges in the mesh (if we are adding left edges to a vertex\n\t\t\t\t\t* that has already been processed).  Thus it is important to call\n\t\t\t\t\t* FinishRegion rather than just DeleteRegion.\n\t\t\t\t\t*/\n\t\t\t\t\tSweep.finishRegion( tess, regPrev );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/* If the edge below was a temporary edge introduced by\n\t\t\t\t* ConnectRightVertex, now is the time to fix it.\n\t\t\t\t*/\n\t\t\t\te = tess.mesh.connect( ePrev.Lprev, e.Sym );\n\t//\t\t\tif (e == NULL) longjmp(tess->env,1);\n\t\t\t\tSweep.fixUpperEdge( tess, reg, e );\n\t\t\t}\n\n\t\t\t/* Relink edges so that ePrev->Onext == e */\n\t\t\tif( ePrev.Onext !== e ) {\n\t\t\t\ttess.mesh.splice( e.Oprev, e );\n\t\t\t\ttess.mesh.splice( ePrev, e );\n\t\t\t}\n\t\t\tSweep.finishRegion( tess, regPrev );\t/* may change reg->eUp */\n\t\t\tePrev = reg.eUp;\n\t\t\tregPrev = reg;\n\t\t}\n\t\treturn ePrev;\n\t}\n\n\n\t//static void AddRightEdges( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eFirst, TESShalfEdge *eLast, TESShalfEdge *eTopLeft, int cleanUp )\n\tSweep.addRightEdges = function( tess, regUp, eFirst, eLast, eTopLeft, cleanUp ) {\n\t\t/*\n\t\t* Purpose: insert right-going edges into the edge dictionary, and update\n\t\t* winding numbers and mesh connectivity appropriately.  All right-going\n\t\t* edges share a common origin vOrg.  Edges are inserted CCW starting at\n\t\t* eFirst; the last edge inserted is eLast->Oprev.  If vOrg has any\n\t\t* left-going edges already processed, then eTopLeft must be the edge\n\t\t* such that an imaginary upward vertical segment from vOrg would be\n\t\t* contained between eTopLeft->Oprev and eTopLeft; otherwise eTopLeft\n\t\t* should be NULL.\n\t\t*/\n\t\tvar reg, regPrev;\n\t\tvar e, ePrev;\n\t\tvar firstTime = true;\n\n\t\t/* Insert the new right-going edges in the dictionary */\n\t\te = eFirst;\n\t\tdo {\n\t\t\tassert( Geom.vertLeq( e.Org, e.Dst ));\n\t\t\tSweep.addRegionBelow( tess, regUp, e.Sym );\n\t\t\te = e.Onext;\n\t\t} while ( e !== eLast );\n\n\t\t/* Walk *all* right-going edges from e->Org, in the dictionary order,\n\t\t* updating the winding numbers of each region, and re-linking the mesh\n\t\t* edges to match the dictionary ordering (if necessary).\n\t\t*/\n\t\tif( eTopLeft === null ) {\n\t\t\teTopLeft = Sweep.regionBelow( regUp ).eUp.Rprev;\n\t\t}\n\t\tregPrev = regUp;\n\t\tePrev = eTopLeft;\n\t\tfor( ;; ) {\n\t\t\treg = Sweep.regionBelow( regPrev );\n\t\t\te = reg.eUp.Sym;\n\t\t\tif( e.Org !== ePrev.Org ) break;\n\n\t\t\tif( e.Onext !== ePrev ) {\n\t\t\t\t/* Unlink e from its current position, and relink below ePrev */\n\t\t\t\ttess.mesh.splice( e.Oprev, e );\n\t\t\t\ttess.mesh.splice( ePrev.Oprev, e );\n\t\t\t}\n\t\t\t/* Compute the winding number and \"inside\" flag for the new regions */\n\t\t\treg.windingNumber = regPrev.windingNumber - e.winding;\n\t\t\treg.inside = Sweep.isWindingInside( tess, reg.windingNumber );\n\n\t\t\t/* Check for two outgoing edges with same slope -- process these\n\t\t\t* before any intersection tests (see example in tessComputeInterior).\n\t\t\t*/\n\t\t\tregPrev.dirty = true;\n\t\t\tif( ! firstTime && Sweep.checkForRightSplice( tess, regPrev )) {\n\t\t\t\tSweep.addWinding( e, ePrev );\n\t\t\t\tSweep.deleteRegion( tess, regPrev );\n\t\t\t\ttess.mesh.delete( ePrev );\n\t\t\t}\n\t\t\tfirstTime = false;\n\t\t\tregPrev = reg;\n\t\t\tePrev = e;\n\t\t}\n\t\tregPrev.dirty = true;\n\t\tassert( regPrev.windingNumber - e.winding === reg.windingNumber );\n\n\t\tif( cleanUp ) {\n\t\t\t/* Check for intersections between newly adjacent edges. */\n\t\t\tSweep.walkDirtyRegions( tess, regPrev );\n\t\t}\n\t}\n\n\n\t//static void SpliceMergeVertices( TESStesselator *tess, TESShalfEdge *e1, TESShalfEdge *e2 )\n\tSweep.spliceMergeVertices = function( tess, e1, e2 ) {\n\t\t/*\n\t\t* Two vertices with idential coordinates are combined into one.\n\t\t* e1->Org is kept, while e2->Org is discarded.\n\t\t*/\n\t\ttess.mesh.splice( e1, e2 ); \n\t}\n\n\t//static void VertexWeights( TESSvertex *isect, TESSvertex *org, TESSvertex *dst, TESSreal *weights )\n\tSweep.vertexWeights = function( isect, org, dst ) {\n\t\t/*\n\t\t* Find some weights which describe how the intersection vertex is\n\t\t* a linear combination of \"org\" and \"dest\".  Each of the two edges\n\t\t* which generated \"isect\" is allocated 50% of the weight; each edge\n\t\t* splits the weight between its org and dst according to the\n\t\t* relative distance to \"isect\".\n\t\t*/\n\t\tvar t1 = Geom.vertL1dist( org, isect );\n\t\tvar t2 = Geom.vertL1dist( dst, isect );\n\t\tvar w0 = 0.5 * t2 / (t1 + t2);\n\t\tvar w1 = 0.5 * t1 / (t1 + t2);\n\t\tisect.coords[0] += w0*org.coords[0] + w1*dst.coords[0];\n\t\tisect.coords[1] += w0*org.coords[1] + w1*dst.coords[1];\n\t\tisect.coords[2] += w0*org.coords[2] + w1*dst.coords[2];\n\t}\n\n\n\t//static void GetIntersectData( TESStesselator *tess, TESSvertex *isect, TESSvertex *orgUp, TESSvertex *dstUp, TESSvertex *orgLo, TESSvertex *dstLo )\n\tSweep.getIntersectData = function( tess, isect, orgUp, dstUp, orgLo, dstLo ) {\n\t\t /*\n\t\t * We've computed a new intersection point, now we need a \"data\" pointer\n\t\t * from the user so that we can refer to this new vertex in the\n\t\t * rendering callbacks.\n\t\t */\n\t\tisect.coords[0] = isect.coords[1] = isect.coords[2] = 0;\n\t\tisect.idx = -1;\n\t\tSweep.vertexWeights( isect, orgUp, dstUp );\n\t\tSweep.vertexWeights( isect, orgLo, dstLo );\n\t}\n\n\t//static int CheckForRightSplice( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForRightSplice = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edge of \"regUp\", to make sure that the\n\t\t* eUp->Org is above eLo, or eLo->Org is below eUp (depending on which\n\t\t* origin is leftmost).\n\t\t*\n\t\t* The main purpose is to splice right-going edges with the same\n\t\t* dest vertex and nearly identical slopes (ie. we can't distinguish\n\t\t* the slopes numerically).  However the splicing can also help us\n\t\t* to recover from numerical errors.  For example, suppose at one\n\t\t* point we checked eUp and eLo, and decided that eUp->Org is barely\n\t\t* above eLo.  Then later, we split eLo into two edges (eg. from\n\t\t* a splice operation like this one).  This can change the result of\n\t\t* our test so that now eUp->Org is incident to eLo, or barely below it.\n\t\t* We must correct this condition to maintain the dictionary invariants.\n\t\t*\n\t\t* One possibility is to check these edges for intersection again\n\t\t* (ie. CheckForIntersect).  This is what we do if possible.  However\n\t\t* CheckForIntersect requires that tess->event lies between eUp and eLo,\n\t\t* so that it has something to fall back on when the intersection\n\t\t* calculation gives us an unusable answer.  So, for those cases where\n\t\t* we can't check for intersection, this routine fixes the problem\n\t\t* by just splicing the offending vertex into the other edge.\n\t\t* This is a guaranteed solution, no matter how degenerate things get.\n\t\t* Basically this is a combinatorial solution to a numerical problem.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\n\t\tif( Geom.vertLeq( eUp.Org, eLo.Org )) {\n\t\t\tif( Geom.edgeSign( eLo.Dst, eUp.Org, eLo.Org ) > 0 ) return false;\n\n\t\t\t/* eUp->Org appears to be below eLo */\n\t\t\tif( ! Geom.vertEq( eUp.Org, eLo.Org )) {\n\t\t\t\t/* Splice eUp->Org into eLo */\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\ttess.mesh.splice( eUp, eLo.Oprev );\n\t\t\t\tregUp.dirty = regLo.dirty = true;\n\n\t\t\t} else if( eUp.Org !== eLo.Org ) {\n\t\t\t\t/* merge the two vertices, discarding eUp->Org */\n\t\t\t\ttess.pq.delete( eUp.Org.pqHandle );\n\t\t\t\tSweep.spliceMergeVertices( tess, eLo.Oprev, eUp );\n\t\t\t}\n\t\t} else {\n\t\t\tif( Geom.edgeSign( eUp.Dst, eLo.Org, eUp.Org ) < 0 ) return false;\n\n\t\t\t/* eLo->Org appears to be above eUp, so splice eLo->Org into eUp */\n\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\ttess.mesh.splice( eLo.Oprev, eUp );\n\t\t}\n\t\treturn true;\n\t}\n\n\t//static int CheckForLeftSplice( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForLeftSplice = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edge of \"regUp\", to make sure that the\n\t\t* eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which\n\t\t* destination is rightmost).\n\t\t*\n\t\t* Theoretically, this should always be true.  However, splitting an edge\n\t\t* into two pieces can change the results of previous tests.  For example,\n\t\t* suppose at one point we checked eUp and eLo, and decided that eUp->Dst\n\t\t* is barely above eLo.  Then later, we split eLo into two edges (eg. from\n\t\t* a splice operation like this one).  This can change the result of\n\t\t* the test so that now eUp->Dst is incident to eLo, or barely below it.\n\t\t* We must correct this condition to maintain the dictionary invariants\n\t\t* (otherwise new edges might get inserted in the wrong place in the\n\t\t* dictionary, and bad stuff will happen).\n\t\t*\n\t\t* We fix the problem by just splicing the offending vertex into the\n\t\t* other edge.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar e;\n\n\t\tassert( ! Geom.vertEq( eUp.Dst, eLo.Dst ));\n\n\t\tif( Geom.vertLeq( eUp.Dst, eLo.Dst )) {\n\t\t\tif( Geom.edgeSign( eUp.Dst, eLo.Dst, eUp.Org ) < 0 ) return false;\n\n\t\t\t/* eLo->Dst is above eUp, so splice eLo->Dst into eUp */\n\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\te = tess.mesh.splitEdge( eUp );\n\t\t\ttess.mesh.splice( eLo.Sym, e );\n\t\t\te.Lface.inside = regUp.inside;\n\t\t} else {\n\t\t\tif( Geom.edgeSign( eLo.Dst, eUp.Dst, eLo.Org ) > 0 ) return false;\n\n\t\t\t/* eUp->Dst is below eLo, so splice eUp->Dst into eLo */\n\t\t\tregUp.dirty = regLo.dirty = true;\n\t\t\te = tess.mesh.splitEdge( eLo );\n\t\t\ttess.mesh.splice( eUp.Lnext, eLo.Sym );\n\t\t\te.Rface.inside = regUp.inside;\n\t\t}\n\t\treturn true;\n\t}\n\n\n\t//static int CheckForIntersect( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForIntersect = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edges of the given region to see if\n\t\t* they intersect.  If so, create the intersection and add it\n\t\t* to the data structures.\n\t\t*\n\t\t* Returns TRUE if adding the new intersection resulted in a recursive\n\t\t* call to AddRightEdges(); in this case all \"dirty\" regions have been\n\t\t* checked for intersections, and possibly regUp has been deleted.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar orgUp = eUp.Org;\n\t\tvar orgLo = eLo.Org;\n\t\tvar dstUp = eUp.Dst;\n\t\tvar dstLo = eLo.Dst;\n\t\tvar tMinUp, tMaxLo;\n\t\tvar isect = new TESSvertex, orgMin;\n\t\tvar e;\n\n\t\tassert( ! Geom.vertEq( dstLo, dstUp ));\n\t\tassert( Geom.edgeSign( dstUp, tess.event, orgUp ) <= 0 );\n\t\tassert( Geom.edgeSign( dstLo, tess.event, orgLo ) >= 0 );\n\t\tassert( orgUp !== tess.event && orgLo !== tess.event );\n\t\tassert( ! regUp.fixUpperEdge && ! regLo.fixUpperEdge );\n\n\t\tif( orgUp === orgLo ) return false;\t/* right endpoints are the same */\n\n\t\ttMinUp = Math.min( orgUp.t, dstUp.t );\n\t\ttMaxLo = Math.max( orgLo.t, dstLo.t );\n\t\tif( tMinUp > tMaxLo ) return false;\t/* t ranges do not overlap */\n\n\t\tif( Geom.vertLeq( orgUp, orgLo )) {\n\t\t\tif( Geom.edgeSign( dstLo, orgUp, orgLo ) > 0 ) return false;\n\t\t} else {\n\t\t\tif( Geom.edgeSign( dstUp, orgLo, orgUp ) < 0 ) return false;\n\t\t}\n\n\t\t/* At this point the edges intersect, at least marginally */\n\t\tSweep.debugEvent( tess );\n\n\t\tGeom.intersect( dstUp, orgUp, dstLo, orgLo, isect );\n\t\t/* The following properties are guaranteed: */\n\t\tassert( Math.min( orgUp.t, dstUp.t ) <= isect.t );\n\t\tassert( isect.t <= Math.max( orgLo.t, dstLo.t ));\n\t\tassert( Math.min( dstLo.s, dstUp.s ) <= isect.s );\n\t\tassert( isect.s <= Math.max( orgLo.s, orgUp.s ));\n\n\t\tif( Geom.vertLeq( isect, tess.event )) {\n\t\t\t/* The intersection point lies slightly to the left of the sweep line,\n\t\t\t* so move it until it''s slightly to the right of the sweep line.\n\t\t\t* (If we had perfect numerical precision, this would never happen\n\t\t\t* in the first place).  The easiest and safest thing to do is\n\t\t\t* replace the intersection by tess->event.\n\t\t\t*/\n\t\t\tisect.s = tess.event.s;\n\t\t\tisect.t = tess.event.t;\n\t\t}\n\t\t/* Similarly, if the computed intersection lies to the right of the\n\t\t* rightmost origin (which should rarely happen), it can cause\n\t\t* unbelievable inefficiency on sufficiently degenerate inputs.\n\t\t* (If you have the test program, try running test54.d with the\n\t\t* \"X zoom\" option turned on).\n\t\t*/\n\t\torgMin = Geom.vertLeq( orgUp, orgLo ) ? orgUp : orgLo;\n\t\tif( Geom.vertLeq( orgMin, isect )) {\n\t\t\tisect.s = orgMin.s;\n\t\t\tisect.t = orgMin.t;\n\t\t}\n\n\t\tif( Geom.vertEq( isect, orgUp ) || Geom.vertEq( isect, orgLo )) {\n\t\t\t/* Easy case -- intersection at one of the right endpoints */\n\t\t\tSweep.checkForRightSplice( tess, regUp );\n\t\t\treturn false;\n\t\t}\n\n\t\tif(    (! Geom.vertEq( dstUp, tess.event )\n\t\t\t&& Geom.edgeSign( dstUp, tess.event, isect ) >= 0)\n\t\t\t|| (! Geom.vertEq( dstLo, tess.event )\n\t\t\t&& Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ))\n\t\t{\n\t\t\t/* Very unusual -- the new upper or lower edge would pass on the\n\t\t\t* wrong side of the sweep event, or through it.  This can happen\n\t\t\t* due to very small numerical errors in the intersection calculation.\n\t\t\t*/\n\t\t\tif( dstLo === tess.event ) {\n\t\t\t\t/* Splice dstLo into eUp, and process the new region(s) */\n\t\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\t\ttess.mesh.splice( eLo.Sym, eUp );\n\t\t\t\tregUp = Sweep.topLeftRegion( tess, regUp );\n\t//\t\t\tif (regUp == NULL) longjmp(tess->env,1);\n\t\t\t\teUp = Sweep.regionBelow(regUp).eUp;\n\t\t\t\tSweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );\n\t\t\t\tSweep.addRightEdges( tess, regUp, eUp.Oprev, eUp, eUp, true );\n\t\t\t\treturn TRUE;\n\t\t\t}\n\t\t\tif( dstUp === tess.event ) {\n\t\t\t\t/* Splice dstUp into eLo, and process the new region(s) */\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\ttess.mesh.splice( eUp.Lnext, eLo.Oprev ); \n\t\t\t\tregLo = regUp;\n\t\t\t\tregUp = Sweep.topRightRegion( regUp );\n\t\t\t\te = Sweep.regionBelow(regUp).eUp.Rprev;\n\t\t\t\tregLo.eUp = eLo.Oprev;\n\t\t\t\teLo = Sweep.finishLeftRegions( tess, regLo, null );\n\t\t\t\tSweep.addRightEdges( tess, regUp, eLo.Onext, eUp.Rprev, e, true );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t/* Special case: called from ConnectRightVertex.  If either\n\t\t\t* edge passes on the wrong side of tess->event, split it\n\t\t\t* (and wait for ConnectRightVertex to splice it appropriately).\n\t\t\t*/\n\t\t\tif( Geom.edgeSign( dstUp, tess.event, isect ) >= 0 ) {\n\t\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\t\teUp.Org.s = tess.event.s;\n\t\t\t\teUp.Org.t = tess.event.t;\n\t\t\t}\n\t\t\tif( Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ) {\n\t\t\t\tregUp.dirty = regLo.dirty = true;\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\teLo.Org.s = tess.event.s;\n\t\t\t\teLo.Org.t = tess.event.t;\n\t\t\t}\n\t\t\t/* leave the rest for ConnectRightVertex */\n\t\t\treturn false;\n\t\t}\n\n\t\t/* General case -- split both edges, splice into new vertex.\n\t\t* When we do the splice operation, the order of the arguments is\n\t\t* arbitrary as far as correctness goes.  However, when the operation\n\t\t* creates a new face, the work done is proportional to the size of\n\t\t* the new face.  We expect the faces in the processed part of\n\t\t* the mesh (ie. eUp->Lface) to be smaller than the faces in the\n\t\t* unprocessed original contours (which will be eLo->Oprev->Lface).\n\t\t*/\n\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\ttess.mesh.splice( eLo.Oprev, eUp );\n\t\teUp.Org.s = isect.s;\n\t\teUp.Org.t = isect.t;\n\t\teUp.Org.pqHandle = tess.pq.insert( eUp.Org );\n\t\tSweep.getIntersectData( tess, eUp.Org, orgUp, dstUp, orgLo, dstLo );\n\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;\n\t\treturn false;\n\t}\n\n\t//static void WalkDirtyRegions( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.walkDirtyRegions = function( tess, regUp ) {\n\t\t/*\n\t\t* When the upper or lower edge of any region changes, the region is\n\t\t* marked \"dirty\".  This routine walks through all the dirty regions\n\t\t* and makes sure that the dictionary invariants are satisfied\n\t\t* (see the comments at the beginning of this file).  Of course\n\t\t* new dirty regions can be created as we make changes to restore\n\t\t* the invariants.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp, eLo;\n\n\t\tfor( ;; ) {\n\t\t\t/* Find the lowest dirty region (we walk from the bottom up). */\n\t\t\twhile( regLo.dirty ) {\n\t\t\t\tregUp = regLo;\n\t\t\t\tregLo = Sweep.regionBelow(regLo);\n\t\t\t}\n\t\t\tif( ! regUp.dirty ) {\n\t\t\t\tregLo = regUp;\n\t\t\t\tregUp = Sweep.regionAbove( regUp );\n\t\t\t\tif( regUp == null || ! regUp.dirty ) {\n\t\t\t\t\t/* We've walked all the dirty regions */\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tregUp.dirty = false;\n\t\t\teUp = regUp.eUp;\n\t\t\teLo = regLo.eUp;\n\n\t\t\tif( eUp.Dst !== eLo.Dst ) {\n\t\t\t\t/* Check that the edge ordering is obeyed at the Dst vertices. */\n\t\t\t\tif( Sweep.checkForLeftSplice( tess, regUp )) {\n\n\t\t\t\t\t/* If the upper or lower edge was marked fixUpperEdge, then\n\t\t\t\t\t* we no longer need it (since these edges are needed only for\n\t\t\t\t\t* vertices which otherwise have no right-going edges).\n\t\t\t\t\t*/\n\t\t\t\t\tif( regLo.fixUpperEdge ) {\n\t\t\t\t\t\tSweep.deleteRegion( tess, regLo );\n\t\t\t\t\t\ttess.mesh.delete( eLo );\n\t\t\t\t\t\tregLo = Sweep.regionBelow( regUp );\n\t\t\t\t\t\teLo = regLo.eUp;\n\t\t\t\t\t} else if( regUp.fixUpperEdge ) {\n\t\t\t\t\t\tSweep.deleteRegion( tess, regUp );\n\t\t\t\t\t\ttess.mesh.delete( eUp );\n\t\t\t\t\t\tregUp = Sweep.regionAbove( regLo );\n\t\t\t\t\t\teUp = regUp.eUp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( eUp.Org !== eLo.Org ) {\n\t\t\t\tif(    eUp.Dst !== eLo.Dst\n\t\t\t\t\t&& ! regUp.fixUpperEdge && ! regLo.fixUpperEdge\n\t\t\t\t\t&& (eUp.Dst === tess.event || eLo.Dst === tess.event) )\n\t\t\t\t{\n\t\t\t\t\t/* When all else fails in CheckForIntersect(), it uses tess->event\n\t\t\t\t\t* as the intersection location.  To make this possible, it requires\n\t\t\t\t\t* that tess->event lie between the upper and lower edges, and also\n\t\t\t\t\t* that neither of these is marked fixUpperEdge (since in the worst\n\t\t\t\t\t* case it might splice one of these edges into tess->event, and\n\t\t\t\t\t* violate the invariant that fixable edges are the only right-going\n\t\t\t\t\t* edge from their associated vertex).\n\t\t\t\t\t*/\n\t\t\t\t\tif( Sweep.checkForIntersect( tess, regUp )) {\n\t\t\t\t\t\t/* WalkDirtyRegions() was called recursively; we're done */\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* Even though we can't use CheckForIntersect(), the Org vertices\n\t\t\t\t\t* may violate the dictionary edge ordering.  Check and correct this.\n\t\t\t\t\t*/\n\t\t\t\t\tSweep.checkForRightSplice( tess, regUp );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( eUp.Org === eLo.Org && eUp.Dst === eLo.Dst ) {\n\t\t\t\t/* A degenerate loop consisting of only two edges -- delete it. */\n\t\t\t\tSweep.addWinding( eLo, eUp );\n\t\t\t\tSweep.deleteRegion( tess, regUp );\n\t\t\t\ttess.mesh.delete( eUp );\n\t\t\t\tregUp = Sweep.regionAbove( regLo );\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//static void ConnectRightVertex( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eBottomLeft )\n\tSweep.connectRightVertex = function( tess, regUp, eBottomLeft ) {\n\t\t/*\n\t\t* Purpose: connect a \"right\" vertex vEvent (one where all edges go left)\n\t\t* to the unprocessed portion of the mesh.  Since there are no right-going\n\t\t* edges, two regions (one above vEvent and one below) are being merged\n\t\t* into one.  \"regUp\" is the upper of these two regions.\n\t\t*\n\t\t* There are two reasons for doing this (adding a right-going edge):\n\t\t*  - if the two regions being merged are \"inside\", we must add an edge\n\t\t*    to keep them separated (the combined region would not be monotone).\n\t\t*  - in any case, we must leave some record of vEvent in the dictionary,\n\t\t*    so that we can merge vEvent with features that we have not seen yet.\n\t\t*    For example, maybe there is a vertical edge which passes just to\n\t\t*    the right of vEvent; we would like to splice vEvent into this edge.\n\t\t*\n\t\t* However, we don't want to connect vEvent to just any vertex.  We don''t\n\t\t* want the new edge to cross any other edges; otherwise we will create\n\t\t* intersection vertices even when the input data had no self-intersections.\n\t\t* (This is a bad thing; if the user's input data has no intersections,\n\t\t* we don't want to generate any false intersections ourselves.)\n\t\t*\n\t\t* Our eventual goal is to connect vEvent to the leftmost unprocessed\n\t\t* vertex of the combined region (the union of regUp and regLo).\n\t\t* But because of unseen vertices with all right-going edges, and also\n\t\t* new vertices which may be created by edge intersections, we don''t\n\t\t* know where that leftmost unprocessed vertex is.  In the meantime, we\n\t\t* connect vEvent to the closest vertex of either chain, and mark the region\n\t\t* as \"fixUpperEdge\".  This flag says to delete and reconnect this edge\n\t\t* to the next processed vertex on the boundary of the combined region.\n\t\t* Quite possibly the vertex we connected to will turn out to be the\n\t\t* closest one, in which case we won''t need to make any changes.\n\t\t*/\n\t\tvar eNew;\n\t\tvar eTopLeft = eBottomLeft.Onext;\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar degenerate = false;\n\n\t\tif( eUp.Dst !== eLo.Dst ) {\n\t\t\tSweep.checkForIntersect( tess, regUp );\n\t\t}\n\n\t\t/* Possible new degeneracies: upper or lower edge of regUp may pass\n\t\t* through vEvent, or may coincide with new intersection vertex\n\t\t*/\n\t\tif( Geom.vertEq( eUp.Org, tess.event )) {\n\t\t\ttess.mesh.splice( eTopLeft.Oprev, eUp );\n\t\t\tregUp = Sweep.topLeftRegion( tess, regUp );\n\t\t\teTopLeft = Sweep.regionBelow( regUp ).eUp;\n\t\t\tSweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );\n\t\t\tdegenerate = true;\n\t\t}\n\t\tif( Geom.vertEq( eLo.Org, tess.event )) {\n\t\t\ttess.mesh.splice( eBottomLeft, eLo.Oprev );\n\t\t\teBottomLeft = Sweep.finishLeftRegions( tess, regLo, null );\n\t\t\tdegenerate = true;\n\t\t}\n\t\tif( degenerate ) {\n\t\t\tSweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );\n\t\t\treturn;\n\t\t}\n\n\t\t/* Non-degenerate situation -- need to add a temporary, fixable edge.\n\t\t* Connect to the closer of eLo->Org, eUp->Org.\n\t\t*/\n\t\tif( Geom.vertLeq( eLo.Org, eUp.Org )) {\n\t\t\teNew = eLo.Oprev;\n\t\t} else {\n\t\t\teNew = eUp;\n\t\t}\n\t\teNew = tess.mesh.connect( eBottomLeft.Lprev, eNew );\n\n\t\t/* Prevent cleanup, otherwise eNew might disappear before we've even\n\t\t* had a chance to mark it as a temporary edge.\n\t\t*/\n\t\tSweep.addRightEdges( tess, regUp, eNew, eNew.Onext, eNew.Onext, false );\n\t\teNew.Sym.activeRegion.fixUpperEdge = true;\n\t\tSweep.walkDirtyRegions( tess, regUp );\n\t}\n\n\t/* Because vertices at exactly the same location are merged together\n\t* before we process the sweep event, some degenerate cases can't occur.\n\t* However if someone eventually makes the modifications required to\n\t* merge features which are close together, the cases below marked\n\t* TOLERANCE_NONZERO will be useful.  They were debugged before the\n\t* code to merge identical vertices in the main loop was added.\n\t*/\n\t//#define TOLERANCE_NONZERO\tFALSE\n\n\t//static void ConnectLeftDegenerate( TESStesselator *tess, ActiveRegion *regUp, TESSvertex *vEvent )\n\tSweep.connectLeftDegenerate = function( tess, regUp, vEvent ) {\n\t\t/*\n\t\t* The event vertex lies exacty on an already-processed edge or vertex.\n\t\t* Adding the new vertex involves splicing it into the already-processed\n\t\t* part of the mesh.\n\t\t*/\n\t\tvar e, eTopLeft, eTopRight, eLast;\n\t\tvar reg;\n\n\t\te = regUp.eUp;\n\t\tif( Geom.vertEq( e.Org, vEvent )) {\n\t\t\t/* e->Org is an unprocessed vertex - just combine them, and wait\n\t\t\t* for e->Org to be pulled from the queue\n\t\t\t*/\n\t\t\tassert( false /*TOLERANCE_NONZERO*/ );\n\t\t\tSweep.spliceMergeVertices( tess, e, vEvent.anEdge );\n\t\t\treturn;\n\t\t}\n\n\t\tif( ! Geom.vertEq( e.Dst, vEvent )) {\n\t\t\t/* General case -- splice vEvent into edge e which passes through it */\n\t\t\ttess.mesh.splitEdge( e.Sym );\n\t\t\tif( regUp.fixUpperEdge ) {\n\t\t\t\t/* This edge was fixable -- delete unused portion of original edge */\n\t\t\t\ttess.mesh.delete( e.Onext );\n\t\t\t\tregUp.fixUpperEdge = false;\n\t\t\t}\n\t\t\ttess.mesh.splice( vEvent.anEdge, e );\n\t\t\tSweep.sweepEvent( tess, vEvent );\t/* recurse */\n\t\t\treturn;\n\t\t}\n\n\t\t/* vEvent coincides with e->Dst, which has already been processed.\n\t\t* Splice in the additional right-going edges.\n\t\t*/\n\t\tassert( false /*TOLERANCE_NONZERO*/ );\n\t\tregUp = Sweep.topRightRegion( regUp );\n\t\treg = Sweep.regionBelow( regUp );\n\t\teTopRight = reg.eUp.Sym;\n\t\teTopLeft = eLast = eTopRight.Onext;\n\t\tif( reg.fixUpperEdge ) {\n\t\t\t/* Here e->Dst has only a single fixable edge going right.\n\t\t\t* We can delete it since now we have some real right-going edges.\n\t\t\t*/\n\t\t\tassert( eTopLeft !== eTopRight );   /* there are some left edges too */\n\t\t\tSweep.deleteRegion( tess, reg );\n\t\t\ttess.mesh.delete( eTopRight );\n\t\t\teTopRight = eTopLeft.Oprev;\n\t\t}\n\t\ttess.mesh.splice( vEvent.anEdge, eTopRight );\n\t\tif( ! Geom.edgeGoesLeft( eTopLeft )) {\n\t\t\t/* e->Dst had no left-going edges -- indicate this to AddRightEdges() */\n\t\t\teTopLeft = null;\n\t\t}\n\t\tSweep.addRightEdges( tess, regUp, eTopRight.Onext, eLast, eTopLeft, true );\n\t}\n\n\n\t//static void ConnectLeftVertex( TESStesselator *tess, TESSvertex *vEvent )\n\tSweep.connectLeftVertex = function( tess, vEvent ) {\n\t\t/*\n\t\t* Purpose: connect a \"left\" vertex (one where both edges go right)\n\t\t* to the processed portion of the mesh.  Let R be the active region\n\t\t* containing vEvent, and let U and L be the upper and lower edge\n\t\t* chains of R.  There are two possibilities:\n\t\t*\n\t\t* - the normal case: split R into two regions, by connecting vEvent to\n\t\t*   the rightmost vertex of U or L lying to the left of the sweep line\n\t\t*\n\t\t* - the degenerate case: if vEvent is close enough to U or L, we\n\t\t*   merge vEvent into that edge chain.  The subcases are:\n\t\t*\t- merging with the rightmost vertex of U or L\n\t\t*\t- merging with the active edge of U or L\n\t\t*\t- merging with an already-processed portion of U or L\n\t\t*/\n\t\tvar regUp, regLo, reg;\n\t\tvar eUp, eLo, eNew;\n\t\tvar tmp = new ActiveRegion();\n\n\t\t/* assert( vEvent->anEdge->Onext->Onext == vEvent->anEdge ); */\n\n\t\t/* Get a pointer to the active region containing vEvent */\n\t\ttmp.eUp = vEvent.anEdge.Sym;\n\t\t/* __GL_DICTLISTKEY */ /* tessDictListSearch */\n\t\tregUp = tess.dict.search( tmp ).key;\n\t\tregLo = Sweep.regionBelow( regUp );\n\t\tif( !regLo ) {\n\t\t\t// This may happen if the input polygon is coplanar.\n\t\t\treturn;\n\t\t}\n\t\teUp = regUp.eUp;\n\t\teLo = regLo.eUp;\n\n\t\t/* Try merging with U or L first */\n\t\tif( Geom.edgeSign( eUp.Dst, vEvent, eUp.Org ) === 0.0 ) {\n\t\t\tSweep.connectLeftDegenerate( tess, regUp, vEvent );\n\t\t\treturn;\n\t\t}\n\n\t\t/* Connect vEvent to rightmost processed vertex of either chain.\n\t\t* e->Dst is the vertex that we will connect to vEvent.\n\t\t*/\n\t\treg = Geom.vertLeq( eLo.Dst, eUp.Dst ) ? regUp : regLo;\n\n\t\tif( regUp.inside || reg.fixUpperEdge) {\n\t\t\tif( reg === regUp ) {\n\t\t\t\teNew = tess.mesh.connect( vEvent.anEdge.Sym, eUp.Lnext );\n\t\t\t} else {\n\t\t\t\tvar tempHalfEdge = tess.mesh.connect( eLo.Dnext, vEvent.anEdge);\n\t\t\t\teNew = tempHalfEdge.Sym;\n\t\t\t}\n\t\t\tif( reg.fixUpperEdge ) {\n\t\t\t\tSweep.fixUpperEdge( tess, reg, eNew );\n\t\t\t} else {\n\t\t\t\tSweep.computeWinding( tess, Sweep.addRegionBelow( tess, regUp, eNew ));\n\t\t\t}\n\t\t\tSweep.sweepEvent( tess, vEvent );\n\t\t} else {\n\t\t\t/* The new vertex is in a region which does not belong to the polygon.\n\t\t\t* We don''t need to connect this vertex to the rest of the mesh.\n\t\t\t*/\n\t\t\tSweep.addRightEdges( tess, regUp, vEvent.anEdge, vEvent.anEdge, null, true );\n\t\t}\n\t};\n\n\n\t//static void SweepEvent( TESStesselator *tess, TESSvertex *vEvent )\n\tSweep.sweepEvent = function( tess, vEvent ) {\n\t\t/*\n\t\t* Does everything necessary when the sweep line crosses a vertex.\n\t\t* Updates the mesh and the edge dictionary.\n\t\t*/\n\n\t\ttess.event = vEvent;\t\t/* for access in EdgeLeq() */\n\t\tSweep.debugEvent( tess );\n\n\t\t/* Check if this vertex is the right endpoint of an edge that is\n\t\t* already in the dictionary.  In this case we don't need to waste\n\t\t* time searching for the location to insert new edges.\n\t\t*/\n\t\tvar e = vEvent.anEdge;\n\t\twhile( e.activeRegion === null ) {\n\t\t\te = e.Onext;\n\t\t\tif( e == vEvent.anEdge ) {\n\t\t\t\t/* All edges go right -- not incident to any processed edges */\n\t\t\t\tSweep.connectLeftVertex( tess, vEvent );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/* Processing consists of two phases: first we \"finish\" all the\n\t\t* active regions where both the upper and lower edges terminate\n\t\t* at vEvent (ie. vEvent is closing off these regions).\n\t\t* We mark these faces \"inside\" or \"outside\" the polygon according\n\t\t* to their winding number, and delete the edges from the dictionary.\n\t\t* This takes care of all the left-going edges from vEvent.\n\t\t*/\n\t\tvar regUp = Sweep.topLeftRegion( tess, e.activeRegion );\n\t\tassert( regUp !== null );\n\t//\tif (regUp == NULL) longjmp(tess->env,1);\n\t\tvar reg = Sweep.regionBelow( regUp );\n\t\tvar eTopLeft = reg.eUp;\n\t\tvar eBottomLeft = Sweep.finishLeftRegions( tess, reg, null );\n\n\t\t/* Next we process all the right-going edges from vEvent.  This\n\t\t* involves adding the edges to the dictionary, and creating the\n\t\t* associated \"active regions\" which record information about the\n\t\t* regions between adjacent dictionary edges.\n\t\t*/\n\t\tif( eBottomLeft.Onext === eTopLeft ) {\n\t\t\t/* No right-going edges -- add a temporary \"fixable\" edge */\n\t\t\tSweep.connectRightVertex( tess, regUp, eBottomLeft );\n\t\t} else {\n\t\t\tSweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );\n\t\t}\n\t};\n\n\n\t/* Make the sentinel coordinates big enough that they will never be\n\t* merged with real input features.\n\t*/\n\n\t//static void AddSentinel( TESStesselator *tess, TESSreal smin, TESSreal smax, TESSreal t )\n\tSweep.addSentinel = function( tess, smin, smax, t ) {\n\t\t/*\n\t\t* We add two sentinel edges above and below all other edges,\n\t\t* to avoid special cases at the top and bottom.\n\t\t*/\n\t\tvar reg = new ActiveRegion();\n\t\tvar e = tess.mesh.makeEdge();\n\t//\tif (e == NULL) longjmp(tess->env,1);\n\n\t\te.Org.s = smax;\n\t\te.Org.t = t;\n\t\te.Dst.s = smin;\n\t\te.Dst.t = t;\n\t\ttess.event = e.Dst;\t\t/* initialize it */\n\n\t\treg.eUp = e;\n\t\treg.windingNumber = 0;\n\t\treg.inside = false;\n\t\treg.fixUpperEdge = false;\n\t\treg.sentinel = true;\n\t\treg.dirty = false;\n\t\treg.nodeUp = tess.dict.insert( reg );\n\t//\tif (reg->nodeUp == NULL) longjmp(tess->env,1);\n\t}\n\n\n\t//static void InitEdgeDict( TESStesselator *tess )\n\tSweep.initEdgeDict = function( tess ) {\n\t\t/*\n\t\t* We maintain an ordering of edge intersections with the sweep line.\n\t\t* This order is maintained in a dynamic dictionary.\n\t\t*/\n\t\ttess.dict = new Dict( tess, Sweep.edgeLeq );\n\t//\tif (tess->dict == NULL) longjmp(tess->env,1);\n\n\t\tvar w = (tess.bmax[0] - tess.bmin[0]);\n\t\tvar h = (tess.bmax[1] - tess.bmin[1]);\n\n\t\tvar smin = tess.bmin[0] - w;\n\t\tvar smax = tess.bmax[0] + w;\n\t\tvar tmin = tess.bmin[1] - h;\n\t\tvar tmax = tess.bmax[1] + h;\n\n\t\tSweep.addSentinel( tess, smin, smax, tmin );\n\t\tSweep.addSentinel( tess, smin, smax, tmax );\n\t}\n\n\n\tSweep.doneEdgeDict = function( tess )\n\t{\n\t\tvar reg;\n\t\tvar fixedEdges = 0;\n\n\t\twhile( (reg = tess.dict.min().key) !== null ) {\n\t\t\t/*\n\t\t\t* At the end of all processing, the dictionary should contain\n\t\t\t* only the two sentinel edges, plus at most one \"fixable\" edge\n\t\t\t* created by ConnectRightVertex().\n\t\t\t*/\n\t\t\tif( ! reg.sentinel ) {\n\t\t\t\tassert( reg.fixUpperEdge );\n\t\t\t\tassert( ++fixedEdges == 1 );\n\t\t\t}\n\t\t\tassert( reg.windingNumber == 0 );\n\t\t\tSweep.deleteRegion( tess, reg );\n\t\t\t/*    tessMeshDelete( reg->eUp );*/\n\t\t}\n\t//\tdictDeleteDict( &tess->alloc, tess->dict );\n\t}\n\n\n\tSweep.removeDegenerateEdges = function( tess ) {\n\t\t/*\n\t\t* Remove zero-length edges, and contours with fewer than 3 vertices.\n\t\t*/\n\t\tvar e, eNext, eLnext;\n\t\tvar eHead = tess.mesh.eHead;\n\n\t\t/*LINTED*/\n\t\tfor( e = eHead.next; e !== eHead; e = eNext ) {\n\t\t\teNext = e.next;\n\t\t\teLnext = e.Lnext;\n\n\t\t\tif( Geom.vertEq( e.Org, e.Dst ) && e.Lnext.Lnext !== e ) {\n\t\t\t\t/* Zero-length edge, contour has at least 3 edges */\n\t\t\t\tSweep.spliceMergeVertices( tess, eLnext, e );\t/* deletes e->Org */\n\t\t\t\ttess.mesh.delete( e ); /* e is a self-loop */\n\t\t\t\te = eLnext;\n\t\t\t\teLnext = e.Lnext;\n\t\t\t}\n\t\t\tif( eLnext.Lnext === e ) {\n\t\t\t\t/* Degenerate contour (one or two edges) */\n\t\t\t\tif( eLnext !== e ) {\n\t\t\t\t\tif( eLnext === eNext || eLnext === eNext.Sym ) { eNext = eNext.next; }\n\t\t\t\t\ttess.mesh.delete( eLnext );\n\t\t\t\t}\n\t\t\t\tif( e === eNext || e === eNext.Sym ) { eNext = eNext.next; }\n\t\t\t\ttess.mesh.delete( e );\n\t\t\t}\n\t\t}\n\t}\n\n\tSweep.initPriorityQ = function( tess ) {\n\t\t/*\n\t\t* Insert all vertices into the priority queue which determines the\n\t\t* order in which vertices cross the sweep line.\n\t\t*/\n\t\tvar pq;\n\t\tvar v, vHead;\n\t\tvar vertexCount = 0;\n\t\t\n\t\tvHead = tess.mesh.vHead;\n\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\tvertexCount++;\n\t\t}\n\t\t/* Make sure there is enough space for sentinels. */\n\t\tvertexCount += 8; //MAX( 8, tess->alloc.extraVertices );\n\t\t\n\t\tpq = tess.pq = new PriorityQ( vertexCount, Geom.vertLeq );\n\t//\tif (pq == NULL) return 0;\n\n\t\tvHead = tess.mesh.vHead;\n\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\tv.pqHandle = pq.insert( v );\n\t//\t\tif (v.pqHandle == INV_HANDLE)\n\t//\t\t\tbreak;\n\t\t}\n\n\t\tif (v !== vHead) {\n\t\t\treturn false;\n\t\t}\n\n\t\tpq.init();\n\n\t\treturn true;\n\t}\n\n\n\tSweep.donePriorityQ = function( tess ) {\n\t\ttess.pq = null;\n\t}\n\n\n\tSweep.removeDegenerateFaces = function( tess, mesh ) {\n\t\t/*\n\t\t* Delete any degenerate faces with only two edges.  WalkDirtyRegions()\n\t\t* will catch almost all of these, but it won't catch degenerate faces\n\t\t* produced by splice operations on already-processed edges.\n\t\t* The two places this can happen are in FinishLeftRegions(), when\n\t\t* we splice in a \"temporary\" edge produced by ConnectRightVertex(),\n\t\t* and in CheckForLeftSplice(), where we splice already-processed\n\t\t* edges to ensure that our dictionary invariants are not violated\n\t\t* by numerical errors.\n\t\t*\n\t\t* In both these cases it is *very* dangerous to delete the offending\n\t\t* edge at the time, since one of the routines further up the stack\n\t\t* will sometimes be keeping a pointer to that edge.\n\t\t*/\n\t\tvar f, fNext;\n\t\tvar e;\n\n\t\t/*LINTED*/\n\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = fNext ) {\n\t\t\tfNext = f.next;\n\t\t\te = f.anEdge;\n\t\t\tassert( e.Lnext !== e );\n\n\t\t\tif( e.Lnext.Lnext === e ) {\n\t\t\t\t/* A face with only two edges */\n\t\t\t\tSweep.addWinding( e.Onext, e );\n\t\t\t\ttess.mesh.delete( e );\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tSweep.computeInterior = function( tess ) {\n\t\t/*\n\t\t* tessComputeInterior( tess ) computes the planar arrangement specified\n\t\t* by the given contours, and further subdivides this arrangement\n\t\t* into regions.  Each region is marked \"inside\" if it belongs\n\t\t* to the polygon, according to the rule given by tess->windingRule.\n\t\t* Each interior region is guaranteed be monotone.\n\t\t*/\n\t\tvar v, vNext;\n\n\t\t/* Each vertex defines an event for our sweep line.  Start by inserting\n\t\t* all the vertices in a priority queue.  Events are processed in\n\t\t* lexicographic order, ie.\n\t\t*\n\t\t*\te1 < e2  iff  e1.x < e2.x || (e1.x == e2.x && e1.y < e2.y)\n\t\t*/\n\t\tSweep.removeDegenerateEdges( tess );\n\t\tif ( !Sweep.initPriorityQ( tess ) ) return false; /* if error */\n\t\tSweep.initEdgeDict( tess );\n\n\t\twhile( (v = tess.pq.extractMin()) !== null ) {\n\t\t\tfor( ;; ) {\n\t\t\t\tvNext = tess.pq.min();\n\t\t\t\tif( vNext === null || ! Geom.vertEq( vNext, v )) break;\n\n\t\t\t\t/* Merge together all vertices at exactly the same location.\n\t\t\t\t* This is more efficient than processing them one at a time,\n\t\t\t\t* simplifies the code (see ConnectLeftDegenerate), and is also\n\t\t\t\t* important for correct handling of certain degenerate cases.\n\t\t\t\t* For example, suppose there are two identical edges A and B\n\t\t\t\t* that belong to different contours (so without this code they would\n\t\t\t\t* be processed by separate sweep events).  Suppose another edge C\n\t\t\t\t* crosses A and B from above.  When A is processed, we split it\n\t\t\t\t* at its intersection point with C.  However this also splits C,\n\t\t\t\t* so when we insert B we may compute a slightly different\n\t\t\t\t* intersection point.  This might leave two edges with a small\n\t\t\t\t* gap between them.  This kind of error is especially obvious\n\t\t\t\t* when using boundary extraction (TESS_BOUNDARY_ONLY).\n\t\t\t\t*/\n\t\t\t\tvNext = tess.pq.extractMin();\n\t\t\t\tSweep.spliceMergeVertices( tess, v.anEdge, vNext.anEdge );\n\t\t\t}\n\t\t\tSweep.sweepEvent( tess, v );\n\t\t}\n\n\t\t/* Set tess->event for debugging purposes */\n\t\ttess.event = tess.dict.min().key.eUp.Org;\n\t\tSweep.debugEvent( tess );\n\t\tSweep.doneEdgeDict( tess );\n\t\tSweep.donePriorityQ( tess );\n\n\t\tif ( !Sweep.removeDegenerateFaces( tess, tess.mesh ) ) return false;\n\t\ttess.mesh.check();\n\n\t\treturn true;\n\t}\n\n\n\tfunction Tesselator() {\n\n\t\t/*** state needed for collecting the input data ***/\n\t\tthis.mesh = null;\t\t/* stores the input contours, and eventually\n\t\t\t\t\t\t\tthe tessellation itself */\n\n\t\t/*** state needed for projecting onto the sweep plane ***/\n\n\t\tthis.normal = [0.0, 0.0, 0.0];\t/* user-specified normal (if provided) */\n\t\tthis.sUnit = [0.0, 0.0, 0.0];\t/* unit vector in s-direction (debugging) */\n\t\tthis.tUnit = [0.0, 0.0, 0.0];\t/* unit vector in t-direction (debugging) */\n\n\t\tthis.bmin = [0.0, 0.0];\n\t\tthis.bmax = [0.0, 0.0];\n\n\t\t/*** state needed for the line sweep ***/\n\t\tthis.windingRule = Tess2.WINDING_ODD;\t/* rule for determining polygon interior */\n\n\t\tthis.dict = null;\t\t/* edge dictionary for sweep line */\n\t\tthis.pq = null;\t\t/* priority queue of vertex events */\n\t\tthis.event = null;\t\t/* current sweep event being processed */\n\n\t\tthis.vertexIndexCounter = 0;\n\t\t\n\t\tthis.vertices = [];\n\t\tthis.vertexIndices = [];\n\t\tthis.vertexCount = 0;\n\t\tthis.elements = [];\n\t\tthis.elementCount = 0;\n\t};\n\n\tTesselator.prototype = {\n\n\t\tdot_: function(u, v) {\n\t\t\treturn (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]);\n\t\t},\n\n\t\tnormalize_: function( v ) {\n\t\t\tvar len = v[0]*v[0] + v[1]*v[1] + v[2]*v[2];\n\t\t\tassert( len > 0.0 );\n\t\t\tlen = Math.sqrt( len );\n\t\t\tv[0] /= len;\n\t\t\tv[1] /= len;\n\t\t\tv[2] /= len;\n\t\t},\n\n\t\tlongAxis_: function( v ) {\n\t\t\tvar i = 0;\n\t\t\tif( Math.abs(v[1]) > Math.abs(v[0]) ) { i = 1; }\n\t\t\tif( Math.abs(v[2]) > Math.abs(v[i]) ) { i = 2; }\n\t\t\treturn i;\n\t\t},\n\n\t\tcomputeNormal_: function( norm )\n\t\t{\n\t\t\tvar v, v1, v2;\n\t\t\tvar c, tLen2, maxLen2;\n\t\t\tvar maxVal = [0,0,0], minVal = [0,0,0], d1 = [0,0,0], d2 = [0,0,0], tNorm = [0,0,0];\n\t\t\tvar maxVert = [null,null,null], minVert = [null,null,null];\n\t\t\tvar vHead = this.mesh.vHead;\n\t\t\tvar i;\n\n\t\t\tv = vHead.next;\n\t\t\tfor( i = 0; i < 3; ++i ) {\n\t\t\t\tc = v.coords[i];\n\t\t\t\tminVal[i] = c;\n\t\t\t\tminVert[i] = v;\n\t\t\t\tmaxVal[i] = c;\n\t\t\t\tmaxVert[i] = v;\n\t\t\t}\n\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tfor( i = 0; i < 3; ++i ) {\n\t\t\t\t\tc = v.coords[i];\n\t\t\t\t\tif( c < minVal[i] ) { minVal[i] = c; minVert[i] = v; }\n\t\t\t\t\tif( c > maxVal[i] ) { maxVal[i] = c; maxVert[i] = v; }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Find two vertices separated by at least 1/sqrt(3) of the maximum\n\t\t\t* distance between any two vertices\n\t\t\t*/\n\t\t\ti = 0;\n\t\t\tif( maxVal[1] - minVal[1] > maxVal[0] - minVal[0] ) { i = 1; }\n\t\t\tif( maxVal[2] - minVal[2] > maxVal[i] - minVal[i] ) { i = 2; }\n\t\t\tif( minVal[i] >= maxVal[i] ) {\n\t\t\t\t/* All vertices are the same -- normal doesn't matter */\n\t\t\t\tnorm[0] = 0; norm[1] = 0; norm[2] = 1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/* Look for a third vertex which forms the triangle with maximum area\n\t\t\t* (Length of normal == twice the triangle area)\n\t\t\t*/\n\t\t\tmaxLen2 = 0;\n\t\t\tv1 = minVert[i];\n\t\t\tv2 = maxVert[i];\n\t\t\td1[0] = v1.coords[0] - v2.coords[0];\n\t\t\td1[1] = v1.coords[1] - v2.coords[1];\n\t\t\td1[2] = v1.coords[2] - v2.coords[2];\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\td2[0] = v.coords[0] - v2.coords[0];\n\t\t\t\td2[1] = v.coords[1] - v2.coords[1];\n\t\t\t\td2[2] = v.coords[2] - v2.coords[2];\n\t\t\t\ttNorm[0] = d1[1]*d2[2] - d1[2]*d2[1];\n\t\t\t\ttNorm[1] = d1[2]*d2[0] - d1[0]*d2[2];\n\t\t\t\ttNorm[2] = d1[0]*d2[1] - d1[1]*d2[0];\n\t\t\t\ttLen2 = tNorm[0]*tNorm[0] + tNorm[1]*tNorm[1] + tNorm[2]*tNorm[2];\n\t\t\t\tif( tLen2 > maxLen2 ) {\n\t\t\t\t\tmaxLen2 = tLen2;\n\t\t\t\t\tnorm[0] = tNorm[0];\n\t\t\t\t\tnorm[1] = tNorm[1];\n\t\t\t\t\tnorm[2] = tNorm[2];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( maxLen2 <= 0 ) {\n\t\t\t\t/* All points lie on a single line -- any decent normal will do */\n\t\t\t\tnorm[0] = norm[1] = norm[2] = 0;\n\t\t\t\tnorm[this.longAxis_(d1)] = 1;\n\t\t\t}\n\t\t},\n\n\t\tcheckOrientation_: function() {\n\t\t\tvar area;\n\t\t\tvar f, fHead = this.mesh.fHead;\n\t\t\tvar v, vHead = this.mesh.vHead;\n\t\t\tvar e;\n\n\t\t\t/* When we compute the normal automatically, we choose the orientation\n\t\t\t* so that the the sum of the signed areas of all contours is non-negative.\n\t\t\t*/\n\t\t\tarea = 0;\n\t\t\tfor( f = fHead.next; f !== fHead; f = f.next ) {\n\t\t\t\te = f.anEdge;\n\t\t\t\tif( e.winding <= 0 ) continue;\n\t\t\t\tdo {\n\t\t\t\t\tarea += (e.Org.s - e.Dst.s) * (e.Org.t + e.Dst.t);\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t} while( e !== f.anEdge );\n\t\t\t}\n\t\t\tif( area < 0 ) {\n\t\t\t\t/* Reverse the orientation by flipping all the t-coordinates */\n\t\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\t\tv.t = - v.t;\n\t\t\t\t}\n\t\t\t\tthis.tUnit[0] = - this.tUnit[0];\n\t\t\t\tthis.tUnit[1] = - this.tUnit[1];\n\t\t\t\tthis.tUnit[2] = - this.tUnit[2];\n\t\t\t}\n\t\t},\n\n\t/*\t#ifdef FOR_TRITE_TEST_PROGRAM\n\t\t#include <stdlib.h>\n\t\textern int RandomSweep;\n\t\t#define S_UNIT_X\t(RandomSweep ? (2*drand48()-1) : 1.0)\n\t\t#define S_UNIT_Y\t(RandomSweep ? (2*drand48()-1) : 0.0)\n\t\t#else\n\t\t#if defined(SLANTED_SWEEP) */\n\t\t/* The \"feature merging\" is not intended to be complete.  There are\n\t\t* special cases where edges are nearly parallel to the sweep line\n\t\t* which are not implemented.  The algorithm should still behave\n\t\t* robustly (ie. produce a reasonable tesselation) in the presence\n\t\t* of such edges, however it may miss features which could have been\n\t\t* merged.  We could minimize this effect by choosing the sweep line\n\t\t* direction to be something unusual (ie. not parallel to one of the\n\t\t* coordinate axes).\n\t\t*/\n\t/*\t#define S_UNIT_X\t(TESSreal)0.50941539564955385\t// Pre-normalized\n\t\t#define S_UNIT_Y\t(TESSreal)0.86052074622010633\n\t\t#else\n\t\t#define S_UNIT_X\t(TESSreal)1.0\n\t\t#define S_UNIT_Y\t(TESSreal)0.0\n\t\t#endif\n\t\t#endif*/\n\n\t\t/* Determine the polygon normal and project vertices onto the plane\n\t\t* of the polygon.\n\t\t*/\n\t\tprojectPolygon_: function() {\n\t\t\tvar v, vHead = this.mesh.vHead;\n\t\t\tvar norm = [0,0,0];\n\t\t\tvar sUnit, tUnit;\n\t\t\tvar i, first, computedNormal = false;\n\n\t\t\tnorm[0] = this.normal[0];\n\t\t\tnorm[1] = this.normal[1];\n\t\t\tnorm[2] = this.normal[2];\n\t\t\tif( norm[0] === 0.0 && norm[1] === 0.0 && norm[2] === 0.0 ) {\n\t\t\t\tthis.computeNormal_( norm );\n\t\t\t\tcomputedNormal = true;\n\t\t\t}\n\t\t\tsUnit = this.sUnit;\n\t\t\ttUnit = this.tUnit;\n\t\t\ti = this.longAxis_( norm );\n\n\t/*\t#if defined(FOR_TRITE_TEST_PROGRAM) || defined(TRUE_PROJECT)\n\t\t\t// Choose the initial sUnit vector to be approximately perpendicular\n\t\t\t// to the normal.\n\t\t\t\n\t\t\tNormalize( norm );\n\n\t\t\tsUnit[i] = 0;\n\t\t\tsUnit[(i+1)%3] = S_UNIT_X;\n\t\t\tsUnit[(i+2)%3] = S_UNIT_Y;\n\n\t\t\t// Now make it exactly perpendicular \n\t\t\tw = Dot( sUnit, norm );\n\t\t\tsUnit[0] -= w * norm[0];\n\t\t\tsUnit[1] -= w * norm[1];\n\t\t\tsUnit[2] -= w * norm[2];\n\t\t\tNormalize( sUnit );\n\n\t\t\t// Choose tUnit so that (sUnit,tUnit,norm) form a right-handed frame \n\t\t\ttUnit[0] = norm[1]*sUnit[2] - norm[2]*sUnit[1];\n\t\t\ttUnit[1] = norm[2]*sUnit[0] - norm[0]*sUnit[2];\n\t\t\ttUnit[2] = norm[0]*sUnit[1] - norm[1]*sUnit[0];\n\t\t\tNormalize( tUnit );\n\t\t#else*/\n\t\t\t/* Project perpendicular to a coordinate axis -- better numerically */\n\t\t\tsUnit[i] = 0;\n\t\t\tsUnit[(i+1)%3] = 1.0;\n\t\t\tsUnit[(i+2)%3] = 0.0;\n\n\t\t\ttUnit[i] = 0;\n\t\t\ttUnit[(i+1)%3] = 0.0;\n\t\t\ttUnit[(i+2)%3] = (norm[i] > 0) ? 1.0 : -1.0;\n\t//\t#endif\n\n\t\t\t/* Project the vertices onto the sweep plane */\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tv.s = this.dot_( v.coords, sUnit );\n\t\t\t\tv.t = this.dot_( v.coords, tUnit );\n\t\t\t}\n\t\t\tif( computedNormal ) {\n\t\t\t\tthis.checkOrientation_();\n\t\t\t}\n\n\t\t\t/* Compute ST bounds. */\n\t\t\tfirst = true;\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tif (first) {\n\t\t\t\t\tthis.bmin[0] = this.bmax[0] = v.s;\n\t\t\t\t\tthis.bmin[1] = this.bmax[1] = v.t;\n\t\t\t\t\tfirst = false;\n\t\t\t\t} else {\n\t\t\t\t\tif (v.s < this.bmin[0]) this.bmin[0] = v.s;\n\t\t\t\t\tif (v.s > this.bmax[0]) this.bmax[0] = v.s;\n\t\t\t\t\tif (v.t < this.bmin[1]) this.bmin[1] = v.t;\n\t\t\t\t\tif (v.t > this.bmax[1]) this.bmax[1] = v.t;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\taddWinding_: function(eDst,eSrc) {\n\t\t\teDst.winding += eSrc.winding;\n\t\t\teDst.Sym.winding += eSrc.Sym.winding;\n\t\t},\n\t\t\n\t\t/* tessMeshTessellateMonoRegion( face ) tessellates a monotone region\n\t\t* (what else would it do??)  The region must consist of a single\n\t\t* loop of half-edges (see mesh.h) oriented CCW.  \"Monotone\" in this\n\t\t* case means that any vertical line intersects the interior of the\n\t\t* region in a single interval.  \n\t\t*\n\t\t* Tessellation consists of adding interior edges (actually pairs of\n\t\t* half-edges), to split the region into non-overlapping triangles.\n\t\t*\n\t\t* The basic idea is explained in Preparata and Shamos (which I don''t\n\t\t* have handy right now), although their implementation is more\n\t\t* complicated than this one.  The are two edge chains, an upper chain\n\t\t* and a lower chain.  We process all vertices from both chains in order,\n\t\t* from right to left.\n\t\t*\n\t\t* The algorithm ensures that the following invariant holds after each\n\t\t* vertex is processed: the untessellated region consists of two\n\t\t* chains, where one chain (say the upper) is a single edge, and\n\t\t* the other chain is concave.  The left vertex of the single edge\n\t\t* is always to the left of all vertices in the concave chain.\n\t\t*\n\t\t* Each step consists of adding the rightmost unprocessed vertex to one\n\t\t* of the two chains, and forming a fan of triangles from the rightmost\n\t\t* of two chain endpoints.  Determining whether we can add each triangle\n\t\t* to the fan is a simple orientation test.  By making the fan as large\n\t\t* as possible, we restore the invariant (check it yourself).\n\t\t*/\n\t//\tint tessMeshTessellateMonoRegion( TESSmesh *mesh, TESSface *face )\n\t\ttessellateMonoRegion_: function( mesh, face ) {\n\t\t\tvar up, lo;\n\n\t\t\t/* All edges are oriented CCW around the boundary of the region.\n\t\t\t* First, find the half-edge whose origin vertex is rightmost.\n\t\t\t* Since the sweep goes from left to right, face->anEdge should\n\t\t\t* be close to the edge we want.\n\t\t\t*/\n\t\t\tup = face.anEdge;\n\t\t\tassert( up.Lnext !== up && up.Lnext.Lnext !== up );\n\n\t\t\tfor( ; Geom.vertLeq( up.Dst, up.Org ); up = up.Lprev )\n\t\t\t\t;\n\t\t\tfor( ; Geom.vertLeq( up.Org, up.Dst ); up = up.Lnext )\n\t\t\t\t;\n\t\t\tlo = up.Lprev;\n\n\t\t\twhile( up.Lnext !== lo ) {\n\t\t\t\tif( Geom.vertLeq( up.Dst, lo.Org )) {\n\t\t\t\t\t/* up->Dst is on the left.  It is safe to form triangles from lo->Org.\n\t\t\t\t\t* The EdgeGoesLeft test guarantees progress even when some triangles\n\t\t\t\t\t* are CW, given that the upper and lower chains are truly monotone.\n\t\t\t\t\t*/\n\t\t\t\t\twhile( lo.Lnext !== up && (Geom.edgeGoesLeft( lo.Lnext )\n\t\t\t\t\t\t|| Geom.edgeSign( lo.Org, lo.Dst, lo.Lnext.Dst ) <= 0.0 )) {\n\t\t\t\t\t\t\tvar tempHalfEdge = mesh.connect( lo.Lnext, lo );\n\t\t\t\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\t\t\t\tlo = tempHalfEdge.Sym;\n\t\t\t\t\t}\n\t\t\t\t\tlo = lo.Lprev;\n\t\t\t\t} else {\n\t\t\t\t\t/* lo->Org is on the left.  We can make CCW triangles from up->Dst. */\n\t\t\t\t\twhile( lo.Lnext != up && (Geom.edgeGoesRight( up.Lprev )\n\t\t\t\t\t\t|| Geom.edgeSign( up.Dst, up.Org, up.Lprev.Org ) >= 0.0 )) {\n\t\t\t\t\t\t\tvar tempHalfEdge = mesh.connect( up, up.Lprev );\n\t\t\t\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\t\t\t\tup = tempHalfEdge.Sym;\n\t\t\t\t\t}\n\t\t\t\t\tup = up.Lnext;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Now lo->Org == up->Dst == the leftmost vertex.  The remaining region\n\t\t\t* can be tessellated in a fan from this leftmost vertex.\n\t\t\t*/\n\t\t\tassert( lo.Lnext !== up );\n\t\t\twhile( lo.Lnext.Lnext !== up ) {\n\t\t\t\tvar tempHalfEdge = mesh.connect( lo.Lnext, lo );\n\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\tlo = tempHalfEdge.Sym;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\n\t\t/* tessMeshTessellateInterior( mesh ) tessellates each region of\n\t\t* the mesh which is marked \"inside\" the polygon.  Each such region\n\t\t* must be monotone.\n\t\t*/\n\t\t//int tessMeshTessellateInterior( TESSmesh *mesh )\n\t\ttessellateInterior_: function( mesh ) {\n\t\t\tvar f, next;\n\n\t\t\t/*LINTED*/\n\t\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {\n\t\t\t\t/* Make sure we don''t try to tessellate the new triangles. */\n\t\t\t\tnext = f.next;\n\t\t\t\tif( f.inside ) {\n\t\t\t\t\tif ( !this.tessellateMonoRegion_( mesh, f ) ) return false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\n\t\t/* tessMeshDiscardExterior( mesh ) zaps (ie. sets to NULL) all faces\n\t\t* which are not marked \"inside\" the polygon.  Since further mesh operations\n\t\t* on NULL faces are not allowed, the main purpose is to clean up the\n\t\t* mesh so that exterior loops are not represented in the data structure.\n\t\t*/\n\t\t//void tessMeshDiscardExterior( TESSmesh *mesh )\n\t\tdiscardExterior_: function( mesh ) {\n\t\t\tvar f, next;\n\n\t\t\t/*LINTED*/\n\t\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {\n\t\t\t\t/* Since f will be destroyed, save its next pointer. */\n\t\t\t\tnext = f.next;\n\t\t\t\tif( ! f.inside ) {\n\t\t\t\t\tmesh.zapFace( f );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/* tessMeshSetWindingNumber( mesh, value, keepOnlyBoundary ) resets the\n\t\t* winding numbers on all edges so that regions marked \"inside\" the\n\t\t* polygon have a winding number of \"value\", and regions outside\n\t\t* have a winding number of 0.\n\t\t*\n\t\t* If keepOnlyBoundary is TRUE, it also deletes all edges which do not\n\t\t* separate an interior region from an exterior one.\n\t\t*/\n\t//\tint tessMeshSetWindingNumber( TESSmesh *mesh, int value, int keepOnlyBoundary )\n\t\tsetWindingNumber_: function( mesh, value, keepOnlyBoundary ) {\n\t\t\tvar e, eNext;\n\n\t\t\tfor( e = mesh.eHead.next; e !== mesh.eHead; e = eNext ) {\n\t\t\t\teNext = e.next;\n\t\t\t\tif( e.Rface.inside !== e.Lface.inside ) {\n\n\t\t\t\t\t/* This is a boundary edge (one side is interior, one is exterior). */\n\t\t\t\t\te.winding = (e.Lface.inside) ? value : -value;\n\t\t\t\t} else {\n\n\t\t\t\t\t/* Both regions are interior, or both are exterior. */\n\t\t\t\t\tif( ! keepOnlyBoundary ) {\n\t\t\t\t\t\te.winding = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmesh.delete( e );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgetNeighbourFace_: function(edge)\n\t\t{\n\t\t\tif (!edge.Rface)\n\t\t\t\treturn -1;\n\t\t\tif (!edge.Rface.inside)\n\t\t\t\treturn -1;\n\t\t\treturn edge.Rface.n;\n\t\t},\n\n\t\toutputPolymesh_: function( mesh, elementType, polySize, vertexSize ) {\n\t\t\tvar v;\n\t\t\tvar f;\n\t\t\tvar edge;\n\t\t\tvar maxFaceCount = 0;\n\t\t\tvar maxVertexCount = 0;\n\t\t\tvar faceVerts, i;\n\t\t\tvar elements = 0;\n\t\t\tvar vert;\n\n\t\t\t// Assume that the input data is triangles now.\n\t\t\t// Try to merge as many polygons as possible\n\t\t\tif (polySize > 3)\n\t\t\t{\n\t\t\t\tmesh.mergeConvexFaces( polySize );\n\t\t\t}\n\n\t\t\t// Mark unused\n\t\t\tfor ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )\n\t\t\t\tv.n = -1;\n\n\t\t\t// Create unique IDs for all vertices and faces.\n\t\t\tfor ( f = mesh.fHead.next; f != mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tf.n = -1;\n\t\t\t\tif( !f.inside ) continue;\n\n\t\t\t\tedge = f.anEdge;\n\t\t\t\tfaceVerts = 0;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tv = edge.Org;\n\t\t\t\t\tif ( v.n === -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tv.n = maxVertexCount;\n\t\t\t\t\t\tmaxVertexCount++;\n\t\t\t\t\t}\n\t\t\t\t\tfaceVerts++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t\n\t\t\t\tassert( faceVerts <= polySize );\n\n\t\t\t\tf.n = maxFaceCount;\n\t\t\t\t++maxFaceCount;\n\t\t\t}\n\n\t\t\tthis.elementCount = maxFaceCount;\n\t\t\tif (elementType == Tess2.CONNECTED_POLYGONS)\n\t\t\t\tmaxFaceCount *= 2;\n\t/*\t\ttess.elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSindex) * maxFaceCount * polySize );\n\t\t\tif (!tess->elements)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.elements = [];\n\t\t\tthis.elements.length = maxFaceCount * polySize;\n\t\t\t\n\t\t\tthis.vertexCount = maxVertexCount;\n\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t sizeof(TESSreal) * tess->vertexCount * vertexSize );\n\t\t\tif (!tess->vertices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertices = [];\n\t\t\tthis.vertices.length = maxVertexCount * vertexSize;\n\n\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    sizeof(TESSindex) * tess->vertexCount );\n\t\t\tif (!tess->vertexIndices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertexIndices = [];\n\t\t\tthis.vertexIndices.length = maxVertexCount;\n\n\t\t\t\n\t\t\t// Output vertices.\n\t\t\tfor ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )\n\t\t\t{\n\t\t\t\tif ( v.n != -1 )\n\t\t\t\t{\n\t\t\t\t\t// Store coordinate\n\t\t\t\t\tvar idx = v.n * vertexSize;\n\t\t\t\t\tthis.vertices[idx+0] = v.coords[0];\n\t\t\t\t\tthis.vertices[idx+1] = v.coords[1];\n\t\t\t\t\tif ( vertexSize > 2 )\n\t\t\t\t\t\tthis.vertices[idx+2] = v.coords[2];\n\t\t\t\t\t// Store vertex index.\n\t\t\t\t\tthis.vertexIndices[v.n] = v.idx;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Output indices.\n\t\t\tvar nel = 0;\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\t\t\t\t\n\t\t\t\t// Store polygon\n\t\t\t\tedge = f.anEdge;\n\t\t\t\tfaceVerts = 0;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tv = edge.Org;\n\t\t\t\t\tthis.elements[nel++] = v.n;\n\t\t\t\t\tfaceVerts++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t// Fill unused.\n\t\t\t\tfor (i = faceVerts; i < polySize; ++i)\n\t\t\t\t\tthis.elements[nel++] = -1;\n\n\t\t\t\t// Store polygon connectivity\n\t\t\t\tif ( elementType == Tess2.CONNECTED_POLYGONS )\n\t\t\t\t{\n\t\t\t\t\tedge = f.anEdge;\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.elements[nel++] = this.getNeighbourFace_( edge );\n\t\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t\t}\n\t\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t\t// Fill unused.\n\t\t\t\t\tfor (i = faceVerts; i < polySize; ++i)\n\t\t\t\t\t\tthis.elements[nel++] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t//\tvoid OutputContours( TESStesselator *tess, TESSmesh *mesh, int vertexSize )\n\t\toutputContours_: function( mesh, vertexSize ) {\n\t\t\tvar f;\n\t\t\tvar edge;\n\t\t\tvar start;\n\t\t\tvar verts;\n\t\t\tvar elements;\n\t\t\tvar vertInds;\n\t\t\tvar startVert = 0;\n\t\t\tvar vertCount = 0;\n\n\t\t\tthis.vertexCount = 0;\n\t\t\tthis.elementCount = 0;\n\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\n\t\t\t\tstart = edge = f.anEdge;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tthis.vertexCount++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile ( edge !== start );\n\n\t\t\t\tthis.elementCount++;\n\t\t\t}\n\n\t/*\t\ttess->elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSindex) * tess->elementCount * 2 );\n\t\t\tif (!tess->elements)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.elements = [];\n\t\t\tthis.elements.length = this.elementCount * 2;\n\t\t\t\n\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSreal) * tess->vertexCount * vertexSize );\n\t\t\tif (!tess->vertices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertices = [];\n\t\t\tthis.vertices.length = this.vertexCount * vertexSize;\n\n\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    sizeof(TESSindex) * tess->vertexCount );\n\t\t\tif (!tess->vertexIndices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertexIndices = [];\n\t\t\tthis.vertexIndices.length = this.vertexCount;\n\n\t\t\tvar nv = 0;\n\t\t\tvar nvi = 0;\n\t\t\tvar nel = 0;\n\t\t\tstartVert = 0;\n\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\n\t\t\t\tvertCount = 0;\n\t\t\t\tstart = edge = f.anEdge;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[0];\n\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[1];\n\t\t\t\t\tif ( vertexSize > 2 )\n\t\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[2];\n\t\t\t\t\tthis.vertexIndices[nvi++] = edge.Org.idx;\n\t\t\t\t\tvertCount++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile ( edge !== start );\n\n\t\t\t\tthis.elements[nel++] = startVert;\n\t\t\t\tthis.elements[nel++] = vertCount;\n\n\t\t\t\tstartVert += vertCount;\n\t\t\t}\n\t\t},\n\n\t\taddContour: function( size, vertices )\n\t\t{\n\t\t\tvar e;\n\t\t\tvar i;\n\n\t\t\tif ( this.mesh === null )\n\t\t\t  \tthis.mesh = new TESSmesh();\n\t/*\t \tif ( tess->mesh == NULL ) {\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\n\t\t\tif ( size < 2 )\n\t\t\t\tsize = 2;\n\t\t\tif ( size > 3 )\n\t\t\t\tsize = 3;\n\n\t\t\te = null;\n\n\t\t\tfor( i = 0; i < vertices.length; i += size )\n\t\t\t{\n\t\t\t\tif( e == null ) {\n\t\t\t\t\t/* Make a self-loop (one vertex, one edge). */\n\t\t\t\t\te = this.mesh.makeEdge();\n\t/*\t\t\t\tif ( e == NULL ) {\n\t\t\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}*/\n\t\t\t\t\tthis.mesh.splice( e, e.Sym );\n\t\t\t\t} else {\n\t\t\t\t\t/* Create a new vertex and edge which immediately follow e\n\t\t\t\t\t* in the ordering around the left face.\n\t\t\t\t\t*/\n\t\t\t\t\tthis.mesh.splitEdge( e );\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t}\n\n\t\t\t\t/* The new vertex is now e->Org. */\n\t\t\t\te.Org.coords[0] = vertices[i+0];\n\t\t\t\te.Org.coords[1] = vertices[i+1];\n\t\t\t\tif ( size > 2 )\n\t\t\t\t\te.Org.coords[2] = vertices[i+2];\n\t\t\t\telse\n\t\t\t\t\te.Org.coords[2] = 0.0;\n\t\t\t\t/* Store the insertion number so that the vertex can be later recognized. */\n\t\t\t\te.Org.idx = this.vertexIndexCounter++;\n\n\t\t\t\t/* The winding of an edge says how the winding number changes as we\n\t\t\t\t* cross from the edge''s right face to its left face.  We add the\n\t\t\t\t* vertices in such an order that a CCW contour will add +1 to\n\t\t\t\t* the winding number of the region inside the contour.\n\t\t\t\t*/\n\t\t\t\te.winding = 1;\n\t\t\t\te.Sym.winding = -1;\n\t\t\t}\n\t\t},\n\n\t//\tint tessTesselate( TESStesselator *tess, int windingRule, int elementType, int polySize, int vertexSize, const TESSreal* normal )\n\t\ttesselate: function( windingRule, elementType, polySize, vertexSize, normal ) {\n\t\t\tthis.vertices = [];\n\t\t\tthis.elements = [];\n\t\t\tthis.vertexIndices = [];\n\n\t\t\tthis.vertexIndexCounter = 0;\n\t\t\t\n\t\t\tif (normal)\n\t\t\t{\n\t\t\t\tthis.normal[0] = normal[0];\n\t\t\t\tthis.normal[1] = normal[1];\n\t\t\t\tthis.normal[2] = normal[2];\n\t\t\t}\n\n\t\t\tthis.windingRule = windingRule;\n\n\t\t\tif (vertexSize < 2)\n\t\t\t\tvertexSize = 2;\n\t\t\tif (vertexSize > 3)\n\t\t\t\tvertexSize = 3;\n\n\t/*\t\tif (setjmp(tess->env) != 0) { \n\t\t\t\t// come back here if out of memory\n\t\t\t\treturn 0;\n\t\t\t}*/\n\n\t\t\tif (!this.mesh)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/* Determine the polygon normal and project vertices onto the plane\n\t\t\t* of the polygon.\n\t\t\t*/\n\t\t\tthis.projectPolygon_();\n\n\t\t\t/* tessComputeInterior( tess ) computes the planar arrangement specified\n\t\t\t* by the given contours, and further subdivides this arrangement\n\t\t\t* into regions.  Each region is marked \"inside\" if it belongs\n\t\t\t* to the polygon, according to the rule given by tess->windingRule.\n\t\t\t* Each interior region is guaranteed be monotone.\n\t\t\t*/\n\t\t\tSweep.computeInterior( this );\n\n\t\t\tvar mesh = this.mesh;\n\n\t\t\t/* If the user wants only the boundary contours, we throw away all edges\n\t\t\t* except those which separate the interior from the exterior.\n\t\t\t* Otherwise we tessellate all the regions marked \"inside\".\n\t\t\t*/\n\t\t\tif (elementType == Tess2.BOUNDARY_CONTOURS) {\n\t\t\t\tthis.setWindingNumber_( mesh, 1, true );\n\t\t\t} else {\n\t\t\t\tthis.tessellateInterior_( mesh ); \n\t\t\t}\n\t//\t\tif (rc == 0) longjmp(tess->env,1);  /* could've used a label */\n\n\t\t\tmesh.check();\n\n\t\t\tif (elementType == Tess2.BOUNDARY_CONTOURS) {\n\t\t\t\tthis.outputContours_( mesh, vertexSize );     /* output contours */\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.outputPolymesh_( mesh, elementType, polySize, vertexSize );     /* output polygons */\n\t\t\t}\n\n//\t\t\ttess.mesh = null;\n\n\t\t\treturn true;\n\t\t}\n\t};\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tess2/src/tess2.js?");

/***/ }),

/***/ "../../node_modules/tiny-inflate/index.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tiny-inflate/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    return TINF_DATA_ERROR;\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      throw new Error('Data error');\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      return d.dest.slice(0, d.destLen);\n    else\n      return d.dest.subarray(0, d.destLen);\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nmodule.exports = tinf_uncompress;\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tiny-inflate/index.js?");

/***/ }),

/***/ "../../node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://LIB/(webpack)/buildin/global.js?");

/***/ }),

/***/ "../../sys/files.js":
/*!*********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/files.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const files = {};\r\n\r\nconst getFile = (path) => {\r\n  let file = files[path];\r\n  if (file === undefined) {\r\n    file = { path: path, watchers: [] };\r\n    files[path] = file;\r\n  }\r\n  return file;\r\n};\r\n\r\nmodule.exports.getFile = getFile;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/files.js?");

/***/ }),

/***/ "../../sys/main.js":
/*!********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/main.js ***!
  \********************************************************/
/*! exports provided: readFileSync, watchFile, writeFileSync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _readFileSync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./readFileSync */ \"../../sys/readFileSync.js\");\n/* harmony import */ var _readFileSync__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_readFileSync__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"readFileSync\", function() { return _readFileSync__WEBPACK_IMPORTED_MODULE_0__[\"readFileSync\"]; });\n\n/* harmony import */ var _writeFileSync__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./writeFileSync */ \"../../sys/writeFileSync.js\");\n/* harmony import */ var _writeFileSync__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_writeFileSync__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writeFileSync\", function() { return _writeFileSync__WEBPACK_IMPORTED_MODULE_1__[\"writeFileSync\"]; });\n\n/* harmony import */ var _watchFile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./watchFile */ \"../../sys/watchFile.js\");\n/* harmony import */ var _watchFile__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_watchFile__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"watchFile\", function() { return _watchFile__WEBPACK_IMPORTED_MODULE_2__[\"watchFile\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/main.js?");

/***/ }),

/***/ "../../sys/readFileSync.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/readFileSync.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const fs = __webpack_require__(/*! fs */ \"../../node_modules/node-libs-browser/mock/empty.js\");\r\nconst readFileSyncBrowser = __webpack_require__(/*! ./readFileSyncBrowser */ \"../../sys/readFileSyncBrowser.js\");\r\n\r\nconst readFileSync = (path, options = {}) => {\r\n  if (fs.readFileSync) {\r\n    return fs.readFileSync(path, options);\r\n  } else {\r\n    return readFileSyncBrowser.readFileSync(path, options);\r\n  }\r\n};\r\n\r\nmodule.exports.readFileSync = readFileSync;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/readFileSync.js?");

/***/ }),

/***/ "../../sys/readFileSyncBrowser.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/readFileSyncBrowser.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { getFile } = __webpack_require__(/*! ./files */ \"../../sys/files.js\");\r\n\r\nconst readFileSync = (path, options) => getFile(path).data;\r\n\r\nmodule.exports.readFileSync = readFileSync;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/readFileSyncBrowser.js?");

/***/ }),

/***/ "../../sys/watchFile.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/watchFile.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const fs = __webpack_require__(/*! fs */ \"../../node_modules/node-libs-browser/mock/empty.js\");\r\nconst watchFileBrowser = __webpack_require__(/*! ./watchFileBrowser */ \"../../sys/watchFileBrowser.js\");\r\n\r\nconst watchFile = (path, thunk) => {\r\n  if (fs.writeFileSync) {\r\n  } else {\r\n    watchFileBrowser.watchFile(path, thunk);\r\n  }\r\n};\r\n\r\nmodule.exports.watchFile = watchFile;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/watchFile.js?");

/***/ }),

/***/ "../../sys/watchFileBrowser.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/watchFileBrowser.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { getFile } = __webpack_require__(/*! ./files */ \"../../sys/files.js\");\r\n\r\nconst watchFile = (path, thunk) => getFile(path).watchers.push(thunk);\r\n\r\nmodule.exports.watchFile = watchFile;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/watchFileBrowser.js?");

/***/ }),

/***/ "../../sys/writeFileSync.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/writeFileSync.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const fs = __webpack_require__(/*! fs */ \"../../node_modules/node-libs-browser/mock/empty.js\");\r\nconst writeFileSyncBrowser = __webpack_require__(/*! ./writeFileSyncBrowser */ \"../../sys/writeFileSyncBrowser.js\");\r\n\r\nconst writeFileSync = (path, data, options = {}) => {\r\n  const { translator } = options;\r\n  if (fs.writeFileSync) {\r\n    if (translator) {\r\n      return fs.writeFileSync(path, translator(), options);\r\n    } else {\r\n      return fs.writeFileSync(path, data, options);\r\n    }\r\n  } else {\r\n    return writeFileSyncBrowser.writeFileSync(path, data, options);\r\n  }\r\n};\r\n\r\nmodule.exports.writeFileSync = writeFileSync;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/writeFileSync.js?");

/***/ }),

/***/ "../../sys/writeFileSyncBrowser.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/writeFileSyncBrowser.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { getFile } = __webpack_require__(/*! ./files */ \"../../sys/files.js\");\r\n\r\nconst writeFileSync = (path, data, options) => {\r\n  const file = getFile(path);\r\n  file.data = data;\r\n  for (const watcher of file.watchers) {\r\n    watcher(file);\r\n  }\r\n};\r\n\r\nmodule.exports.writeFileSync = writeFileSync;\r\n\n\n//# sourceURL=webpack://LIB/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/writeFileSyncBrowser.js?");

/***/ }),

/***/ "./JSxCAD.js":
/*!*******************!*\
  !*** ./JSxCAD.js ***!
  \*******************/
/*! exports provided: api, readFileSync, trianglesToThreejsDatasets, watchFile, writeFileSync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _jsxcad_api_v1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/api-v1 */ \"../../api/v1/main.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"api\", function() { return _jsxcad_api_v1__WEBPACK_IMPORTED_MODULE_0__; });\n/* harmony import */ var _jsxcad_algorithm_threejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-threejs */ \"../../algorithm/threejs/main.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"trianglesToThreejsDatasets\", function() { return _jsxcad_algorithm_threejs__WEBPACK_IMPORTED_MODULE_1__[\"trianglesToThreejsDatasets\"]; });\n\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"readFileSync\", function() { return _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__[\"readFileSync\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"watchFile\", function() { return _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__[\"watchFile\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writeFileSync\", function() { return _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__[\"writeFileSync\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/./JSxCAD.js?");

/***/ }),

/***/ 0:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack://LIB/fs_(ignored)?");

/***/ })

/******/ });

export const api = LIB['api'];
export const readFileSync = LIB['readFileSync'];
export const trianglesToThreejsDatasets = LIB['trianglesToThreejsDatasets'];
export const watchFile = LIB['watchFile'];
export const writeFileSync = LIB['writeFileSync'];
