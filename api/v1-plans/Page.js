import "@jsxcad/api-v1-item";

import { Empty, Layers, Square } from "@jsxcad/api-v1-shapes";
import { getLeafs, getPlans } from "@jsxcad/geometry-tagged";

import { Hershey } from "@jsxcad/api-v1-font";
import { Plan } from "@jsxcad/api-v1-plan";
import Shape from "@jsxcad/api-v1-shape";
import { max } from "@jsxcad/api-v1-math";
import { pack } from "@jsxcad/api-v1-layout";

const MIN = 0;
const MAX = 1;
const X = 0;
const Y = 1;

export const Page = (
  { size, pageMargin = 5, itemMargin = 1, itemsPerPage = Infinity },
  ...shapes
) => {
  const layers = [];
  for (const shape of shapes) {
    for (const leaf of getLeafs(shape.toKeptGeometry())) {
      layers.push(leaf);
    }
  }
  const r = (v) => Math.floor(v * 100) / 100;
  const labelScale = 0.0125 * 5;
  if (size) {
    // Content fits to page size.
    const packSize = [];
    const content = pack(Shape.fromGeometry({ layers }), {
      size,
      pageMargin,
      itemMargin,
      perLayout: itemsPerPage,
      packSize,
    });
    const pageWidth = packSize[MAX][X] - packSize[MIN][X];
    const pageLength = packSize[MAX][Y] - packSize[MIN][Y];
    const plans = [];
    for (const layer of content.toKeptGeometry().disjointAssembly[0].layers) {
      plans.push(
        Plan({
          plan: { page: { size, margin: pageMargin } },
          marks: packSize,
          content: Shape.fromGeometry(layer),
          visualization: Square(pageWidth, pageLength)
            .outline()
            .with(
              Hershey(max(pageWidth, pageLength) * labelScale)(
                `${r(pageWidth)} x ${r(pageLength)}`
              ).move(pageWidth / -2, (pageLength * (1 + labelScale)) / 2)
            )
            .color("red"),
        }).Item()
      );
    }
    return Layers(...plans);
  } else {
    const packSize = [];
    // Page fits to content size.
    const content = pack(Shape.fromGeometry({ layers }), {
      pageMargin,
      itemMargin,
      perLayout: itemsPerPage,
      packSize,
    });
    // FIX: Using content.size() loses the margin, which is a problem for repacking.
    // Probably page plans should be generated by pack and count toward the size.
    const pageWidth = packSize[MAX][X] - packSize[MIN][X];
    const pageLength = packSize[MAX][Y] - packSize[MIN][Y];
    if (isFinite(pageWidth) && isFinite(pageLength)) {
      const plans = [];
      for (const layer of content.toKeptGeometry().disjointAssembly[0].layers) {
        plans.push(
          Plan({
            plan: {
              page: { size: [pageWidth, pageLength], margin: pageMargin },
            },
            content: Shape.fromGeometry(layer).center(),
            marks: packSize,
            visualization: Square(pageWidth, pageLength)
              .outline()
              .with(
                Hershey(max(pageWidth, pageLength) * labelScale)(
                  `${r(pageWidth)} x ${r(pageLength)}`
                ).move(pageWidth / -2, (pageLength * (1 + labelScale)) / 2)
              )
              .color("red"),
          }).Item()
        );
      }
      return Layers(...plans);
    } else {
      return Empty();
    }
  }
};

Plan.Page = Page;

const PageMethod = function (options = {}) {
  return Page(options, this);
};
Shape.prototype.Page = PageMethod;

export default Page;

export const ensurePages = (geometry, depth = 0) => {
  const pages = getPlans(geometry).filter((entry) => entry.plan.page);
  if (pages.length === 0 && depth === 0) {
    return ensurePages(
      Page({}, Shape.fromGeometry(geometry)).toGeometry(),
      depth + 1
    );
  } else {
    return pages;
  }
};
