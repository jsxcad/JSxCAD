/* global postMessage, onmessage:writable, self */

import * as api from '@jsxcad/api-v1';
import { toStl } from '@jsxcad/convert-stl';
import * as convertSvg from '@jsxcad/convert-svg';
import * as convertThree from '@jsxcad/convert-threejs';
import * as sys from '@jsxcad/sys';

const say = (message) => postMessage(message);
const agent = async ({ ask, question }) => {
  try {
    var { key, values } = question;
    switch (key) {
      case 'assemble':
        values = values.map(api.Shape.fromGeometry);
        return api.assemble(...values).drop("cutAway").toKeptGeometry();
      case 'bounding box':
        return api.Shape.fromGeometry(values[0]).measureBoundingBox();
      case 'circle':
        return api.circle({ radius: values[0]/2, center: true, resolution: values[1] }).toDisjointGeometry();
      case 'color':
        return api.Shape.fromGeometry(values[0]).color(values[1]).toDisjointGeometry();
      case 'difference':
        return api.difference(api.Shape.fromGeometry(values[0]), api.Shape.fromGeometry(values[1])).toDisjointGeometry();
      case 'cutAway':
        return api.Shape.fromGeometry(values[0]).as("cutAway").toDisjointGeometry();
      case 'extrude':
        return api.Shape.fromGeometry(values[0]).extrude({ height: values[1] }).toDisjointGeometry();
      case 'hull':
        values = values.map(api.Shape.fromGeometry);
        return api.hull(...values).toDisjointGeometry();
      case 'intersection':
        return api.intersection(api.Shape.fromGeometry(values[0]), api.Shape.fromGeometry(values[1])).toDisjointGeometry();
      case 'rectangle':
        return api.square(values[0], values[1]).toDisjointGeometry();
      case 'regular polygon':
        return api.circle({ radius: values[0], center: true, resolution: values[1] }).toDisjointGeometry();
      case 'render':
        return convertThree.toThreejsGeometry(api.Shape.fromGeometry(values).toDisjointGeometry());
      case 'rotate':
        return api.Shape.fromGeometry(values[0]).rotateX(values[1]).rotateY(values[2]).rotateZ(values[3]).toDisjointGeometry();
      case 'scale':
        return api.Shape.fromGeometry(values[0]).scale(values[1]).toDisjointGeometry();
      case 'stl':
        console.log("STL Called with: ")
        console.log(values)
        console.log("Inflated: ")
        //const inflated = api.Shape.fromGeometry(values[0]).toKeptGeometry();
        
        const inflated = {"disjointAssembly":[{"solid":[[[[15,5,10],[5,5.000000000000001,10],[4.999999999999998,-4.999999999999999,10],[15,-5.000000000000002,10]]],[[[15,-5.000000000000002,0],[4.999999999999998,-4.999999999999999,0],[5,5.000000000000001,0],[15,5,0]]],[[[15,-5.000000000000002,0],[15,-5.000000000000002,10],[4.999999999999998,-4.999999999999999,10],[4.999999999999998,-4.999999999999999,0]]],[[[4.999999999999998,-4.999999999999999,0],[4.999999999999998,-4.999999999999999,10],[5,5.000000000000001,10],[5,5.000000000000001,0]]],[[[5,5.000000000000001,0],[5,5.000000000000001,10],[15,5,10],[15,5,0]]],[[[15,5,0],[15,5,10],[15,-5.000000000000002,10],[15,-5.000000000000002,0]]]]},{"solid":[[[[5,0,5],[4.903926402016152,0.9754516100806412,5],[4.619397662556434,1.913417161825449,5],[4.157348061512726,2.777851165098011,5],[3.5355339059327378,3.5355339059327373,5],[2.7778511650980113,4.157348061512726,5],[1.9134171618254492,4.619397662556434,5],[0.9754516100806416,4.903926402016152,5],[3.061616997868383e-16,5,5],[-0.975451610080641,4.903926402016152,5],[-1.9134171618254485,4.619397662556434,5],[-2.77785116509801,4.157348061512726,5],[-3.5355339059327373,3.5355339059327378,5],[-4.157348061512726,2.777851165098011,5],[-4.619397662556434,1.9134171618254494,5],[-4.903926402016152,0.9754516100806431,5],[-5,6.123233995736766e-16,5],[-4.903926402016152,-0.9754516100806419,5],[-4.619397662556434,-1.9134171618254483,5],[-4.157348061512727,-2.77785116509801,5],[-3.5355339059327386,-3.5355339059327373,5],[-2.777851165098011,-4.157348061512726,5],[-1.9134171618254516,-4.619397662556432,5],[-0.9754516100806433,-4.903926402016151,5],[-9.184850993605148e-16,-5,5],[0.9754516100806415,-4.903926402016152,5],[1.91341716182545,-4.619397662556433,5],[2.777851165098009,-4.157348061512727,5],[3.535533905932737,-3.5355339059327386,5],[4.157348061512726,-2.777851165098011,5],[4.619397662556432,-1.913417161825452,5],[4.903926402016151,-0.9754516100806436,5]]],[[[4.903926402016151,-0.9754516100806436,0],[4.619397662556432,-1.913417161825452,0],[4.157348061512726,-2.777851165098011,0],[3.535533905932737,-3.5355339059327386,0],[2.777851165098009,-4.157348061512727,0],[1.91341716182545,-4.619397662556433,0],[0.9754516100806415,-4.903926402016152,0],[-9.184850993605148e-16,-5,0],[-0.9754516100806433,-4.903926402016151,0],[-1.9134171618254516,-4.619397662556432,0],[-2.777851165098011,-4.157348061512726,0],[-3.5355339059327386,-3.5355339059327373,0],[-4.157348061512727,-2.77785116509801,0],[-4.619397662556434,-1.9134171618254483,0],[-4.903926402016152,-0.9754516100806419,0],[-5,6.123233995736766e-16,0],[-4.903926402016152,0.9754516100806431,0],[-4.619397662556434,1.9134171618254494,0],[-4.157348061512726,2.777851165098011,0],[-3.5355339059327373,3.5355339059327378,0],[-2.77785116509801,4.157348061512726,0],[-1.9134171618254485,4.619397662556434,0],[-0.975451610080641,4.903926402016152,0],[3.061616997868383e-16,5,0],[0.9754516100806416,4.903926402016152,0],[1.9134171618254492,4.619397662556434,0],[2.7778511650980113,4.157348061512726,0],[3.5355339059327378,3.5355339059327373,0],[4.157348061512726,2.777851165098011,0],[4.619397662556434,1.913417161825449,0],[4.903926402016152,0.9754516100806412,0],[5,0,0]]],[[[4.903926402016151,-0.9754516100806436,0],[4.903926402016151,-0.9754516100806436,5],[4.619397662556432,-1.913417161825452,5],[4.619397662556432,-1.913417161825452,0]]],[[[4.619397662556432,-1.913417161825452,0],[4.619397662556432,-1.913417161825452,5],[4.157348061512726,-2.777851165098011,5],[4.157348061512726,-2.777851165098011,0]]],[[[4.157348061512726,-2.777851165098011,0],[4.157348061512726,-2.777851165098011,5],[3.535533905932737,-3.5355339059327386,5],[3.535533905932737,-3.5355339059327386,0]]],[[[3.535533905932737,-3.5355339059327386,0],[3.535533905932737,-3.5355339059327386,5],[2.777851165098009,-4.157348061512727,5],[2.777851165098009,-4.157348061512727,0]]],[[[2.777851165098009,-4.157348061512727,0],[2.777851165098009,-4.157348061512727,5],[1.91341716182545,-4.619397662556433,5],[1.91341716182545,-4.619397662556433,0]]],[[[1.91341716182545,-4.619397662556433,0],[1.91341716182545,-4.619397662556433,5],[0.9754516100806415,-4.903926402016152,5],[0.9754516100806415,-4.903926402016152,0]]],[[[0.9754516100806415,-4.903926402016152,0],[0.9754516100806415,-4.903926402016152,5],[-9.184850993605148e-16,-5,5],[-9.184850993605148e-16,-5,0]]],[[[-9.184850993605148e-16,-5,0],[-9.184850993605148e-16,-5,5],[-0.9754516100806433,-4.903926402016151,5],[-0.9754516100806433,-4.903926402016151,0]]],[[[-0.9754516100806433,-4.903926402016151,0],[-0.9754516100806433,-4.903926402016151,5],[-1.9134171618254516,-4.619397662556432,5],[-1.9134171618254516,-4.619397662556432,0]]],[[[-1.9134171618254516,-4.619397662556432,0],[-1.9134171618254516,-4.619397662556432,5],[-2.777851165098011,-4.157348061512726,5],[-2.777851165098011,-4.157348061512726,0]]],[[[-2.777851165098011,-4.157348061512726,0],[-2.777851165098011,-4.157348061512726,5],[-3.5355339059327386,-3.5355339059327373,5],[-3.5355339059327386,-3.5355339059327373,0]]],[[[-3.5355339059327386,-3.5355339059327373,0],[-3.5355339059327386,-3.5355339059327373,5],[-4.157348061512727,-2.77785116509801,5],[-4.157348061512727,-2.77785116509801,0]]],[[[-4.157348061512727,-2.77785116509801,0],[-4.157348061512727,-2.77785116509801,5],[-4.619397662556434,-1.9134171618254483,5],[-4.619397662556434,-1.9134171618254483,0]]],[[[-4.619397662556434,-1.9134171618254483,0],[-4.619397662556434,-1.9134171618254483,5],[-4.903926402016152,-0.9754516100806419,5],[-4.903926402016152,-0.9754516100806419,0]]],[[[-4.903926402016152,-0.9754516100806419,0],[-4.903926402016152,-0.9754516100806419,5],[-5,6.123233995736766e-16,5],[-5,6.123233995736766e-16,0]]],[[[-5,6.123233995736766e-16,0],[-5,6.123233995736766e-16,5],[-4.903926402016152,0.9754516100806431,5],[-4.903926402016152,0.9754516100806431,0]]],[[[-4.903926402016152,0.9754516100806431,0],[-4.903926402016152,0.9754516100806431,5],[-4.619397662556434,1.9134171618254494,5],[-4.619397662556434,1.9134171618254494,0]]],[[[-4.619397662556434,1.9134171618254494,0],[-4.619397662556434,1.9134171618254494,5],[-4.157348061512726,2.777851165098011,5],[-4.157348061512726,2.777851165098011,0]]],[[[-4.157348061512726,2.777851165098011,0],[-4.157348061512726,2.777851165098011,5],[-3.5355339059327373,3.5355339059327378,5],[-3.5355339059327373,3.5355339059327378,0]]],[[[-3.5355339059327373,3.5355339059327378,0],[-3.5355339059327373,3.5355339059327378,5],[-2.77785116509801,4.157348061512726,5],[-2.77785116509801,4.157348061512726,0]]],[[[-2.77785116509801,4.157348061512726,0],[-2.77785116509801,4.157348061512726,5],[-1.9134171618254485,4.619397662556434,5],[-1.9134171618254485,4.619397662556434,0]]],[[[-1.9134171618254485,4.619397662556434,0],[-1.9134171618254485,4.619397662556434,5],[-0.975451610080641,4.903926402016152,5],[-0.975451610080641,4.903926402016152,0]]],[[[-0.975451610080641,4.903926402016152,0],[-0.975451610080641,4.903926402016152,5],[3.061616997868383e-16,5,5],[3.061616997868383e-16,5,0]]],[[[3.061616997868383e-16,5,0],[3.061616997868383e-16,5,5],[0.9754516100806416,4.903926402016152,5],[0.9754516100806416,4.903926402016152,0]]],[[[0.9754516100806416,4.903926402016152,0],[0.9754516100806416,4.903926402016152,5],[1.9134171618254492,4.619397662556434,5],[1.9134171618254492,4.619397662556434,0]]],[[[1.9134171618254492,4.619397662556434,0],[1.9134171618254492,4.619397662556434,5],[2.7778511650980113,4.157348061512726,5],[2.7778511650980113,4.157348061512726,0]]],[[[2.7778511650980113,4.157348061512726,0],[2.7778511650980113,4.157348061512726,5],[3.5355339059327378,3.5355339059327373,5],[3.5355339059327378,3.5355339059327373,0]]],[[[3.5355339059327378,3.5355339059327373,0],[3.5355339059327378,3.5355339059327373,5],[4.157348061512726,2.777851165098011,5],[4.157348061512726,2.777851165098011,0]]],[[[4.157348061512726,2.777851165098011,0],[4.157348061512726,2.777851165098011,5],[4.619397662556434,1.913417161825449,5],[4.619397662556434,1.913417161825449,0]]],[[[4.619397662556434,1.913417161825449,0],[4.619397662556434,1.913417161825449,5],[4.903926402016152,0.9754516100806412,5],[4.903926402016152,0.9754516100806412,0]]],[[[4.903926402016152,0.9754516100806412,0],[4.903926402016152,0.9754516100806412,5],[5,0,5],[5,0,0]]],[[[5,0,0],[5,0,5],[4.903926402016151,-0.9754516100806436,5],[4.903926402016151,-0.9754516100806436,0]]]]}]}
        
        console.log("Testing values: ")
        console.log(inflated)
        console.log(await toStl({}, inflated ))
        
        return await toStl({}, inflated );
      case 'stretch':
        return api.Shape.fromGeometry(values[0]).scale([values[1], values[2], values[3]]).toDisjointGeometry();
      case 'svg':
        console.log(api.Shape.fromGeometry(values[0]).center())
        const crosssection = api.Shape.fromGeometry(values[0]).center().crossSection();
        return convertSvg.toSvg({}, crossSection);
      case 'SVG Picture':
        const shape = api.Shape.fromGeometry(values[0]).center();
        const bounds = shape.measureBoundingBox();
        const cameraDistance = 6 * Math.max(...bounds[1]);
        return convertThree.toSvg({ view: { position: [0, 0, cameraDistance], near: 1, far: 10000 } }, shape.rotateX(20).rotateY(-45).toDisjointGeometry());
      case 'tag':
        return api.Shape.fromGeometry(values[0]).as(values[1]).toDisjointGeometry();
      case 'translate':
        return api.Shape.fromGeometry(values[0]).translate([values[1], values[2], values[3]]).toDisjointGeometry();
      case 'union':
        return api.union(api.Shape.fromGeometry(values[0]), api.Shape.fromGeometry(values[1])).toDisjointGeometry();
      default:
        return -1;
    }
  } catch (error) {
    console.log(error);
    return -1;
  }
};
const { ask, hear } = sys.conversation({ agent, say });
self.ask = ask;
onmessage = ({ data }) => hear(data);
if (onmessage === undefined) throw Error('die');
