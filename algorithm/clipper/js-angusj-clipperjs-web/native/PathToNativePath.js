"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mem_1 = require("./mem");
var coordsPerPoint = 2;
function getNofItemsForPath(path) {
  return 1 + path.length * coordsPerPoint;
}
exports.getNofItemsForPath = getNofItemsForPath;
// js to c++
function writePathToDoubleArray(path, heapBytes, startPtr) {
  var len = path.length;
  heapBytes[startPtr] = len;
  var arrayI = 1 + startPtr;
  for (var i = 0; i < len; i++) {
    heapBytes[arrayI++] = path[i].x;
    heapBytes[arrayI++] = path[i].y;
  }
  return arrayI;
}
exports.writePathToDoubleArray = writePathToDoubleArray;
function pathToDoubleArray(nativeClipperLib, path) {
  var nofItems = getNofItemsForPath(path);
  var heapBytes = mem_1.mallocDoubleArray(nativeClipperLib, nofItems);
  writePathToDoubleArray(path, heapBytes, 0);
  return heapBytes;
}
exports.pathToDoubleArray = pathToDoubleArray;
function doubleArrayToNativePath(nativeClipperLib, array, freeArray) {
  var p = new nativeClipperLib.Path();
  nativeClipperLib.toPath(p, array.byteOffset);
  if (freeArray) {
    mem_1.freeTypedArray(nativeClipperLib, array);
  }
  return p;
}
exports.doubleArrayToNativePath = doubleArrayToNativePath;
function pathToNativePath(nativeClipperLib, path) {
  var array = pathToDoubleArray(nativeClipperLib, path);
  return doubleArrayToNativePath(nativeClipperLib, array, true);
}
exports.pathToNativePath = pathToNativePath;
// c++ to js
function nativePathToDoubleArray(nativeClipperLib, nativePath, freeNativePath) {
  var array = nativeClipperLib.fromPath(nativePath);
  if (freeNativePath) {
    nativePath.delete();
  }
  return array;
}
exports.nativePathToDoubleArray = nativePathToDoubleArray;
function doubleArrayToPath(
  nativeClipperLib,
  array,
  _freeDoubleArray,
  startPtr
) {
  var len = array[startPtr];
  var path = [];
  path.length = len;
  var arrayI = 1 + startPtr;
  for (var i = 0; i < len; i++) {
    path[i] = {
      x: array[arrayI++],
      y: array[arrayI++],
    };
  }
  if (_freeDoubleArray) {
    mem_1.freeTypedArray(nativeClipperLib, array);
  }
  return {
    path: path,
    ptrEnd: arrayI,
  };
}
exports.doubleArrayToPath = doubleArrayToPath;
function nativePathToPath(nativeClipperLib, nativePath, freeNativePath) {
  var array = nativePathToDoubleArray(
    nativeClipperLib,
    nativePath,
    freeNativePath
  );
  return doubleArrayToPath(nativeClipperLib, array, true, 0).path;
}
exports.nativePathToPath = nativePathToPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aFRvTmF0aXZlUGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uYXRpdmUvUGF0aFRvTmF0aXZlUGF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDZCQUEwRDtBQUkxRCxJQUFNLGNBQWMsR0FBRyxDQUFDLENBQUM7QUFFekIsU0FBZ0Isa0JBQWtCLENBQUMsSUFBa0I7SUFDbkQsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUM7QUFDMUMsQ0FBQztBQUZELGdEQUVDO0FBRUQsWUFBWTtBQUVaLFNBQWdCLHNCQUFzQixDQUNwQyxJQUFrQixFQUNsQixTQUF1QixFQUN2QixRQUFnQjtJQUVoQixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRXhCLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUM7SUFFMUIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQztJQUMxQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVCLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNqQztJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFoQkQsd0RBZ0JDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQy9CLGdCQUEwQyxFQUMxQyxJQUFrQjtJQUVsQixJQUFNLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQyxJQUFNLFNBQVMsR0FBRyx1QkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoRSxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNDLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFSRCw4Q0FRQztBQUVELFNBQWdCLHVCQUF1QixDQUNyQyxnQkFBMEMsRUFDMUMsS0FBbUIsRUFDbkIsU0FBa0I7SUFFbEIsSUFBTSxDQUFDLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QyxJQUFJLFNBQVMsRUFBRTtRQUNiLG9CQUFjLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDekM7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFYRCwwREFXQztBQUVELFNBQWdCLGdCQUFnQixDQUM5QixnQkFBMEMsRUFDMUMsSUFBa0I7SUFFbEIsSUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEQsT0FBTyx1QkFBdUIsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQU5ELDRDQU1DO0FBRUQsWUFBWTtBQUVaLFNBQWdCLHVCQUF1QixDQUNyQyxnQkFBMEMsRUFDMUMsVUFBc0IsRUFDdEIsY0FBdUI7SUFFdkIsSUFBTSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BELElBQUksY0FBYyxFQUFFO1FBQ2xCLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUNyQjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQVZELDBEQVVDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQy9CLGdCQUEwQyxFQUMxQyxLQUFtQixFQUNuQixnQkFBeUIsRUFDekIsUUFBZ0I7SUFFaEIsSUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVCLElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNoQixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUVsQixJQUFJLE1BQU0sR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDNUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHO1lBQ1IsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNsQixDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ25CLENBQUM7S0FDSDtJQUVELElBQUksZ0JBQWdCLEVBQUU7UUFDcEIsb0JBQWMsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUN6QztJQUVELE9BQU87UUFDTCxJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxNQUFNO0tBQ2YsQ0FBQztBQUNKLENBQUM7QUExQkQsOENBMEJDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQzlCLGdCQUEwQyxFQUMxQyxVQUFzQixFQUN0QixjQUF1QjtJQUV2QixJQUFNLEtBQUssR0FBRyx1QkFBdUIsQ0FBQyxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDcEYsT0FBTyxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNsRSxDQUFDO0FBUEQsNENBT0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXRoLCBSZWFkb25seVBhdGggfSBmcm9tIFwiLi4vUGF0aFwiO1xyXG5pbXBvcnQgeyBmcmVlVHlwZWRBcnJheSwgbWFsbG9jRG91YmxlQXJyYXkgfSBmcm9tIFwiLi9tZW1cIjtcclxuaW1wb3J0IHsgTmF0aXZlQ2xpcHBlckxpYkluc3RhbmNlIH0gZnJvbSBcIi4vTmF0aXZlQ2xpcHBlckxpYkluc3RhbmNlXCI7XHJcbmltcG9ydCB7IE5hdGl2ZVBhdGggfSBmcm9tIFwiLi9OYXRpdmVQYXRoXCI7XHJcblxyXG5jb25zdCBjb29yZHNQZXJQb2ludCA9IDI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Tm9mSXRlbXNGb3JQYXRoKHBhdGg6IFJlYWRvbmx5UGF0aCk6IG51bWJlciB7XHJcbiAgcmV0dXJuIDEgKyBwYXRoLmxlbmd0aCAqIGNvb3Jkc1BlclBvaW50O1xyXG59XHJcblxyXG4vLyBqcyB0byBjKytcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3cml0ZVBhdGhUb0RvdWJsZUFycmF5KFxyXG4gIHBhdGg6IFJlYWRvbmx5UGF0aCxcclxuICBoZWFwQnl0ZXM6IEZsb2F0NjRBcnJheSxcclxuICBzdGFydFB0cjogbnVtYmVyXHJcbik6IG51bWJlciB7XHJcbiAgY29uc3QgbGVuID0gcGF0aC5sZW5ndGg7XHJcblxyXG4gIGhlYXBCeXRlc1tzdGFydFB0cl0gPSBsZW47XHJcblxyXG4gIGxldCBhcnJheUkgPSAxICsgc3RhcnRQdHI7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgaGVhcEJ5dGVzW2FycmF5SSsrXSA9IHBhdGhbaV0ueDtcclxuICAgIGhlYXBCeXRlc1thcnJheUkrK10gPSBwYXRoW2ldLnk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gYXJyYXlJO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGF0aFRvRG91YmxlQXJyYXkoXHJcbiAgbmF0aXZlQ2xpcHBlckxpYjogTmF0aXZlQ2xpcHBlckxpYkluc3RhbmNlLFxyXG4gIHBhdGg6IFJlYWRvbmx5UGF0aFxyXG4pOiBGbG9hdDY0QXJyYXkge1xyXG4gIGNvbnN0IG5vZkl0ZW1zID0gZ2V0Tm9mSXRlbXNGb3JQYXRoKHBhdGgpO1xyXG4gIGNvbnN0IGhlYXBCeXRlcyA9IG1hbGxvY0RvdWJsZUFycmF5KG5hdGl2ZUNsaXBwZXJMaWIsIG5vZkl0ZW1zKTtcclxuICB3cml0ZVBhdGhUb0RvdWJsZUFycmF5KHBhdGgsIGhlYXBCeXRlcywgMCk7XHJcbiAgcmV0dXJuIGhlYXBCeXRlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRvdWJsZUFycmF5VG9OYXRpdmVQYXRoKFxyXG4gIG5hdGl2ZUNsaXBwZXJMaWI6IE5hdGl2ZUNsaXBwZXJMaWJJbnN0YW5jZSxcclxuICBhcnJheTogRmxvYXQ2NEFycmF5LFxyXG4gIGZyZWVBcnJheTogYm9vbGVhblxyXG4pOiBOYXRpdmVQYXRoIHtcclxuICBjb25zdCBwID0gbmV3IG5hdGl2ZUNsaXBwZXJMaWIuUGF0aCgpO1xyXG4gIG5hdGl2ZUNsaXBwZXJMaWIudG9QYXRoKHAsIGFycmF5LmJ5dGVPZmZzZXQpO1xyXG4gIGlmIChmcmVlQXJyYXkpIHtcclxuICAgIGZyZWVUeXBlZEFycmF5KG5hdGl2ZUNsaXBwZXJMaWIsIGFycmF5KTtcclxuICB9XHJcbiAgcmV0dXJuIHA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXRoVG9OYXRpdmVQYXRoKFxyXG4gIG5hdGl2ZUNsaXBwZXJMaWI6IE5hdGl2ZUNsaXBwZXJMaWJJbnN0YW5jZSxcclxuICBwYXRoOiBSZWFkb25seVBhdGhcclxuKTogTmF0aXZlUGF0aCB7XHJcbiAgY29uc3QgYXJyYXkgPSBwYXRoVG9Eb3VibGVBcnJheShuYXRpdmVDbGlwcGVyTGliLCBwYXRoKTtcclxuICByZXR1cm4gZG91YmxlQXJyYXlUb05hdGl2ZVBhdGgobmF0aXZlQ2xpcHBlckxpYiwgYXJyYXksIHRydWUpO1xyXG59XHJcblxyXG4vLyBjKysgdG8ganNcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBuYXRpdmVQYXRoVG9Eb3VibGVBcnJheShcclxuICBuYXRpdmVDbGlwcGVyTGliOiBOYXRpdmVDbGlwcGVyTGliSW5zdGFuY2UsXHJcbiAgbmF0aXZlUGF0aDogTmF0aXZlUGF0aCxcclxuICBmcmVlTmF0aXZlUGF0aDogYm9vbGVhblxyXG4pOiBGbG9hdDY0QXJyYXkge1xyXG4gIGNvbnN0IGFycmF5ID0gbmF0aXZlQ2xpcHBlckxpYi5mcm9tUGF0aChuYXRpdmVQYXRoKTtcclxuICBpZiAoZnJlZU5hdGl2ZVBhdGgpIHtcclxuICAgIG5hdGl2ZVBhdGguZGVsZXRlKCk7XHJcbiAgfVxyXG4gIHJldHVybiBhcnJheTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRvdWJsZUFycmF5VG9QYXRoKFxyXG4gIG5hdGl2ZUNsaXBwZXJMaWI6IE5hdGl2ZUNsaXBwZXJMaWJJbnN0YW5jZSxcclxuICBhcnJheTogRmxvYXQ2NEFycmF5LFxyXG4gIF9mcmVlRG91YmxlQXJyYXk6IGJvb2xlYW4sXHJcbiAgc3RhcnRQdHI6IG51bWJlclxyXG4pOiB7IHBhdGg6IFBhdGg7IHB0ckVuZDogbnVtYmVyIH0ge1xyXG4gIGNvbnN0IGxlbiA9IGFycmF5W3N0YXJ0UHRyXTtcclxuICBjb25zdCBwYXRoID0gW107XHJcbiAgcGF0aC5sZW5ndGggPSBsZW47XHJcblxyXG4gIGxldCBhcnJheUkgPSAxICsgc3RhcnRQdHI7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgcGF0aFtpXSA9IHtcclxuICAgICAgeDogYXJyYXlbYXJyYXlJKytdLFxyXG4gICAgICB5OiBhcnJheVthcnJheUkrK11cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBpZiAoX2ZyZWVEb3VibGVBcnJheSkge1xyXG4gICAgZnJlZVR5cGVkQXJyYXkobmF0aXZlQ2xpcHBlckxpYiwgYXJyYXkpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHBhdGg6IHBhdGgsXHJcbiAgICBwdHJFbmQ6IGFycmF5SVxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBuYXRpdmVQYXRoVG9QYXRoKFxyXG4gIG5hdGl2ZUNsaXBwZXJMaWI6IE5hdGl2ZUNsaXBwZXJMaWJJbnN0YW5jZSxcclxuICBuYXRpdmVQYXRoOiBOYXRpdmVQYXRoLFxyXG4gIGZyZWVOYXRpdmVQYXRoOiBib29sZWFuXHJcbik6IFBhdGgge1xyXG4gIGNvbnN0IGFycmF5ID0gbmF0aXZlUGF0aFRvRG91YmxlQXJyYXkobmF0aXZlQ2xpcHBlckxpYiwgbmF0aXZlUGF0aCwgZnJlZU5hdGl2ZVBhdGgpO1xyXG4gIHJldHVybiBkb3VibGVBcnJheVRvUGF0aChuYXRpdmVDbGlwcGVyTGliLCBhcnJheSwgdHJ1ZSwgMCkucGF0aDtcclxufVxyXG4iXX0=
