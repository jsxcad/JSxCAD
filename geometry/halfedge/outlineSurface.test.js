import { createNormalize3 } from "@jsxcad/algorithm-quantize";
import outlineSurface from "./outlineSurface";
import test from "ava";

test("square-with-square-hole", (t) => {
  const normalize = createNormalize3();
  const surface = [
    [
      [-5, 5, 0],
      [-5, -5, 0],
      [-0.5, -0.5, 0],
    ],
    [
      [0.5, -0.5, 0],
      [-0.5, -0.5, 0],
      [-5, -5, 0],
    ],
    [
      [-5, 5, 0],
      [-0.5, -0.5, 0],
      [-0.5, 0.5, 0],
    ],
    [
      [0.5, -0.5, 0],
      [-5, -5, 0],
      [5, -5, 0],
    ],
    [
      [5, 5, 0],
      [-5, 5, 0],
      [-0.5, 0.5, 0],
    ],
    [
      [0.5, 0.5, 0],
      [0.5, -0.5, 0],
      [5, -5, 0],
    ],
    [
      [5, 5, 0],
      [-0.5, 0.5, 0],
      [0.5, 0.5, 0],
    ],
    [
      [0.5, 0.5, 0],
      [5, -5, 0],
      [5, 5, 0],
    ],
  ];
  const outline = outlineSurface(surface, normalize);
  t.deepEqual(outline, [
    [
      [5, -5, 0],
      [5, 5, 0],
      [-5, 5, 0],
      [-5, -5, 0],
    ],
    [
      [0.5, 0.5, 0],
      [0.5, -0.5, 0],
      [-0.5, -0.5, 0],
      [-0.5, 0.5, 0],
    ],
  ]);
});

test("two-holes-and-a-notch", (t) => {
  const normalize = createNormalize3();
  const surface = [
    [
      [-5, 5, 0],
      [-5, -5, 0],
      [-0.5, -0.5, 0],
    ],
    [
      [-0.5, 0.5, 0],
      [2.5, 2.5, 0],
      [2.5, 3.5, 0],
    ],
    [
      [0.5, -0.5, 0],
      [-0.5, -0.5, 0],
      [-5, -5, 0],
    ],
    [
      [-5, 5, 0],
      [-0.5, -0.5, 0],
      [-0.5, 0.5, 0],
    ],
    [
      [3.5, 2.5, 0],
      [2.5, 2.5, 0],
      [-0.5, 0.5, 0],
    ],
    [
      [0.5, -0.5, 0],
      [-5, -5, 0],
      [5, -5, 0],
    ],
    [
      [-5, 5, 0],
      [-0.5, 0.5, 0],
      [2.5, 3.5, 0],
    ],
    [
      [3.5, 2.5, 0],
      [-0.5, 0.5, 0],
      [0.5, 0.5, 0],
    ],
    [
      [0.5, 0.5, 0],
      [0.5, -0.5, 0],
      [5, -5, 0],
    ],
    [
      [5, 5, 0],
      [-5, 5, 0],
      [2.5, 3.5, 0],
    ],
    [
      [3.5, 2.5, 0],
      [0.5, 0.5, 0],
      [5, -5, 0],
    ],
    [
      [5, 5, 0],
      [2.5, 3.5, 0],
      [3.5, 3.5, 0],
    ],
    [
      [3.5, 3.5, 0],
      [3.5, 2.5, 0],
      [5, -5, 0],
    ],
    [
      [5, -5, 0],
      [5, 5, 0],
      [3.5, 3.5, 0],
    ],
  ];
  const outline = outlineSurface(surface, normalize);
  t.deepEqual(outline, [
    [
      [5, -5, 0],
      [5, 5, 0],
      [-5, 5, 0],
      [-5, -5, 0],
    ],
    [
      [3.5, 2.5, 0],
      [2.5, 2.5, 0],
      [2.5, 3.5, 0],
      [3.5, 3.5, 0],
    ],
    [
      [-0.5, 0.5, 0],
      [0.5, 0.5, 0],
      [0.5, -0.5, 0],
      [-0.5, -0.5, 0],
    ],
  ]);
});

test("three-holes-and-a-notch", (t) => {
  const normalize = createNormalize3();
  const surface = [
    [
      [-5, -5, 0],
      [-3.5, 2.5, 0],
      [-3.5, 3.5, 0],
    ],
    [
      [-2.5, 3.5, 0],
      [-2.5, 2.5, 0],
      [2.5, 2.5, 0],
    ],
    [
      [-3.5, 2.5, 0],
      [-5, -5, 0],
      [-0.5, -0.5, 0],
    ],
    [
      [0.5, -0.5, 0],
      [-0.5, -0.5, 0],
      [-5, -5, 0],
    ],
    [
      [-5, 5, 0],
      [-5, -5, 0],
      [-3.5, 3.5, 0],
    ],
    [
      [-2.5, 3.5, 0],
      [2.5, 2.5, 0],
      [2.5, 3.5, 0],
    ],
    [
      [-3.5, 2.5, 0],
      [-0.5, -0.5, 0],
      [-0.5, 0.5, 0],
    ],
    [
      [0.5, -0.5, 0],
      [-5, -5, 0],
      [5, -5, 0],
    ],
    [
      [5, 5, 0],
      [-5, 5, 0],
      [-3.5, 3.5, 0],
    ],
    [
      [3.5, 2.5, 0],
      [-3.5, 2.5, 0],
      [-0.5, 0.5, 0],
    ],
    [
      [0.5, 0.5, 0],
      [0.5, -0.5, 0],
      [5, -5, 0],
    ],
    [
      [5, 5, 0],
      [-3.5, 3.5, 0],
      [-2.5, 3.5, 0],
    ],
    [
      [3.5, 2.5, 0],
      [-0.5, 0.5, 0],
      [0.5, 0.5, 0],
    ],
    [
      [5, 5, 0],
      [-2.5, 3.5, 0],
      [2.5, 3.5, 0],
    ],
    [
      [3.5, 2.5, 0],
      [0.5, 0.5, 0],
      [5, -5, 0],
    ],
    [
      [5, 5, 0],
      [2.5, 3.5, 0],
      [3.5, 3.5, 0],
    ],
    [
      [3.5, 3.5, 0],
      [3.5, 2.5, 0],
      [5, -5, 0],
    ],
    [
      [5, -5, 0],
      [5, 5, 0],
      [3.5, 3.5, 0],
    ],
  ];
  const outline = outlineSurface(surface, normalize);
  t.deepEqual(outline, [
    [
      [5, -5, 0],
      [5, 5, 0],
      [-5, 5, 0],
      [-5, -5, 0],
    ],
    [
      [2.5, 3.5, 0],
      [3.5, 3.5, 0],
      [3.5, 2.5, 0],
      [-3.5, 2.5, 0],
      [-3.5, 3.5, 0],
      [-2.5, 3.5, 0],
      [-2.5, 2.5, 0],
      [2.5, 2.5, 0],
    ],
    [
      [0.5, 0.5, 0],
      [0.5, -0.5, 0],
      [-0.5, -0.5, 0],
      [-0.5, 0.5, 0],
    ],
  ]);
});

test("parallel holes", (t) => {
  const normalize = createNormalize3();
  const surface = [
    [
      [-5, -5, 0],
      [-3.5, 2.5, 0],
      [-3.5, 3.5, 0],
    ],
    [
      [-2.5, 3.5, 0],
      [-2.5, 2.5, 0],
      [2.5, 2.5, 0],
    ],
    [
      [-3.5, 2.5, 0],
      [-5, -5, 0],
      [-0.5, -0.5, 0],
    ],
    [
      [0.5, -0.5, 0],
      [-0.5, -0.5, 0],
      [-5, -5, 0],
    ],
    [
      [-5, 5, 0],
      [-5, -5, 0],
      [-3.5, 3.5, 0],
    ],
    [
      [-2.5, 3.5, 0],
      [2.5, 2.5, 0],
      [2.5, 3.5, 0],
    ],
    [
      [-3.5, 2.5, 0],
      [-0.5, -0.5, 0],
      [-0.5, 0.5, 0],
    ],
    [
      [0.5, -0.5, 0],
      [-5, -5, 0],
      [5, -5, 0],
    ],
    [
      [5, 5, 0],
      [-5, 5, 0],
      [-3.5, 3.5, 0],
    ],
    [
      [3.5, 2.5, 0],
      [2.5, 2.5, 0],
      [-2.5, 2.5, 0],
      [-3.5, 2.5, 0],
      [-0.5, 0.5, 0],
    ],
    [
      [0.5, 0.5, 0],
      [0.5, -0.5, 0],
      [5, -5, 0],
    ],
    [
      [5, 5, 0],
      [-3.5, 3.5, 0],
      [-2.5, 3.5, 0],
    ],
    [
      [3.5, 2.5, 0],
      [-0.5, 0.5, 0],
      [0.5, 0.5, 0],
    ],
    [
      [5, 5, 0],
      [-2.5, 3.5, 0],
      [2.5, 3.5, 0],
    ],
    [
      [3.5, 2.5, 0],
      [0.5, 0.5, 0],
      [5, -5, 0],
    ],
    [
      [5, 5, 0],
      [2.5, 3.5, 0],
      [3.5, 3.5, 0],
    ],
    [
      [3.5, 3.5, 0],
      [3.5, 2.5, 0],
      [5, -5, 0],
    ],
    [
      [5, -5, 0],
      [5, 5, 0],
      [3.5, 3.5, 0],
    ],
  ];
  const outline = outlineSurface(surface, normalize);
  t.deepEqual(outline, [
    [
      [5, -5, 0],
      [5, 5, 0],
      [-5, 5, 0],
      [-5, -5, 0],
    ],
    [
      [2.5, 3.5, 0],
      [3.5, 3.5, 0],
      [3.5, 2.5, 0],
      [2.5, 2.5, 0],
    ],
    [
      [-3.5, 3.5, 0],
      [-2.5, 3.5, 0],
      [-2.5, 2.5, 0],
      [-3.5, 2.5, 0],
    ],
    [
      [0.5, 0.5, 0],
      [0.5, -0.5, 0],
      [-0.5, -0.5, 0],
      [-0.5, 0.5, 0],
    ],
  ]);
});
